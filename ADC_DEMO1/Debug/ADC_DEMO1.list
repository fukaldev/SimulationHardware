
ADC_DEMO1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080082b8  080082b8  000182b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008368  08008368  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008368  08008368  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008368  08008368  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008368  08008368  00018368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800836c  0800836c  0001836c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008370  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001264  200001e0  08008550  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001444  08008550  00021444  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145ce  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033a4  00000000  00000000  000347d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  00037b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa8  00000000  00000000  000387a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4f7  00000000  00000000  00039248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010948  00000000  00000000  0005373f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089f35  00000000  00000000  00064087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000edfbc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032e4  00000000  00000000  000ee010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	080082a0 	.word	0x080082a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	080082a0 	.word	0x080082a0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN 0 */
uint32_t data[2] = {0};
uint32_t adc_buffer[2] = {0};

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	4a07      	ldr	r2, [pc, #28]	; (8000188 <HAL_ADC_ConvCpltCallback+0x2c>)
 800016a:	4293      	cmp	r3, r2
 800016c:	d107      	bne.n	800017e <HAL_ADC_ConvCpltCallback+0x22>
	{
		data[0] = adc_buffer[0];
 800016e:	4b07      	ldr	r3, [pc, #28]	; (800018c <HAL_ADC_ConvCpltCallback+0x30>)
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	4a07      	ldr	r2, [pc, #28]	; (8000190 <HAL_ADC_ConvCpltCallback+0x34>)
 8000174:	6013      	str	r3, [r2, #0]
		data[1] = adc_buffer[1];
 8000176:	4b05      	ldr	r3, [pc, #20]	; (800018c <HAL_ADC_ConvCpltCallback+0x30>)
 8000178:	685b      	ldr	r3, [r3, #4]
 800017a:	4a05      	ldr	r2, [pc, #20]	; (8000190 <HAL_ADC_ConvCpltCallback+0x34>)
 800017c:	6053      	str	r3, [r2, #4]
	}
}
 800017e:	bf00      	nop
 8000180:	370c      	adds	r7, #12
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	40012400 	.word	0x40012400
 800018c:	20000204 	.word	0x20000204
 8000190:	200001fc 	.word	0x200001fc

08000194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b09e      	sub	sp, #120	; 0x78
 8000198:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800019a:	f000 fa6d 	bl	8000678 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019e:	f000 f835 	bl	800020c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001a2:	f000 f8fb 	bl	800039c <MX_GPIO_Init>
  MX_DMA_Init();
 80001a6:	f000 f8db 	bl	8000360 <MX_DMA_Init>
  MX_ADC1_Init();
 80001aa:	f000 f88d 	bl	80002c8 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80001ae:	f006 ff6f 	bl	8007090 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, adc_buffer, 2);
 80001b2:	2202      	movs	r2, #2
 80001b4:	4911      	ldr	r1, [pc, #68]	; (80001fc <main+0x68>)
 80001b6:	4812      	ldr	r0, [pc, #72]	; (8000200 <main+0x6c>)
 80001b8:	f000 fbbc 	bl	8000934 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */
  char buffer[120] = {0};
 80001bc:	2300      	movs	r3, #0
 80001be:	603b      	str	r3, [r7, #0]
 80001c0:	1d3b      	adds	r3, r7, #4
 80001c2:	2274      	movs	r2, #116	; 0x74
 80001c4:	2100      	movs	r1, #0
 80001c6:	4618      	mov	r0, r3
 80001c8:	f007 fc28 	bl	8007a1c <memset>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf(buffer, "ADC1: %d ADC2: %d\n", data[0], data[1]);
 80001cc:	4b0d      	ldr	r3, [pc, #52]	; (8000204 <main+0x70>)
 80001ce:	681a      	ldr	r2, [r3, #0]
 80001d0:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <main+0x70>)
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	4638      	mov	r0, r7
 80001d6:	490c      	ldr	r1, [pc, #48]	; (8000208 <main+0x74>)
 80001d8:	f007 fc28 	bl	8007a2c <siprintf>
	  CDC_Transmit_FS(buffer, strlen(buffer));
 80001dc:	463b      	mov	r3, r7
 80001de:	4618      	mov	r0, r3
 80001e0:	f7ff ffb4 	bl	800014c <strlen>
 80001e4:	4603      	mov	r3, r0
 80001e6:	b29a      	uxth	r2, r3
 80001e8:	463b      	mov	r3, r7
 80001ea:	4611      	mov	r1, r2
 80001ec:	4618      	mov	r0, r3
 80001ee:	f007 f80d 	bl	800720c <CDC_Transmit_FS>
	  HAL_Delay(2000);
 80001f2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80001f6:	f000 faa1 	bl	800073c <HAL_Delay>
	  sprintf(buffer, "ADC1: %d ADC2: %d\n", data[0], data[1]);
 80001fa:	e7e7      	b.n	80001cc <main+0x38>
 80001fc:	20000204 	.word	0x20000204
 8000200:	2000043c 	.word	0x2000043c
 8000204:	200001fc 	.word	0x200001fc
 8000208:	080082b8 	.word	0x080082b8

0800020c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b094      	sub	sp, #80	; 0x50
 8000210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000212:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000216:	2228      	movs	r2, #40	; 0x28
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f007 fbfe 	bl	8007a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000220:	f107 0314 	add.w	r3, r7, #20
 8000224:	2200      	movs	r2, #0
 8000226:	601a      	str	r2, [r3, #0]
 8000228:	605a      	str	r2, [r3, #4]
 800022a:	609a      	str	r2, [r3, #8]
 800022c:	60da      	str	r2, [r3, #12]
 800022e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000230:	1d3b      	adds	r3, r7, #4
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
 8000236:	605a      	str	r2, [r3, #4]
 8000238:	609a      	str	r2, [r3, #8]
 800023a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800023c:	2301      	movs	r3, #1
 800023e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000240:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000244:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024a:	2301      	movs	r3, #1
 800024c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024e:	2302      	movs	r3, #2
 8000250:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000252:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000256:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000258:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800025c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000262:	4618      	mov	r0, r3
 8000264:	f002 fe52 	bl	8002f0c <HAL_RCC_OscConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800026e:	f000 f8c3 	bl	80003f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000272:	230f      	movs	r3, #15
 8000274:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000276:	2302      	movs	r3, #2
 8000278:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000282:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000288:	f107 0314 	add.w	r3, r7, #20
 800028c:	2101      	movs	r1, #1
 800028e:	4618      	mov	r0, r3
 8000290:	f003 f8bc 	bl	800340c <HAL_RCC_ClockConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800029a:	f000 f8ad 	bl	80003f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800029e:	2312      	movs	r3, #18
 80002a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80002a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80002a6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80002a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80002ac:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	4618      	mov	r0, r3
 80002b2:	f003 fa13 	bl	80036dc <HAL_RCCEx_PeriphCLKConfig>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002bc:	f000 f89c 	bl	80003f8 <Error_Handler>
  }
}
 80002c0:	bf00      	nop
 80002c2:	3750      	adds	r7, #80	; 0x50
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	605a      	str	r2, [r3, #4]
 80002d6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002d8:	4b1f      	ldr	r3, [pc, #124]	; (8000358 <MX_ADC1_Init+0x90>)
 80002da:	4a20      	ldr	r2, [pc, #128]	; (800035c <MX_ADC1_Init+0x94>)
 80002dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002de:	4b1e      	ldr	r3, [pc, #120]	; (8000358 <MX_ADC1_Init+0x90>)
 80002e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002e6:	4b1c      	ldr	r3, [pc, #112]	; (8000358 <MX_ADC1_Init+0x90>)
 80002e8:	2201      	movs	r2, #1
 80002ea:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002ec:	4b1a      	ldr	r3, [pc, #104]	; (8000358 <MX_ADC1_Init+0x90>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002f2:	4b19      	ldr	r3, [pc, #100]	; (8000358 <MX_ADC1_Init+0x90>)
 80002f4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002fa:	4b17      	ldr	r3, [pc, #92]	; (8000358 <MX_ADC1_Init+0x90>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000300:	4b15      	ldr	r3, [pc, #84]	; (8000358 <MX_ADC1_Init+0x90>)
 8000302:	2202      	movs	r2, #2
 8000304:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000306:	4814      	ldr	r0, [pc, #80]	; (8000358 <MX_ADC1_Init+0x90>)
 8000308:	f000 fa3c 	bl	8000784 <HAL_ADC_Init>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000312:	f000 f871 	bl	80003f8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000316:	2308      	movs	r3, #8
 8000318:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800031a:	2301      	movs	r3, #1
 800031c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800031e:	2305      	movs	r3, #5
 8000320:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	4619      	mov	r1, r3
 8000326:	480c      	ldr	r0, [pc, #48]	; (8000358 <MX_ADC1_Init+0x90>)
 8000328:	f000 fbf4 	bl	8000b14 <HAL_ADC_ConfigChannel>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000332:	f000 f861 	bl	80003f8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000336:	2302      	movs	r3, #2
 8000338:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	4619      	mov	r1, r3
 800033e:	4806      	ldr	r0, [pc, #24]	; (8000358 <MX_ADC1_Init+0x90>)
 8000340:	f000 fbe8 	bl	8000b14 <HAL_ADC_ConfigChannel>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800034a:	f000 f855 	bl	80003f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800034e:	bf00      	nop
 8000350:	3710      	adds	r7, #16
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	2000043c 	.word	0x2000043c
 800035c:	40012400 	.word	0x40012400

08000360 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000366:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <MX_DMA_Init+0x38>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	4a0b      	ldr	r2, [pc, #44]	; (8000398 <MX_DMA_Init+0x38>)
 800036c:	f043 0301 	orr.w	r3, r3, #1
 8000370:	6153      	str	r3, [r2, #20]
 8000372:	4b09      	ldr	r3, [pc, #36]	; (8000398 <MX_DMA_Init+0x38>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	f003 0301 	and.w	r3, r3, #1
 800037a:	607b      	str	r3, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800037e:	2200      	movs	r2, #0
 8000380:	2100      	movs	r1, #0
 8000382:	200b      	movs	r0, #11
 8000384:	f000 fe87 	bl	8001096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000388:	200b      	movs	r0, #11
 800038a:	f000 fea0 	bl	80010ce <HAL_NVIC_EnableIRQ>

}
 800038e:	bf00      	nop
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	40021000 	.word	0x40021000

0800039c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800039c:	b480      	push	{r7}
 800039e:	b085      	sub	sp, #20
 80003a0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003a2:	4b14      	ldr	r3, [pc, #80]	; (80003f4 <MX_GPIO_Init+0x58>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	4a13      	ldr	r2, [pc, #76]	; (80003f4 <MX_GPIO_Init+0x58>)
 80003a8:	f043 0320 	orr.w	r3, r3, #32
 80003ac:	6193      	str	r3, [r2, #24]
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <MX_GPIO_Init+0x58>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	f003 0320 	and.w	r3, r3, #32
 80003b6:	60fb      	str	r3, [r7, #12]
 80003b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ba:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <MX_GPIO_Init+0x58>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	4a0d      	ldr	r2, [pc, #52]	; (80003f4 <MX_GPIO_Init+0x58>)
 80003c0:	f043 0308 	orr.w	r3, r3, #8
 80003c4:	6193      	str	r3, [r2, #24]
 80003c6:	4b0b      	ldr	r3, [pc, #44]	; (80003f4 <MX_GPIO_Init+0x58>)
 80003c8:	699b      	ldr	r3, [r3, #24]
 80003ca:	f003 0308 	and.w	r3, r3, #8
 80003ce:	60bb      	str	r3, [r7, #8]
 80003d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d2:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <MX_GPIO_Init+0x58>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	4a07      	ldr	r2, [pc, #28]	; (80003f4 <MX_GPIO_Init+0x58>)
 80003d8:	f043 0304 	orr.w	r3, r3, #4
 80003dc:	6193      	str	r3, [r2, #24]
 80003de:	4b05      	ldr	r3, [pc, #20]	; (80003f4 <MX_GPIO_Init+0x58>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	f003 0304 	and.w	r3, r3, #4
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]

}
 80003ea:	bf00      	nop
 80003ec:	3714      	adds	r7, #20
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bc80      	pop	{r7}
 80003f2:	4770      	bx	lr
 80003f4:	40021000 	.word	0x40021000

080003f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003fc:	b672      	cpsid	i
}
 80003fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000400:	e7fe      	b.n	8000400 <Error_Handler+0x8>
	...

08000404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000404:	b480      	push	{r7}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800040a:	4b15      	ldr	r3, [pc, #84]	; (8000460 <HAL_MspInit+0x5c>)
 800040c:	699b      	ldr	r3, [r3, #24]
 800040e:	4a14      	ldr	r2, [pc, #80]	; (8000460 <HAL_MspInit+0x5c>)
 8000410:	f043 0301 	orr.w	r3, r3, #1
 8000414:	6193      	str	r3, [r2, #24]
 8000416:	4b12      	ldr	r3, [pc, #72]	; (8000460 <HAL_MspInit+0x5c>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	f003 0301 	and.w	r3, r3, #1
 800041e:	60bb      	str	r3, [r7, #8]
 8000420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000422:	4b0f      	ldr	r3, [pc, #60]	; (8000460 <HAL_MspInit+0x5c>)
 8000424:	69db      	ldr	r3, [r3, #28]
 8000426:	4a0e      	ldr	r2, [pc, #56]	; (8000460 <HAL_MspInit+0x5c>)
 8000428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800042c:	61d3      	str	r3, [r2, #28]
 800042e:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <HAL_MspInit+0x5c>)
 8000430:	69db      	ldr	r3, [r3, #28]
 8000432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000436:	607b      	str	r3, [r7, #4]
 8000438:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800043a:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <HAL_MspInit+0x60>)
 800043c:	685b      	ldr	r3, [r3, #4]
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800044e:	60fb      	str	r3, [r7, #12]
 8000450:	4a04      	ldr	r2, [pc, #16]	; (8000464 <HAL_MspInit+0x60>)
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000456:	bf00      	nop
 8000458:	3714      	adds	r7, #20
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr
 8000460:	40021000 	.word	0x40021000
 8000464:	40010000 	.word	0x40010000

08000468 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b088      	sub	sp, #32
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000470:	f107 0310 	add.w	r3, r7, #16
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
 8000478:	605a      	str	r2, [r3, #4]
 800047a:	609a      	str	r2, [r3, #8]
 800047c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4a29      	ldr	r2, [pc, #164]	; (8000528 <HAL_ADC_MspInit+0xc0>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d14a      	bne.n	800051e <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000488:	4b28      	ldr	r3, [pc, #160]	; (800052c <HAL_ADC_MspInit+0xc4>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	4a27      	ldr	r2, [pc, #156]	; (800052c <HAL_ADC_MspInit+0xc4>)
 800048e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000492:	6193      	str	r3, [r2, #24]
 8000494:	4b25      	ldr	r3, [pc, #148]	; (800052c <HAL_ADC_MspInit+0xc4>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800049c:	60fb      	str	r3, [r7, #12]
 800049e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a0:	4b22      	ldr	r3, [pc, #136]	; (800052c <HAL_ADC_MspInit+0xc4>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a21      	ldr	r2, [pc, #132]	; (800052c <HAL_ADC_MspInit+0xc4>)
 80004a6:	f043 0308 	orr.w	r3, r3, #8
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	4b1f      	ldr	r3, [pc, #124]	; (800052c <HAL_ADC_MspInit+0xc4>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	f003 0308 	and.w	r3, r3, #8
 80004b4:	60bb      	str	r3, [r7, #8]
 80004b6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80004b8:	2303      	movs	r3, #3
 80004ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004bc:	2303      	movs	r3, #3
 80004be:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c0:	f107 0310 	add.w	r3, r7, #16
 80004c4:	4619      	mov	r1, r3
 80004c6:	481a      	ldr	r0, [pc, #104]	; (8000530 <HAL_ADC_MspInit+0xc8>)
 80004c8:	f001 f80a 	bl	80014e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80004cc:	4b19      	ldr	r3, [pc, #100]	; (8000534 <HAL_ADC_MspInit+0xcc>)
 80004ce:	4a1a      	ldr	r2, [pc, #104]	; (8000538 <HAL_ADC_MspInit+0xd0>)
 80004d0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80004d2:	4b18      	ldr	r3, [pc, #96]	; (8000534 <HAL_ADC_MspInit+0xcc>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80004d8:	4b16      	ldr	r3, [pc, #88]	; (8000534 <HAL_ADC_MspInit+0xcc>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80004de:	4b15      	ldr	r3, [pc, #84]	; (8000534 <HAL_ADC_MspInit+0xcc>)
 80004e0:	2280      	movs	r2, #128	; 0x80
 80004e2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80004e4:	4b13      	ldr	r3, [pc, #76]	; (8000534 <HAL_ADC_MspInit+0xcc>)
 80004e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004ea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80004ec:	4b11      	ldr	r3, [pc, #68]	; (8000534 <HAL_ADC_MspInit+0xcc>)
 80004ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80004f2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80004f4:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <HAL_ADC_MspInit+0xcc>)
 80004f6:	2220      	movs	r2, #32
 80004f8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80004fa:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <HAL_ADC_MspInit+0xcc>)
 80004fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000500:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000502:	480c      	ldr	r0, [pc, #48]	; (8000534 <HAL_ADC_MspInit+0xcc>)
 8000504:	f000 fdfe 	bl	8001104 <HAL_DMA_Init>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 800050e:	f7ff ff73 	bl	80003f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	4a07      	ldr	r2, [pc, #28]	; (8000534 <HAL_ADC_MspInit+0xcc>)
 8000516:	621a      	str	r2, [r3, #32]
 8000518:	4a06      	ldr	r2, [pc, #24]	; (8000534 <HAL_ADC_MspInit+0xcc>)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800051e:	bf00      	nop
 8000520:	3720      	adds	r7, #32
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40012400 	.word	0x40012400
 800052c:	40021000 	.word	0x40021000
 8000530:	40010c00 	.word	0x40010c00
 8000534:	2000046c 	.word	0x2000046c
 8000538:	40020008 	.word	0x40020008

0800053c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000540:	e7fe      	b.n	8000540 <NMI_Handler+0x4>

08000542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000546:	e7fe      	b.n	8000546 <HardFault_Handler+0x4>

08000548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800054c:	e7fe      	b.n	800054c <MemManage_Handler+0x4>

0800054e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000552:	e7fe      	b.n	8000552 <BusFault_Handler+0x4>

08000554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000558:	e7fe      	b.n	8000558 <UsageFault_Handler+0x4>

0800055a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800055e:	bf00      	nop
 8000560:	46bd      	mov	sp, r7
 8000562:	bc80      	pop	{r7}
 8000564:	4770      	bx	lr

08000566 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800056a:	bf00      	nop
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr

08000572 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000576:	bf00      	nop
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr

0800057e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800057e:	b580      	push	{r7, lr}
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000582:	f000 f8bf 	bl	8000704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000590:	4802      	ldr	r0, [pc, #8]	; (800059c <DMA1_Channel1_IRQHandler+0x10>)
 8000592:	f000 fe71 	bl	8001278 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	2000046c 	.word	0x2000046c

080005a0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80005a4:	4802      	ldr	r0, [pc, #8]	; (80005b0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80005a6:	f001 fa50 	bl	8001a4a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20001148 	.word	0x20001148

080005b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005bc:	4a14      	ldr	r2, [pc, #80]	; (8000610 <_sbrk+0x5c>)
 80005be:	4b15      	ldr	r3, [pc, #84]	; (8000614 <_sbrk+0x60>)
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005c8:	4b13      	ldr	r3, [pc, #76]	; (8000618 <_sbrk+0x64>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d102      	bne.n	80005d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005d0:	4b11      	ldr	r3, [pc, #68]	; (8000618 <_sbrk+0x64>)
 80005d2:	4a12      	ldr	r2, [pc, #72]	; (800061c <_sbrk+0x68>)
 80005d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <_sbrk+0x64>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4413      	add	r3, r2
 80005de:	693a      	ldr	r2, [r7, #16]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d207      	bcs.n	80005f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005e4:	f007 f9f0 	bl	80079c8 <__errno>
 80005e8:	4603      	mov	r3, r0
 80005ea:	220c      	movs	r2, #12
 80005ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005f2:	e009      	b.n	8000608 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005f4:	4b08      	ldr	r3, [pc, #32]	; (8000618 <_sbrk+0x64>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005fa:	4b07      	ldr	r3, [pc, #28]	; (8000618 <_sbrk+0x64>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4413      	add	r3, r2
 8000602:	4a05      	ldr	r2, [pc, #20]	; (8000618 <_sbrk+0x64>)
 8000604:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000606:	68fb      	ldr	r3, [r7, #12]
}
 8000608:	4618      	mov	r0, r3
 800060a:	3718      	adds	r7, #24
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20005000 	.word	0x20005000
 8000614:	00000400 	.word	0x00000400
 8000618:	2000020c 	.word	0x2000020c
 800061c:	20001448 	.word	0x20001448

08000620 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr

0800062c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800062c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800062e:	e003      	b.n	8000638 <LoopCopyDataInit>

08000630 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000630:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000632:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000634:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000636:	3104      	adds	r1, #4

08000638 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000638:	480a      	ldr	r0, [pc, #40]	; (8000664 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800063a:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800063c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800063e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000640:	d3f6      	bcc.n	8000630 <CopyDataInit>
  ldr r2, =_sbss
 8000642:	4a0a      	ldr	r2, [pc, #40]	; (800066c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000644:	e002      	b.n	800064c <LoopFillZerobss>

08000646 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000646:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000648:	f842 3b04 	str.w	r3, [r2], #4

0800064c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800064e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000650:	d3f9      	bcc.n	8000646 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000652:	f7ff ffe5 	bl	8000620 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000656:	f007 f9bd 	bl	80079d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800065a:	f7ff fd9b 	bl	8000194 <main>
  bx lr
 800065e:	4770      	bx	lr
  ldr r3, =_sidata
 8000660:	08008370 	.word	0x08008370
  ldr r0, =_sdata
 8000664:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000668:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 800066c:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8000670:	20001444 	.word	0x20001444

08000674 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000674:	e7fe      	b.n	8000674 <ADC1_2_IRQHandler>
	...

08000678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800067c:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <HAL_Init+0x28>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a07      	ldr	r2, [pc, #28]	; (80006a0 <HAL_Init+0x28>)
 8000682:	f043 0310 	orr.w	r3, r3, #16
 8000686:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000688:	2003      	movs	r0, #3
 800068a:	f000 fcf9 	bl	8001080 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800068e:	2000      	movs	r0, #0
 8000690:	f000 f808 	bl	80006a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000694:	f7ff feb6 	bl	8000404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000698:	2300      	movs	r3, #0
}
 800069a:	4618      	mov	r0, r3
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40022000 	.word	0x40022000

080006a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <HAL_InitTick+0x54>)
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <HAL_InitTick+0x58>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	4619      	mov	r1, r3
 80006b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80006be:	fbb2 f3f3 	udiv	r3, r2, r3
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 fd11 	bl	80010ea <HAL_SYSTICK_Config>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ce:	2301      	movs	r3, #1
 80006d0:	e00e      	b.n	80006f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2b0f      	cmp	r3, #15
 80006d6:	d80a      	bhi.n	80006ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006d8:	2200      	movs	r2, #0
 80006da:	6879      	ldr	r1, [r7, #4]
 80006dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006e0:	f000 fcd9 	bl	8001096 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006e4:	4a06      	ldr	r2, [pc, #24]	; (8000700 <HAL_InitTick+0x5c>)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006ea:	2300      	movs	r3, #0
 80006ec:	e000      	b.n	80006f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006ee:	2301      	movs	r3, #1
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000000 	.word	0x20000000
 80006fc:	20000008 	.word	0x20000008
 8000700:	20000004 	.word	0x20000004

08000704 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000708:	4b05      	ldr	r3, [pc, #20]	; (8000720 <HAL_IncTick+0x1c>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	461a      	mov	r2, r3
 800070e:	4b05      	ldr	r3, [pc, #20]	; (8000724 <HAL_IncTick+0x20>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4413      	add	r3, r2
 8000714:	4a03      	ldr	r2, [pc, #12]	; (8000724 <HAL_IncTick+0x20>)
 8000716:	6013      	str	r3, [r2, #0]
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	20000008 	.word	0x20000008
 8000724:	200004b0 	.word	0x200004b0

08000728 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  return uwTick;
 800072c:	4b02      	ldr	r3, [pc, #8]	; (8000738 <HAL_GetTick+0x10>)
 800072e:	681b      	ldr	r3, [r3, #0]
}
 8000730:	4618      	mov	r0, r3
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	200004b0 	.word	0x200004b0

0800073c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000744:	f7ff fff0 	bl	8000728 <HAL_GetTick>
 8000748:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000754:	d005      	beq.n	8000762 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000756:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <HAL_Delay+0x44>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	461a      	mov	r2, r3
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	4413      	add	r3, r2
 8000760:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000762:	bf00      	nop
 8000764:	f7ff ffe0 	bl	8000728 <HAL_GetTick>
 8000768:	4602      	mov	r2, r0
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	1ad3      	subs	r3, r2, r3
 800076e:	68fa      	ldr	r2, [r7, #12]
 8000770:	429a      	cmp	r2, r3
 8000772:	d8f7      	bhi.n	8000764 <HAL_Delay+0x28>
  {
  }
}
 8000774:	bf00      	nop
 8000776:	bf00      	nop
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000008 	.word	0x20000008

08000784 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800078c:	2300      	movs	r3, #0
 800078e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000790:	2300      	movs	r3, #0
 8000792:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000798:	2300      	movs	r3, #0
 800079a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d101      	bne.n	80007a6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80007a2:	2301      	movs	r3, #1
 80007a4:	e0be      	b.n	8000924 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	689b      	ldr	r3, [r3, #8]
 80007aa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d109      	bne.n	80007c8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2200      	movs	r2, #0
 80007b8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2200      	movs	r2, #0
 80007be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f7ff fe50 	bl	8000468 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f000 faed 	bl	8000da8 <ADC_ConversionStop_Disable>
 80007ce:	4603      	mov	r3, r0
 80007d0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007d6:	f003 0310 	and.w	r3, r3, #16
 80007da:	2b00      	cmp	r3, #0
 80007dc:	f040 8099 	bne.w	8000912 <HAL_ADC_Init+0x18e>
 80007e0:	7dfb      	ldrb	r3, [r7, #23]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	f040 8095 	bne.w	8000912 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80007f0:	f023 0302 	bic.w	r3, r3, #2
 80007f4:	f043 0202 	orr.w	r2, r3, #2
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000804:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	7b1b      	ldrb	r3, [r3, #12]
 800080a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800080c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800080e:	68ba      	ldr	r2, [r7, #8]
 8000810:	4313      	orrs	r3, r2
 8000812:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	689b      	ldr	r3, [r3, #8]
 8000818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800081c:	d003      	beq.n	8000826 <HAL_ADC_Init+0xa2>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	689b      	ldr	r3, [r3, #8]
 8000822:	2b01      	cmp	r3, #1
 8000824:	d102      	bne.n	800082c <HAL_ADC_Init+0xa8>
 8000826:	f44f 7380 	mov.w	r3, #256	; 0x100
 800082a:	e000      	b.n	800082e <HAL_ADC_Init+0xaa>
 800082c:	2300      	movs	r3, #0
 800082e:	693a      	ldr	r2, [r7, #16]
 8000830:	4313      	orrs	r3, r2
 8000832:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	7d1b      	ldrb	r3, [r3, #20]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d119      	bne.n	8000870 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	7b1b      	ldrb	r3, [r3, #12]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d109      	bne.n	8000858 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	3b01      	subs	r3, #1
 800084a:	035a      	lsls	r2, r3, #13
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	4313      	orrs	r3, r2
 8000850:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000854:	613b      	str	r3, [r7, #16]
 8000856:	e00b      	b.n	8000870 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800085c:	f043 0220 	orr.w	r2, r3, #32
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000868:	f043 0201 	orr.w	r2, r3, #1
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	693a      	ldr	r2, [r7, #16]
 8000880:	430a      	orrs	r2, r1
 8000882:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	689a      	ldr	r2, [r3, #8]
 800088a:	4b28      	ldr	r3, [pc, #160]	; (800092c <HAL_ADC_Init+0x1a8>)
 800088c:	4013      	ands	r3, r2
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	6812      	ldr	r2, [r2, #0]
 8000892:	68b9      	ldr	r1, [r7, #8]
 8000894:	430b      	orrs	r3, r1
 8000896:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008a0:	d003      	beq.n	80008aa <HAL_ADC_Init+0x126>
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	689b      	ldr	r3, [r3, #8]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d104      	bne.n	80008b4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	691b      	ldr	r3, [r3, #16]
 80008ae:	3b01      	subs	r3, #1
 80008b0:	051b      	lsls	r3, r3, #20
 80008b2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ba:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	68fa      	ldr	r2, [r7, #12]
 80008c4:	430a      	orrs	r2, r1
 80008c6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	689a      	ldr	r2, [r3, #8]
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <HAL_ADC_Init+0x1ac>)
 80008d0:	4013      	ands	r3, r2
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	d10b      	bne.n	80008f0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2200      	movs	r2, #0
 80008dc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008e2:	f023 0303 	bic.w	r3, r3, #3
 80008e6:	f043 0201 	orr.w	r2, r3, #1
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008ee:	e018      	b.n	8000922 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008f4:	f023 0312 	bic.w	r3, r3, #18
 80008f8:	f043 0210 	orr.w	r2, r3, #16
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000904:	f043 0201 	orr.w	r2, r3, #1
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800090c:	2301      	movs	r3, #1
 800090e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000910:	e007      	b.n	8000922 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000916:	f043 0210 	orr.w	r2, r3, #16
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800091e:	2301      	movs	r3, #1
 8000920:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000922:	7dfb      	ldrb	r3, [r7, #23]
}
 8000924:	4618      	mov	r0, r3
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	ffe1f7fd 	.word	0xffe1f7fd
 8000930:	ff1f0efe 	.word	0xff1f0efe

08000934 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000940:	2300      	movs	r3, #0
 8000942:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a64      	ldr	r2, [pc, #400]	; (8000adc <HAL_ADC_Start_DMA+0x1a8>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d004      	beq.n	8000958 <HAL_ADC_Start_DMA+0x24>
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a63      	ldr	r2, [pc, #396]	; (8000ae0 <HAL_ADC_Start_DMA+0x1ac>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d106      	bne.n	8000966 <HAL_ADC_Start_DMA+0x32>
 8000958:	4b60      	ldr	r3, [pc, #384]	; (8000adc <HAL_ADC_Start_DMA+0x1a8>)
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000960:	2b00      	cmp	r3, #0
 8000962:	f040 80b3 	bne.w	8000acc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800096c:	2b01      	cmp	r3, #1
 800096e:	d101      	bne.n	8000974 <HAL_ADC_Start_DMA+0x40>
 8000970:	2302      	movs	r3, #2
 8000972:	e0ae      	b.n	8000ad2 <HAL_ADC_Start_DMA+0x19e>
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	2201      	movs	r2, #1
 8000978:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800097c:	68f8      	ldr	r0, [r7, #12]
 800097e:	f000 f9c1 	bl	8000d04 <ADC_Enable>
 8000982:	4603      	mov	r3, r0
 8000984:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000986:	7dfb      	ldrb	r3, [r7, #23]
 8000988:	2b00      	cmp	r3, #0
 800098a:	f040 809a 	bne.w	8000ac2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000992:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000996:	f023 0301 	bic.w	r3, r3, #1
 800099a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a4e      	ldr	r2, [pc, #312]	; (8000ae0 <HAL_ADC_Start_DMA+0x1ac>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d105      	bne.n	80009b8 <HAL_ADC_Start_DMA+0x84>
 80009ac:	4b4b      	ldr	r3, [pc, #300]	; (8000adc <HAL_ADC_Start_DMA+0x1a8>)
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d115      	bne.n	80009e4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009bc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d026      	beq.n	8000a20 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80009e2:	e01d      	b.n	8000a20 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a39      	ldr	r2, [pc, #228]	; (8000adc <HAL_ADC_Start_DMA+0x1a8>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d004      	beq.n	8000a04 <HAL_ADC_Start_DMA+0xd0>
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a38      	ldr	r2, [pc, #224]	; (8000ae0 <HAL_ADC_Start_DMA+0x1ac>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d10d      	bne.n	8000a20 <HAL_ADC_Start_DMA+0xec>
 8000a04:	4b35      	ldr	r3, [pc, #212]	; (8000adc <HAL_ADC_Start_DMA+0x1a8>)
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d007      	beq.n	8000a20 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a18:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d006      	beq.n	8000a3a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a30:	f023 0206 	bic.w	r2, r3, #6
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a38:	e002      	b.n	8000a40 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	2200      	movs	r2, #0
 8000a44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	6a1b      	ldr	r3, [r3, #32]
 8000a4c:	4a25      	ldr	r2, [pc, #148]	; (8000ae4 <HAL_ADC_Start_DMA+0x1b0>)
 8000a4e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	6a1b      	ldr	r3, [r3, #32]
 8000a54:	4a24      	ldr	r2, [pc, #144]	; (8000ae8 <HAL_ADC_Start_DMA+0x1b4>)
 8000a56:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	6a1b      	ldr	r3, [r3, #32]
 8000a5c:	4a23      	ldr	r2, [pc, #140]	; (8000aec <HAL_ADC_Start_DMA+0x1b8>)
 8000a5e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f06f 0202 	mvn.w	r2, #2
 8000a68:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	689a      	ldr	r2, [r3, #8]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a78:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	6a18      	ldr	r0, [r3, #32]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	334c      	adds	r3, #76	; 0x4c
 8000a84:	4619      	mov	r1, r3
 8000a86:	68ba      	ldr	r2, [r7, #8]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f000 fb95 	bl	80011b8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000a98:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000a9c:	d108      	bne.n	8000ab0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	689a      	ldr	r2, [r3, #8]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000aac:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000aae:	e00f      	b.n	8000ad0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	689a      	ldr	r2, [r3, #8]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000abe:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000ac0:	e006      	b.n	8000ad0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000aca:	e001      	b.n	8000ad0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000acc:	2301      	movs	r3, #1
 8000ace:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40012400 	.word	0x40012400
 8000ae0:	40012800 	.word	0x40012800
 8000ae4:	08000e1d 	.word	0x08000e1d
 8000ae8:	08000e99 	.word	0x08000e99
 8000aec:	08000eb5 	.word	0x08000eb5

08000af0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr

08000b02 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000b02:	b480      	push	{r7}
 8000b04:	b083      	sub	sp, #12
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr

08000b14 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d101      	bne.n	8000b34 <HAL_ADC_ConfigChannel+0x20>
 8000b30:	2302      	movs	r3, #2
 8000b32:	e0dc      	b.n	8000cee <HAL_ADC_ConfigChannel+0x1da>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2201      	movs	r2, #1
 8000b38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	2b06      	cmp	r3, #6
 8000b42:	d81c      	bhi.n	8000b7e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685a      	ldr	r2, [r3, #4]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	4413      	add	r3, r2
 8000b54:	3b05      	subs	r3, #5
 8000b56:	221f      	movs	r2, #31
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	4019      	ands	r1, r3
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	6818      	ldr	r0, [r3, #0]
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685a      	ldr	r2, [r3, #4]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	4413      	add	r3, r2
 8000b6e:	3b05      	subs	r3, #5
 8000b70:	fa00 f203 	lsl.w	r2, r0, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	635a      	str	r2, [r3, #52]	; 0x34
 8000b7c:	e03c      	b.n	8000bf8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	2b0c      	cmp	r3, #12
 8000b84:	d81c      	bhi.n	8000bc0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685a      	ldr	r2, [r3, #4]
 8000b90:	4613      	mov	r3, r2
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	4413      	add	r3, r2
 8000b96:	3b23      	subs	r3, #35	; 0x23
 8000b98:	221f      	movs	r2, #31
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	43db      	mvns	r3, r3
 8000ba0:	4019      	ands	r1, r3
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	6818      	ldr	r0, [r3, #0]
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685a      	ldr	r2, [r3, #4]
 8000baa:	4613      	mov	r3, r2
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	4413      	add	r3, r2
 8000bb0:	3b23      	subs	r3, #35	; 0x23
 8000bb2:	fa00 f203 	lsl.w	r2, r0, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	631a      	str	r2, [r3, #48]	; 0x30
 8000bbe:	e01b      	b.n	8000bf8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685a      	ldr	r2, [r3, #4]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	4413      	add	r3, r2
 8000bd0:	3b41      	subs	r3, #65	; 0x41
 8000bd2:	221f      	movs	r2, #31
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	4019      	ands	r1, r3
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	6818      	ldr	r0, [r3, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685a      	ldr	r2, [r3, #4]
 8000be4:	4613      	mov	r3, r2
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	4413      	add	r3, r2
 8000bea:	3b41      	subs	r3, #65	; 0x41
 8000bec:	fa00 f203 	lsl.w	r2, r0, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b09      	cmp	r3, #9
 8000bfe:	d91c      	bls.n	8000c3a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	68d9      	ldr	r1, [r3, #12]
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	4413      	add	r3, r2
 8000c10:	3b1e      	subs	r3, #30
 8000c12:	2207      	movs	r2, #7
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	4019      	ands	r1, r3
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	6898      	ldr	r0, [r3, #8]
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4613      	mov	r3, r2
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	4413      	add	r3, r2
 8000c2a:	3b1e      	subs	r3, #30
 8000c2c:	fa00 f203 	lsl.w	r2, r0, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	430a      	orrs	r2, r1
 8000c36:	60da      	str	r2, [r3, #12]
 8000c38:	e019      	b.n	8000c6e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	6919      	ldr	r1, [r3, #16]
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4613      	mov	r3, r2
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	4413      	add	r3, r2
 8000c4a:	2207      	movs	r2, #7
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	4019      	ands	r1, r3
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	6898      	ldr	r0, [r3, #8]
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	4413      	add	r3, r2
 8000c62:	fa00 f203 	lsl.w	r2, r0, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2b10      	cmp	r3, #16
 8000c74:	d003      	beq.n	8000c7e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000c7a:	2b11      	cmp	r3, #17
 8000c7c:	d132      	bne.n	8000ce4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a1d      	ldr	r2, [pc, #116]	; (8000cf8 <HAL_ADC_ConfigChannel+0x1e4>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d125      	bne.n	8000cd4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d126      	bne.n	8000ce4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	689a      	ldr	r2, [r3, #8]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000ca4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2b10      	cmp	r3, #16
 8000cac:	d11a      	bne.n	8000ce4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000cae:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <HAL_ADC_ConfigChannel+0x1e8>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a13      	ldr	r2, [pc, #76]	; (8000d00 <HAL_ADC_ConfigChannel+0x1ec>)
 8000cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb8:	0c9a      	lsrs	r2, r3, #18
 8000cba:	4613      	mov	r3, r2
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	4413      	add	r3, r2
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000cc4:	e002      	b.n	8000ccc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d1f9      	bne.n	8000cc6 <HAL_ADC_ConfigChannel+0x1b2>
 8000cd2:	e007      	b.n	8000ce4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd8:	f043 0220 	orr.w	r2, r3, #32
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	40012400 	.word	0x40012400
 8000cfc:	20000000 	.word	0x20000000
 8000d00:	431bde83 	.word	0x431bde83

08000d04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d039      	beq.n	8000d96 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f042 0201 	orr.w	r2, r2, #1
 8000d30:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000d32:	4b1b      	ldr	r3, [pc, #108]	; (8000da0 <ADC_Enable+0x9c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a1b      	ldr	r2, [pc, #108]	; (8000da4 <ADC_Enable+0xa0>)
 8000d38:	fba2 2303 	umull	r2, r3, r2, r3
 8000d3c:	0c9b      	lsrs	r3, r3, #18
 8000d3e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000d40:	e002      	b.n	8000d48 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d1f9      	bne.n	8000d42 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000d4e:	f7ff fceb 	bl	8000728 <HAL_GetTick>
 8000d52:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000d54:	e018      	b.n	8000d88 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000d56:	f7ff fce7 	bl	8000728 <HAL_GetTick>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d911      	bls.n	8000d88 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d68:	f043 0210 	orr.w	r2, r3, #16
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d74:	f043 0201 	orr.w	r2, r3, #1
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	e007      	b.n	8000d98 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d1df      	bne.n	8000d56 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000d96:	2300      	movs	r3, #0
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000000 	.word	0x20000000
 8000da4:	431bde83 	.word	0x431bde83

08000da8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d127      	bne.n	8000e12 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	689a      	ldr	r2, [r3, #8]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f022 0201 	bic.w	r2, r2, #1
 8000dd0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000dd2:	f7ff fca9 	bl	8000728 <HAL_GetTick>
 8000dd6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000dd8:	e014      	b.n	8000e04 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000dda:	f7ff fca5 	bl	8000728 <HAL_GetTick>
 8000dde:	4602      	mov	r2, r0
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d90d      	bls.n	8000e04 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dec:	f043 0210 	orr.w	r2, r3, #16
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df8:	f043 0201 	orr.w	r2, r3, #1
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	e007      	b.n	8000e14 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d0e3      	beq.n	8000dda <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000e12:	2300      	movs	r3, #0
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e28:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e2e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d127      	bne.n	8000e86 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000e4c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e50:	d115      	bne.n	8000e7e <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d111      	bne.n	8000e7e <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d105      	bne.n	8000e7e <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e76:	f043 0201 	orr.w	r2, r3, #1
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000e7e:	68f8      	ldr	r0, [r7, #12]
 8000e80:	f7ff f96c 	bl	800015c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000e84:	e004      	b.n	8000e90 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	6a1b      	ldr	r3, [r3, #32]
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	4798      	blx	r3
}
 8000e90:	bf00      	nop
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000ea6:	68f8      	ldr	r0, [r7, #12]
 8000ea8:	f7ff fe22 	bl	8000af0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000eac:	bf00      	nop
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec0:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed2:	f043 0204 	orr.w	r2, r3, #4
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000eda:	68f8      	ldr	r0, [r7, #12]
 8000edc:	f7ff fe11 	bl	8000b02 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000ee0:	bf00      	nop
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f04:	4013      	ands	r3, r2
 8000f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1a:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	60d3      	str	r3, [r2, #12]
}
 8000f20:	bf00      	nop
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <__NVIC_GetPriorityGrouping+0x18>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	0a1b      	lsrs	r3, r3, #8
 8000f3a:	f003 0307 	and.w	r3, r3, #7
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	db0b      	blt.n	8000f76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	f003 021f 	and.w	r2, r3, #31
 8000f64:	4906      	ldr	r1, [pc, #24]	; (8000f80 <__NVIC_EnableIRQ+0x34>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	095b      	lsrs	r3, r3, #5
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	e000e100 	.word	0xe000e100

08000f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	db0a      	blt.n	8000fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	490c      	ldr	r1, [pc, #48]	; (8000fd0 <__NVIC_SetPriority+0x4c>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	0112      	lsls	r2, r2, #4
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fac:	e00a      	b.n	8000fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4908      	ldr	r1, [pc, #32]	; (8000fd4 <__NVIC_SetPriority+0x50>)
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	f003 030f 	and.w	r3, r3, #15
 8000fba:	3b04      	subs	r3, #4
 8000fbc:	0112      	lsls	r2, r2, #4
 8000fbe:	b2d2      	uxtb	r2, r2
 8000fc0:	440b      	add	r3, r1
 8000fc2:	761a      	strb	r2, [r3, #24]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000e100 	.word	0xe000e100
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b089      	sub	sp, #36	; 0x24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f1c3 0307 	rsb	r3, r3, #7
 8000ff2:	2b04      	cmp	r3, #4
 8000ff4:	bf28      	it	cs
 8000ff6:	2304      	movcs	r3, #4
 8000ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	2b06      	cmp	r3, #6
 8001000:	d902      	bls.n	8001008 <NVIC_EncodePriority+0x30>
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3b03      	subs	r3, #3
 8001006:	e000      	b.n	800100a <NVIC_EncodePriority+0x32>
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43da      	mvns	r2, r3
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	401a      	ands	r2, r3
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001020:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	43d9      	mvns	r1, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	4313      	orrs	r3, r2
         );
}
 8001032:	4618      	mov	r0, r3
 8001034:	3724      	adds	r7, #36	; 0x24
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3b01      	subs	r3, #1
 8001048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800104c:	d301      	bcc.n	8001052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104e:	2301      	movs	r3, #1
 8001050:	e00f      	b.n	8001072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001052:	4a0a      	ldr	r2, [pc, #40]	; (800107c <SysTick_Config+0x40>)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800105a:	210f      	movs	r1, #15
 800105c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001060:	f7ff ff90 	bl	8000f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <SysTick_Config+0x40>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106a:	4b04      	ldr	r3, [pc, #16]	; (800107c <SysTick_Config+0x40>)
 800106c:	2207      	movs	r2, #7
 800106e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	e000e010 	.word	0xe000e010

08001080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ff2d 	bl	8000ee8 <__NVIC_SetPriorityGrouping>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001096:	b580      	push	{r7, lr}
 8001098:	b086      	sub	sp, #24
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	607a      	str	r2, [r7, #4]
 80010a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a8:	f7ff ff42 	bl	8000f30 <__NVIC_GetPriorityGrouping>
 80010ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	68b9      	ldr	r1, [r7, #8]
 80010b2:	6978      	ldr	r0, [r7, #20]
 80010b4:	f7ff ff90 	bl	8000fd8 <NVIC_EncodePriority>
 80010b8:	4602      	mov	r2, r0
 80010ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff5f 	bl	8000f84 <__NVIC_SetPriority>
}
 80010c6:	bf00      	nop
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff35 	bl	8000f4c <__NVIC_EnableIRQ>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ffa2 	bl	800103c <SysTick_Config>
 80010f8:	4603      	mov	r3, r0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800110c:	2300      	movs	r3, #0
 800110e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d101      	bne.n	800111a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e043      	b.n	80011a2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	461a      	mov	r2, r3
 8001120:	4b22      	ldr	r3, [pc, #136]	; (80011ac <HAL_DMA_Init+0xa8>)
 8001122:	4413      	add	r3, r2
 8001124:	4a22      	ldr	r2, [pc, #136]	; (80011b0 <HAL_DMA_Init+0xac>)
 8001126:	fba2 2303 	umull	r2, r3, r2, r3
 800112a:	091b      	lsrs	r3, r3, #4
 800112c:	009a      	lsls	r2, r3, #2
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a1f      	ldr	r2, [pc, #124]	; (80011b4 <HAL_DMA_Init+0xb0>)
 8001136:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2202      	movs	r2, #2
 800113c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800114e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001152:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800115c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001168:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001174:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	4313      	orrs	r3, r2
 8001180:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2201      	movs	r2, #1
 8001194:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	bffdfff8 	.word	0xbffdfff8
 80011b0:	cccccccd 	.word	0xcccccccd
 80011b4:	40020000 	.word	0x40020000

080011b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
 80011c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d101      	bne.n	80011d8 <HAL_DMA_Start_IT+0x20>
 80011d4:	2302      	movs	r3, #2
 80011d6:	e04a      	b.n	800126e <HAL_DMA_Start_IT+0xb6>
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2201      	movs	r2, #1
 80011dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d13a      	bne.n	8001260 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2202      	movs	r2, #2
 80011ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2200      	movs	r2, #0
 80011f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f022 0201 	bic.w	r2, r2, #1
 8001206:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	68b9      	ldr	r1, [r7, #8]
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	f000 f938 	bl	8001484 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001218:	2b00      	cmp	r3, #0
 800121a:	d008      	beq.n	800122e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f042 020e 	orr.w	r2, r2, #14
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	e00f      	b.n	800124e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f022 0204 	bic.w	r2, r2, #4
 800123c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f042 020a 	orr.w	r2, r2, #10
 800124c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f042 0201 	orr.w	r2, r2, #1
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	e005      	b.n	800126c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2200      	movs	r2, #0
 8001264:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001268:	2302      	movs	r3, #2
 800126a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800126c:	7dfb      	ldrb	r3, [r7, #23]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	2204      	movs	r2, #4
 8001296:	409a      	lsls	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4013      	ands	r3, r2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d04f      	beq.n	8001340 <HAL_DMA_IRQHandler+0xc8>
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	f003 0304 	and.w	r3, r3, #4
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d04a      	beq.n	8001340 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0320 	and.w	r3, r3, #32
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d107      	bne.n	80012c8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f022 0204 	bic.w	r2, r2, #4
 80012c6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a66      	ldr	r2, [pc, #408]	; (8001468 <HAL_DMA_IRQHandler+0x1f0>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d029      	beq.n	8001326 <HAL_DMA_IRQHandler+0xae>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a65      	ldr	r2, [pc, #404]	; (800146c <HAL_DMA_IRQHandler+0x1f4>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d022      	beq.n	8001322 <HAL_DMA_IRQHandler+0xaa>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a63      	ldr	r2, [pc, #396]	; (8001470 <HAL_DMA_IRQHandler+0x1f8>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d01a      	beq.n	800131c <HAL_DMA_IRQHandler+0xa4>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a62      	ldr	r2, [pc, #392]	; (8001474 <HAL_DMA_IRQHandler+0x1fc>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d012      	beq.n	8001316 <HAL_DMA_IRQHandler+0x9e>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a60      	ldr	r2, [pc, #384]	; (8001478 <HAL_DMA_IRQHandler+0x200>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d00a      	beq.n	8001310 <HAL_DMA_IRQHandler+0x98>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a5f      	ldr	r2, [pc, #380]	; (800147c <HAL_DMA_IRQHandler+0x204>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d102      	bne.n	800130a <HAL_DMA_IRQHandler+0x92>
 8001304:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001308:	e00e      	b.n	8001328 <HAL_DMA_IRQHandler+0xb0>
 800130a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800130e:	e00b      	b.n	8001328 <HAL_DMA_IRQHandler+0xb0>
 8001310:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001314:	e008      	b.n	8001328 <HAL_DMA_IRQHandler+0xb0>
 8001316:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800131a:	e005      	b.n	8001328 <HAL_DMA_IRQHandler+0xb0>
 800131c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001320:	e002      	b.n	8001328 <HAL_DMA_IRQHandler+0xb0>
 8001322:	2340      	movs	r3, #64	; 0x40
 8001324:	e000      	b.n	8001328 <HAL_DMA_IRQHandler+0xb0>
 8001326:	2304      	movs	r3, #4
 8001328:	4a55      	ldr	r2, [pc, #340]	; (8001480 <HAL_DMA_IRQHandler+0x208>)
 800132a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001330:	2b00      	cmp	r3, #0
 8001332:	f000 8094 	beq.w	800145e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800133e:	e08e      	b.n	800145e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001344:	2202      	movs	r2, #2
 8001346:	409a      	lsls	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4013      	ands	r3, r2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d056      	beq.n	80013fe <HAL_DMA_IRQHandler+0x186>
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d051      	beq.n	80013fe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0320 	and.w	r3, r3, #32
 8001364:	2b00      	cmp	r3, #0
 8001366:	d10b      	bne.n	8001380 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f022 020a 	bic.w	r2, r2, #10
 8001376:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2201      	movs	r2, #1
 800137c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a38      	ldr	r2, [pc, #224]	; (8001468 <HAL_DMA_IRQHandler+0x1f0>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d029      	beq.n	80013de <HAL_DMA_IRQHandler+0x166>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a37      	ldr	r2, [pc, #220]	; (800146c <HAL_DMA_IRQHandler+0x1f4>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d022      	beq.n	80013da <HAL_DMA_IRQHandler+0x162>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a35      	ldr	r2, [pc, #212]	; (8001470 <HAL_DMA_IRQHandler+0x1f8>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d01a      	beq.n	80013d4 <HAL_DMA_IRQHandler+0x15c>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a34      	ldr	r2, [pc, #208]	; (8001474 <HAL_DMA_IRQHandler+0x1fc>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d012      	beq.n	80013ce <HAL_DMA_IRQHandler+0x156>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a32      	ldr	r2, [pc, #200]	; (8001478 <HAL_DMA_IRQHandler+0x200>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d00a      	beq.n	80013c8 <HAL_DMA_IRQHandler+0x150>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a31      	ldr	r2, [pc, #196]	; (800147c <HAL_DMA_IRQHandler+0x204>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d102      	bne.n	80013c2 <HAL_DMA_IRQHandler+0x14a>
 80013bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013c0:	e00e      	b.n	80013e0 <HAL_DMA_IRQHandler+0x168>
 80013c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013c6:	e00b      	b.n	80013e0 <HAL_DMA_IRQHandler+0x168>
 80013c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013cc:	e008      	b.n	80013e0 <HAL_DMA_IRQHandler+0x168>
 80013ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013d2:	e005      	b.n	80013e0 <HAL_DMA_IRQHandler+0x168>
 80013d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013d8:	e002      	b.n	80013e0 <HAL_DMA_IRQHandler+0x168>
 80013da:	2320      	movs	r3, #32
 80013dc:	e000      	b.n	80013e0 <HAL_DMA_IRQHandler+0x168>
 80013de:	2302      	movs	r3, #2
 80013e0:	4a27      	ldr	r2, [pc, #156]	; (8001480 <HAL_DMA_IRQHandler+0x208>)
 80013e2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d034      	beq.n	800145e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80013fc:	e02f      	b.n	800145e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	2208      	movs	r2, #8
 8001404:	409a      	lsls	r2, r3
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4013      	ands	r3, r2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d028      	beq.n	8001460 <HAL_DMA_IRQHandler+0x1e8>
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	f003 0308 	and.w	r3, r3, #8
 8001414:	2b00      	cmp	r3, #0
 8001416:	d023      	beq.n	8001460 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f022 020e 	bic.w	r2, r2, #14
 8001426:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001430:	2101      	movs	r1, #1
 8001432:	fa01 f202 	lsl.w	r2, r1, r2
 8001436:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2201      	movs	r2, #1
 800143c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2201      	movs	r2, #1
 8001442:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	2b00      	cmp	r3, #0
 8001454:	d004      	beq.n	8001460 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	4798      	blx	r3
    }
  }
  return;
 800145e:	bf00      	nop
 8001460:	bf00      	nop
}
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40020008 	.word	0x40020008
 800146c:	4002001c 	.word	0x4002001c
 8001470:	40020030 	.word	0x40020030
 8001474:	40020044 	.word	0x40020044
 8001478:	40020058 	.word	0x40020058
 800147c:	4002006c 	.word	0x4002006c
 8001480:	40020000 	.word	0x40020000

08001484 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
 8001490:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800149a:	2101      	movs	r1, #1
 800149c:	fa01 f202 	lsl.w	r2, r1, r2
 80014a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b10      	cmp	r3, #16
 80014b0:	d108      	bne.n	80014c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80014c2:	e007      	b.n	80014d4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68ba      	ldr	r2, [r7, #8]
 80014ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	60da      	str	r2, [r3, #12]
}
 80014d4:	bf00      	nop
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr
	...

080014e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b08b      	sub	sp, #44	; 0x2c
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ea:	2300      	movs	r3, #0
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014ee:	2300      	movs	r3, #0
 80014f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f2:	e169      	b.n	80017c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014f4:	2201      	movs	r2, #1
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	69fa      	ldr	r2, [r7, #28]
 8001504:	4013      	ands	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	429a      	cmp	r2, r3
 800150e:	f040 8158 	bne.w	80017c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	4a9a      	ldr	r2, [pc, #616]	; (8001780 <HAL_GPIO_Init+0x2a0>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d05e      	beq.n	80015da <HAL_GPIO_Init+0xfa>
 800151c:	4a98      	ldr	r2, [pc, #608]	; (8001780 <HAL_GPIO_Init+0x2a0>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d875      	bhi.n	800160e <HAL_GPIO_Init+0x12e>
 8001522:	4a98      	ldr	r2, [pc, #608]	; (8001784 <HAL_GPIO_Init+0x2a4>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d058      	beq.n	80015da <HAL_GPIO_Init+0xfa>
 8001528:	4a96      	ldr	r2, [pc, #600]	; (8001784 <HAL_GPIO_Init+0x2a4>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d86f      	bhi.n	800160e <HAL_GPIO_Init+0x12e>
 800152e:	4a96      	ldr	r2, [pc, #600]	; (8001788 <HAL_GPIO_Init+0x2a8>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d052      	beq.n	80015da <HAL_GPIO_Init+0xfa>
 8001534:	4a94      	ldr	r2, [pc, #592]	; (8001788 <HAL_GPIO_Init+0x2a8>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d869      	bhi.n	800160e <HAL_GPIO_Init+0x12e>
 800153a:	4a94      	ldr	r2, [pc, #592]	; (800178c <HAL_GPIO_Init+0x2ac>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d04c      	beq.n	80015da <HAL_GPIO_Init+0xfa>
 8001540:	4a92      	ldr	r2, [pc, #584]	; (800178c <HAL_GPIO_Init+0x2ac>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d863      	bhi.n	800160e <HAL_GPIO_Init+0x12e>
 8001546:	4a92      	ldr	r2, [pc, #584]	; (8001790 <HAL_GPIO_Init+0x2b0>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d046      	beq.n	80015da <HAL_GPIO_Init+0xfa>
 800154c:	4a90      	ldr	r2, [pc, #576]	; (8001790 <HAL_GPIO_Init+0x2b0>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d85d      	bhi.n	800160e <HAL_GPIO_Init+0x12e>
 8001552:	2b12      	cmp	r3, #18
 8001554:	d82a      	bhi.n	80015ac <HAL_GPIO_Init+0xcc>
 8001556:	2b12      	cmp	r3, #18
 8001558:	d859      	bhi.n	800160e <HAL_GPIO_Init+0x12e>
 800155a:	a201      	add	r2, pc, #4	; (adr r2, 8001560 <HAL_GPIO_Init+0x80>)
 800155c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001560:	080015db 	.word	0x080015db
 8001564:	080015b5 	.word	0x080015b5
 8001568:	080015c7 	.word	0x080015c7
 800156c:	08001609 	.word	0x08001609
 8001570:	0800160f 	.word	0x0800160f
 8001574:	0800160f 	.word	0x0800160f
 8001578:	0800160f 	.word	0x0800160f
 800157c:	0800160f 	.word	0x0800160f
 8001580:	0800160f 	.word	0x0800160f
 8001584:	0800160f 	.word	0x0800160f
 8001588:	0800160f 	.word	0x0800160f
 800158c:	0800160f 	.word	0x0800160f
 8001590:	0800160f 	.word	0x0800160f
 8001594:	0800160f 	.word	0x0800160f
 8001598:	0800160f 	.word	0x0800160f
 800159c:	0800160f 	.word	0x0800160f
 80015a0:	0800160f 	.word	0x0800160f
 80015a4:	080015bd 	.word	0x080015bd
 80015a8:	080015d1 	.word	0x080015d1
 80015ac:	4a79      	ldr	r2, [pc, #484]	; (8001794 <HAL_GPIO_Init+0x2b4>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d013      	beq.n	80015da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015b2:	e02c      	b.n	800160e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	623b      	str	r3, [r7, #32]
          break;
 80015ba:	e029      	b.n	8001610 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	3304      	adds	r3, #4
 80015c2:	623b      	str	r3, [r7, #32]
          break;
 80015c4:	e024      	b.n	8001610 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	3308      	adds	r3, #8
 80015cc:	623b      	str	r3, [r7, #32]
          break;
 80015ce:	e01f      	b.n	8001610 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	330c      	adds	r3, #12
 80015d6:	623b      	str	r3, [r7, #32]
          break;
 80015d8:	e01a      	b.n	8001610 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d102      	bne.n	80015e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015e2:	2304      	movs	r3, #4
 80015e4:	623b      	str	r3, [r7, #32]
          break;
 80015e6:	e013      	b.n	8001610 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d105      	bne.n	80015fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015f0:	2308      	movs	r3, #8
 80015f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69fa      	ldr	r2, [r7, #28]
 80015f8:	611a      	str	r2, [r3, #16]
          break;
 80015fa:	e009      	b.n	8001610 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015fc:	2308      	movs	r3, #8
 80015fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	69fa      	ldr	r2, [r7, #28]
 8001604:	615a      	str	r2, [r3, #20]
          break;
 8001606:	e003      	b.n	8001610 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001608:	2300      	movs	r3, #0
 800160a:	623b      	str	r3, [r7, #32]
          break;
 800160c:	e000      	b.n	8001610 <HAL_GPIO_Init+0x130>
          break;
 800160e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	2bff      	cmp	r3, #255	; 0xff
 8001614:	d801      	bhi.n	800161a <HAL_GPIO_Init+0x13a>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	e001      	b.n	800161e <HAL_GPIO_Init+0x13e>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3304      	adds	r3, #4
 800161e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	2bff      	cmp	r3, #255	; 0xff
 8001624:	d802      	bhi.n	800162c <HAL_GPIO_Init+0x14c>
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	e002      	b.n	8001632 <HAL_GPIO_Init+0x152>
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	3b08      	subs	r3, #8
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	210f      	movs	r1, #15
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	fa01 f303 	lsl.w	r3, r1, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	401a      	ands	r2, r3
 8001644:	6a39      	ldr	r1, [r7, #32]
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	fa01 f303 	lsl.w	r3, r1, r3
 800164c:	431a      	orrs	r2, r3
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	f000 80b1 	beq.w	80017c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001660:	4b4d      	ldr	r3, [pc, #308]	; (8001798 <HAL_GPIO_Init+0x2b8>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	4a4c      	ldr	r2, [pc, #304]	; (8001798 <HAL_GPIO_Init+0x2b8>)
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	6193      	str	r3, [r2, #24]
 800166c:	4b4a      	ldr	r3, [pc, #296]	; (8001798 <HAL_GPIO_Init+0x2b8>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001678:	4a48      	ldr	r2, [pc, #288]	; (800179c <HAL_GPIO_Init+0x2bc>)
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	089b      	lsrs	r3, r3, #2
 800167e:	3302      	adds	r3, #2
 8001680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001684:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	220f      	movs	r2, #15
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43db      	mvns	r3, r3
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	4013      	ands	r3, r2
 800169a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a40      	ldr	r2, [pc, #256]	; (80017a0 <HAL_GPIO_Init+0x2c0>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d013      	beq.n	80016cc <HAL_GPIO_Init+0x1ec>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a3f      	ldr	r2, [pc, #252]	; (80017a4 <HAL_GPIO_Init+0x2c4>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d00d      	beq.n	80016c8 <HAL_GPIO_Init+0x1e8>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a3e      	ldr	r2, [pc, #248]	; (80017a8 <HAL_GPIO_Init+0x2c8>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d007      	beq.n	80016c4 <HAL_GPIO_Init+0x1e4>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a3d      	ldr	r2, [pc, #244]	; (80017ac <HAL_GPIO_Init+0x2cc>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d101      	bne.n	80016c0 <HAL_GPIO_Init+0x1e0>
 80016bc:	2303      	movs	r3, #3
 80016be:	e006      	b.n	80016ce <HAL_GPIO_Init+0x1ee>
 80016c0:	2304      	movs	r3, #4
 80016c2:	e004      	b.n	80016ce <HAL_GPIO_Init+0x1ee>
 80016c4:	2302      	movs	r3, #2
 80016c6:	e002      	b.n	80016ce <HAL_GPIO_Init+0x1ee>
 80016c8:	2301      	movs	r3, #1
 80016ca:	e000      	b.n	80016ce <HAL_GPIO_Init+0x1ee>
 80016cc:	2300      	movs	r3, #0
 80016ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016d0:	f002 0203 	and.w	r2, r2, #3
 80016d4:	0092      	lsls	r2, r2, #2
 80016d6:	4093      	lsls	r3, r2
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	4313      	orrs	r3, r2
 80016dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016de:	492f      	ldr	r1, [pc, #188]	; (800179c <HAL_GPIO_Init+0x2bc>)
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	089b      	lsrs	r3, r3, #2
 80016e4:	3302      	adds	r3, #2
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d006      	beq.n	8001706 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016f8:	4b2d      	ldr	r3, [pc, #180]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	492c      	ldr	r1, [pc, #176]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	4313      	orrs	r3, r2
 8001702:	600b      	str	r3, [r1, #0]
 8001704:	e006      	b.n	8001714 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001706:	4b2a      	ldr	r3, [pc, #168]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	43db      	mvns	r3, r3
 800170e:	4928      	ldr	r1, [pc, #160]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 8001710:	4013      	ands	r3, r2
 8001712:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d006      	beq.n	800172e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001720:	4b23      	ldr	r3, [pc, #140]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	4922      	ldr	r1, [pc, #136]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	4313      	orrs	r3, r2
 800172a:	604b      	str	r3, [r1, #4]
 800172c:	e006      	b.n	800173c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800172e:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	43db      	mvns	r3, r3
 8001736:	491e      	ldr	r1, [pc, #120]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 8001738:	4013      	ands	r3, r2
 800173a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d006      	beq.n	8001756 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001748:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	4918      	ldr	r1, [pc, #96]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	4313      	orrs	r3, r2
 8001752:	608b      	str	r3, [r1, #8]
 8001754:	e006      	b.n	8001764 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001756:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	43db      	mvns	r3, r3
 800175e:	4914      	ldr	r1, [pc, #80]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 8001760:	4013      	ands	r3, r2
 8001762:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d021      	beq.n	80017b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 8001772:	68da      	ldr	r2, [r3, #12]
 8001774:	490e      	ldr	r1, [pc, #56]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	4313      	orrs	r3, r2
 800177a:	60cb      	str	r3, [r1, #12]
 800177c:	e021      	b.n	80017c2 <HAL_GPIO_Init+0x2e2>
 800177e:	bf00      	nop
 8001780:	10320000 	.word	0x10320000
 8001784:	10310000 	.word	0x10310000
 8001788:	10220000 	.word	0x10220000
 800178c:	10210000 	.word	0x10210000
 8001790:	10120000 	.word	0x10120000
 8001794:	10110000 	.word	0x10110000
 8001798:	40021000 	.word	0x40021000
 800179c:	40010000 	.word	0x40010000
 80017a0:	40010800 	.word	0x40010800
 80017a4:	40010c00 	.word	0x40010c00
 80017a8:	40011000 	.word	0x40011000
 80017ac:	40011400 	.word	0x40011400
 80017b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <HAL_GPIO_Init+0x304>)
 80017b6:	68da      	ldr	r2, [r3, #12]
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	43db      	mvns	r3, r3
 80017bc:	4909      	ldr	r1, [pc, #36]	; (80017e4 <HAL_GPIO_Init+0x304>)
 80017be:	4013      	ands	r3, r2
 80017c0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	3301      	adds	r3, #1
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	fa22 f303 	lsr.w	r3, r2, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f47f ae8e 	bne.w	80014f4 <HAL_GPIO_Init+0x14>
  }
}
 80017d8:	bf00      	nop
 80017da:	bf00      	nop
 80017dc:	372c      	adds	r7, #44	; 0x2c
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	40010400 	.word	0x40010400

080017e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ea:	b08b      	sub	sp, #44	; 0x2c
 80017ec:	af06      	add	r7, sp, #24
 80017ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e0fd      	b.n	80019f6 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d106      	bne.n	8001814 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f005 fe30 	bl	8007474 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2203      	movs	r2, #3
 8001818:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f002 f837 	bl	8003894 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	687e      	ldr	r6, [r7, #4]
 800182e:	466d      	mov	r5, sp
 8001830:	f106 0410 	add.w	r4, r6, #16
 8001834:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001836:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001838:	6823      	ldr	r3, [r4, #0]
 800183a:	602b      	str	r3, [r5, #0]
 800183c:	1d33      	adds	r3, r6, #4
 800183e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001840:	6838      	ldr	r0, [r7, #0]
 8001842:	f002 f801 	bl	8003848 <USB_CoreInit>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d005      	beq.n	8001858 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2202      	movs	r2, #2
 8001850:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e0ce      	b.n	80019f6 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2100      	movs	r1, #0
 800185e:	4618      	mov	r0, r3
 8001860:	f002 f832 	bl	80038c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001864:	2300      	movs	r3, #0
 8001866:	73fb      	strb	r3, [r7, #15]
 8001868:	e04c      	b.n	8001904 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	1c5a      	adds	r2, r3, #1
 8001870:	4613      	mov	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	440b      	add	r3, r1
 800187a:	3301      	adds	r3, #1
 800187c:	2201      	movs	r2, #1
 800187e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	1c5a      	adds	r2, r3, #1
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	440b      	add	r3, r1
 8001890:	7bfa      	ldrb	r2, [r7, #15]
 8001892:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001894:	7bfa      	ldrb	r2, [r7, #15]
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	b298      	uxth	r0, r3
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	440b      	add	r3, r1
 80018a6:	3336      	adds	r3, #54	; 0x36
 80018a8:	4602      	mov	r2, r0
 80018aa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	1c5a      	adds	r2, r3, #1
 80018b2:	4613      	mov	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4413      	add	r3, r2
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	440b      	add	r3, r1
 80018bc:	3303      	adds	r3, #3
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018c2:	7bfa      	ldrb	r2, [r7, #15]
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	4613      	mov	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	440b      	add	r3, r1
 80018d0:	3338      	adds	r3, #56	; 0x38
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018d6:	7bfa      	ldrb	r2, [r7, #15]
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	4613      	mov	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	440b      	add	r3, r1
 80018e4:	333c      	adds	r3, #60	; 0x3c
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018ea:	7bfa      	ldrb	r2, [r7, #15]
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	440b      	add	r3, r1
 80018f8:	3340      	adds	r3, #64	; 0x40
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
 8001900:	3301      	adds	r3, #1
 8001902:	73fb      	strb	r3, [r7, #15]
 8001904:	7bfa      	ldrb	r2, [r7, #15]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	429a      	cmp	r2, r3
 800190c:	d3ad      	bcc.n	800186a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800190e:	2300      	movs	r3, #0
 8001910:	73fb      	strb	r3, [r7, #15]
 8001912:	e044      	b.n	800199e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001914:	7bfa      	ldrb	r2, [r7, #15]
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	440b      	add	r3, r1
 8001922:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800192a:	7bfa      	ldrb	r2, [r7, #15]
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	440b      	add	r3, r1
 8001938:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800193c:	7bfa      	ldrb	r2, [r7, #15]
 800193e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001940:	7bfa      	ldrb	r2, [r7, #15]
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	440b      	add	r3, r1
 800194e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001956:	7bfa      	ldrb	r2, [r7, #15]
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	440b      	add	r3, r1
 8001964:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800196c:	7bfa      	ldrb	r2, [r7, #15]
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	4613      	mov	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	440b      	add	r3, r1
 800197a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001982:	7bfa      	ldrb	r2, [r7, #15]
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	440b      	add	r3, r1
 8001990:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001998:	7bfb      	ldrb	r3, [r7, #15]
 800199a:	3301      	adds	r3, #1
 800199c:	73fb      	strb	r3, [r7, #15]
 800199e:	7bfa      	ldrb	r2, [r7, #15]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d3b5      	bcc.n	8001914 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	603b      	str	r3, [r7, #0]
 80019ae:	687e      	ldr	r6, [r7, #4]
 80019b0:	466d      	mov	r5, sp
 80019b2:	f106 0410 	add.w	r4, r6, #16
 80019b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ba:	6823      	ldr	r3, [r4, #0]
 80019bc:	602b      	str	r3, [r5, #0]
 80019be:	1d33      	adds	r3, r6, #4
 80019c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019c2:	6838      	ldr	r0, [r7, #0]
 80019c4:	f001 ff8c 	bl	80038e0 <USB_DevInit>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d005      	beq.n	80019da <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2202      	movs	r2, #2
 80019d2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00d      	b.n	80019f6 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f003 ff26 	bl	8005840 <USB_DevDisconnect>

  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019fe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d101      	bne.n	8001a14 <HAL_PCD_Start+0x16>
 8001a10:	2302      	movs	r3, #2
 8001a12:	e016      	b.n	8001a42 <HAL_PCD_Start+0x44>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f001 ff21 	bl	8003868 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001a26:	2101      	movs	r1, #1
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f005 ff96 	bl	800795a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f003 fefa 	bl	800582c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b088      	sub	sp, #32
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f003 fefc 	bl	8005854 <USB_ReadInterrupts>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a66:	d102      	bne.n	8001a6e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 fb61 	bl	8002130 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f003 feee 	bl	8005854 <USB_ReadInterrupts>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a82:	d112      	bne.n	8001aaa <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a96:	b292      	uxth	r2, r2
 8001a98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f005 fd64 	bl	800756a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f925 	bl	8001cf4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f003 fed0 	bl	8005854 <USB_ReadInterrupts>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001abe:	d10b      	bne.n	8001ad8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ad2:	b292      	uxth	r2, r2
 8001ad4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f003 feb9 	bl	8005854 <USB_ReadInterrupts>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aec:	d10b      	bne.n	8001b06 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b00:	b292      	uxth	r2, r2
 8001b02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f003 fea2 	bl	8005854 <USB_ReadInterrupts>
 8001b10:	4603      	mov	r3, r0
 8001b12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b1a:	d126      	bne.n	8001b6a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0204 	bic.w	r2, r2, #4
 8001b2e:	b292      	uxth	r2, r2
 8001b30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0208 	bic.w	r2, r2, #8
 8001b46:	b292      	uxth	r2, r2
 8001b48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f005 fd45 	bl	80075dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b64:	b292      	uxth	r2, r2
 8001b66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f003 fe70 	bl	8005854 <USB_ReadInterrupts>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b7e:	f040 8084 	bne.w	8001c8a <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001b82:	2300      	movs	r3, #0
 8001b84:	77fb      	strb	r3, [r7, #31]
 8001b86:	e011      	b.n	8001bac <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	7ffb      	ldrb	r3, [r7, #31]
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	441a      	add	r2, r3
 8001b94:	7ffb      	ldrb	r3, [r7, #31]
 8001b96:	8812      	ldrh	r2, [r2, #0]
 8001b98:	b292      	uxth	r2, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	f107 0120 	add.w	r1, r7, #32
 8001ba0:	440b      	add	r3, r1
 8001ba2:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001ba6:	7ffb      	ldrb	r3, [r7, #31]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	77fb      	strb	r3, [r7, #31]
 8001bac:	7ffb      	ldrb	r3, [r7, #31]
 8001bae:	2b07      	cmp	r3, #7
 8001bb0:	d9ea      	bls.n	8001b88 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f042 0201 	orr.w	r2, r2, #1
 8001bc4:	b292      	uxth	r2, r2
 8001bc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 0201 	bic.w	r2, r2, #1
 8001bdc:	b292      	uxth	r2, r2
 8001bde:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001be2:	bf00      	nop
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0f6      	beq.n	8001be4 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c08:	b292      	uxth	r2, r2
 8001c0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001c0e:	2300      	movs	r3, #0
 8001c10:	77fb      	strb	r3, [r7, #31]
 8001c12:	e010      	b.n	8001c36 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001c14:	7ffb      	ldrb	r3, [r7, #31]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6812      	ldr	r2, [r2, #0]
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	7ffa      	ldrb	r2, [r7, #31]
 8001c1e:	0092      	lsls	r2, r2, #2
 8001c20:	440a      	add	r2, r1
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	f107 0120 	add.w	r1, r7, #32
 8001c28:	440b      	add	r3, r1
 8001c2a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001c2e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001c30:	7ffb      	ldrb	r3, [r7, #31]
 8001c32:	3301      	adds	r3, #1
 8001c34:	77fb      	strb	r3, [r7, #31]
 8001c36:	7ffb      	ldrb	r3, [r7, #31]
 8001c38:	2b07      	cmp	r3, #7
 8001c3a:	d9eb      	bls.n	8001c14 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0208 	orr.w	r2, r2, #8
 8001c4e:	b292      	uxth	r2, r2
 8001c50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c66:	b292      	uxth	r2, r2
 8001c68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0204 	orr.w	r2, r2, #4
 8001c7e:	b292      	uxth	r2, r2
 8001c80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f005 fc8f 	bl	80075a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f003 fde0 	bl	8005854 <USB_ReadInterrupts>
 8001c94:	4603      	mov	r3, r0
 8001c96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c9e:	d10e      	bne.n	8001cbe <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001cb2:	b292      	uxth	r2, r2
 8001cb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f005 fc48 	bl	800754e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f003 fdc6 	bl	8005854 <USB_ReadInterrupts>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cd2:	d10b      	bne.n	8001cec <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ce6:	b292      	uxth	r2, r2
 8001ce8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001cec:	bf00      	nop
 8001cee:	3720      	adds	r7, #32
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d101      	bne.n	8001d0e <HAL_PCD_SetAddress+0x1a>
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	e013      	b.n	8001d36 <HAL_PCD_SetAddress+0x42>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	78fa      	ldrb	r2, [r7, #3]
 8001d1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	78fa      	ldrb	r2, [r7, #3]
 8001d24:	4611      	mov	r1, r2
 8001d26:	4618      	mov	r0, r3
 8001d28:	f003 fd6d 	bl	8005806 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b084      	sub	sp, #16
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	4608      	mov	r0, r1
 8001d48:	4611      	mov	r1, r2
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	70fb      	strb	r3, [r7, #3]
 8001d50:	460b      	mov	r3, r1
 8001d52:	803b      	strh	r3, [r7, #0]
 8001d54:	4613      	mov	r3, r2
 8001d56:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	da0e      	bge.n	8001d82 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	4413      	add	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	705a      	strb	r2, [r3, #1]
 8001d80:	e00e      	b.n	8001da0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d82:	78fb      	ldrb	r3, [r7, #3]
 8001d84:	f003 0207 	and.w	r2, r3, #7
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	4413      	add	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001da0:	78fb      	ldrb	r3, [r7, #3]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001dac:	883a      	ldrh	r2, [r7, #0]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	78ba      	ldrb	r2, [r7, #2]
 8001db6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	785b      	ldrb	r3, [r3, #1]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d004      	beq.n	8001dca <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001dca:	78bb      	ldrb	r3, [r7, #2]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d102      	bne.n	8001dd6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d101      	bne.n	8001de4 <HAL_PCD_EP_Open+0xa6>
 8001de0:	2302      	movs	r3, #2
 8001de2:	e00e      	b.n	8001e02 <HAL_PCD_EP_Open+0xc4>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68f9      	ldr	r1, [r7, #12]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f001 fd94 	bl	8003920 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001e00:	7afb      	ldrb	r3, [r7, #11]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b084      	sub	sp, #16
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	460b      	mov	r3, r1
 8001e14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	da0e      	bge.n	8001e3c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e1e:	78fb      	ldrb	r3, [r7, #3]
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	1c5a      	adds	r2, r3, #1
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	4413      	add	r3, r2
 8001e32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2201      	movs	r2, #1
 8001e38:	705a      	strb	r2, [r3, #1]
 8001e3a:	e00e      	b.n	8001e5a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e3c:	78fb      	ldrb	r3, [r7, #3]
 8001e3e:	f003 0207 	and.w	r2, r3, #7
 8001e42:	4613      	mov	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	4413      	add	r3, r2
 8001e52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e5a:	78fb      	ldrb	r3, [r7, #3]
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d101      	bne.n	8001e74 <HAL_PCD_EP_Close+0x6a>
 8001e70:	2302      	movs	r3, #2
 8001e72:	e00e      	b.n	8001e92 <HAL_PCD_EP_Close+0x88>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68f9      	ldr	r1, [r7, #12]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f002 f8b6 	bl	8003ff4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b086      	sub	sp, #24
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	60f8      	str	r0, [r7, #12]
 8001ea2:	607a      	str	r2, [r7, #4]
 8001ea4:	603b      	str	r3, [r7, #0]
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eaa:	7afb      	ldrb	r3, [r7, #11]
 8001eac:	f003 0207 	and.w	r2, r3, #7
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eda:	7afb      	ldrb	r3, [r7, #11]
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ee6:	7afb      	ldrb	r3, [r7, #11]
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d106      	bne.n	8001efe <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6979      	ldr	r1, [r7, #20]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f002 fa68 	bl	80043cc <USB_EPStartXfer>
 8001efc:	e005      	b.n	8001f0a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6979      	ldr	r1, [r7, #20]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f002 fa61 	bl	80043cc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	f003 0207 	and.w	r2, r3, #7
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	440b      	add	r3, r1
 8001f32:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001f36:	681b      	ldr	r3, [r3, #0]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr

08001f42 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b086      	sub	sp, #24
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	60f8      	str	r0, [r7, #12]
 8001f4a:	607a      	str	r2, [r7, #4]
 8001f4c:	603b      	str	r3, [r7, #0]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f52:	7afb      	ldrb	r3, [r7, #11]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	4413      	add	r3, r2
 8001f66:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	2200      	movs	r2, #0
 8001f86:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f8e:	7afb      	ldrb	r3, [r7, #11]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f9a:	7afb      	ldrb	r3, [r7, #11]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d106      	bne.n	8001fb2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6979      	ldr	r1, [r7, #20]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f002 fa0e 	bl	80043cc <USB_EPStartXfer>
 8001fb0:	e005      	b.n	8001fbe <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6979      	ldr	r1, [r7, #20]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f002 fa07 	bl	80043cc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	f003 0207 	and.w	r2, r3, #7
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d901      	bls.n	8001fe6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e04c      	b.n	8002080 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fe6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	da0e      	bge.n	800200c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fee:	78fb      	ldrb	r3, [r7, #3]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	1c5a      	adds	r2, r3, #1
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	4413      	add	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2201      	movs	r2, #1
 8002008:	705a      	strb	r2, [r3, #1]
 800200a:	e00c      	b.n	8002026 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800200c:	78fa      	ldrb	r2, [r7, #3]
 800200e:	4613      	mov	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2201      	movs	r2, #1
 800202a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	b2da      	uxtb	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800203e:	2b01      	cmp	r3, #1
 8002040:	d101      	bne.n	8002046 <HAL_PCD_EP_SetStall+0x7e>
 8002042:	2302      	movs	r3, #2
 8002044:	e01c      	b.n	8002080 <HAL_PCD_EP_SetStall+0xb8>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68f9      	ldr	r1, [r7, #12]
 8002054:	4618      	mov	r0, r3
 8002056:	f003 fad9 	bl	800560c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800205a:	78fb      	ldrb	r3, [r7, #3]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	2b00      	cmp	r3, #0
 8002062:	d108      	bne.n	8002076 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800206e:	4619      	mov	r1, r3
 8002070:	4610      	mov	r0, r2
 8002072:	f003 fbfe 	bl	8005872 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	460b      	mov	r3, r1
 8002092:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	f003 020f 	and.w	r2, r3, #15
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d901      	bls.n	80020a6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e040      	b.n	8002128 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	da0e      	bge.n	80020cc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020ae:	78fb      	ldrb	r3, [r7, #3]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	1c5a      	adds	r2, r3, #1
 80020b6:	4613      	mov	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	4413      	add	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2201      	movs	r2, #1
 80020c8:	705a      	strb	r2, [r3, #1]
 80020ca:	e00e      	b.n	80020ea <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020cc:	78fb      	ldrb	r3, [r7, #3]
 80020ce:	f003 0207 	and.w	r2, r3, #7
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002102:	2b01      	cmp	r3, #1
 8002104:	d101      	bne.n	800210a <HAL_PCD_EP_ClrStall+0x82>
 8002106:	2302      	movs	r3, #2
 8002108:	e00e      	b.n	8002128 <HAL_PCD_EP_ClrStall+0xa0>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68f9      	ldr	r1, [r7, #12]
 8002118:	4618      	mov	r0, r3
 800211a:	f003 fac7 	bl	80056ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08e      	sub	sp, #56	; 0x38
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002138:	e2df      	b.n	80026fa <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002142:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002144:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002146:	b2db      	uxtb	r3, r3
 8002148:	f003 030f 	and.w	r3, r3, #15
 800214c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002150:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002154:	2b00      	cmp	r3, #0
 8002156:	f040 8158 	bne.w	800240a <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800215a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800215c:	f003 0310 	and.w	r3, r3, #16
 8002160:	2b00      	cmp	r3, #0
 8002162:	d152      	bne.n	800220a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	b29b      	uxth	r3, r3
 800216c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002174:	81fb      	strh	r3, [r7, #14]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	89fb      	ldrh	r3, [r7, #14]
 800217c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002180:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002184:	b29b      	uxth	r3, r3
 8002186:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3328      	adds	r3, #40	; 0x28
 800218c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002196:	b29b      	uxth	r3, r3
 8002198:	461a      	mov	r2, r3
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4413      	add	r3, r2
 80021a2:	3302      	adds	r3, #2
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6812      	ldr	r2, [r2, #0]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	695a      	ldr	r2, [r3, #20]
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	441a      	add	r2, r3
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80021c8:	2100      	movs	r1, #0
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f005 f9a5 	bl	800751a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 828e 	beq.w	80026fa <PCD_EP_ISR_Handler+0x5ca>
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f040 8289 	bne.w	80026fa <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	b292      	uxth	r2, r2
 80021fc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002208:	e277      	b.n	80026fa <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800221a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800221c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002220:	2b00      	cmp	r3, #0
 8002222:	d034      	beq.n	800228e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800222c:	b29b      	uxth	r3, r3
 800222e:	461a      	mov	r2, r3
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	4413      	add	r3, r2
 8002238:	3306      	adds	r3, #6
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6812      	ldr	r2, [r2, #0]
 8002240:	4413      	add	r3, r2
 8002242:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6818      	ldr	r0, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002262:	b29b      	uxth	r3, r3
 8002264:	f003 fb55 	bl	8005912 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	b29a      	uxth	r2, r3
 8002270:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002274:	4013      	ands	r3, r2
 8002276:	823b      	strh	r3, [r7, #16]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	8a3a      	ldrh	r2, [r7, #16]
 800227e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002282:	b292      	uxth	r2, r2
 8002284:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f005 f91a 	bl	80074c0 <HAL_PCD_SetupStageCallback>
 800228c:	e235      	b.n	80026fa <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800228e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002292:	2b00      	cmp	r3, #0
 8002294:	f280 8231 	bge.w	80026fa <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	881b      	ldrh	r3, [r3, #0]
 800229e:	b29a      	uxth	r2, r3
 80022a0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80022a4:	4013      	ands	r3, r2
 80022a6:	83bb      	strh	r3, [r7, #28]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	8bba      	ldrh	r2, [r7, #28]
 80022ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022b2:	b292      	uxth	r2, r2
 80022b4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022be:	b29b      	uxth	r3, r3
 80022c0:	461a      	mov	r2, r3
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4413      	add	r3, r2
 80022ca:	3306      	adds	r3, #6
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6812      	ldr	r2, [r2, #0]
 80022d2:	4413      	add	r3, r2
 80022d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d019      	beq.n	800231e <PCD_EP_ISR_Handler+0x1ee>
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d015      	beq.n	800231e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	6959      	ldr	r1, [r3, #20]
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002302:	b29b      	uxth	r3, r3
 8002304:	f003 fb05 	bl	8005912 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	695a      	ldr	r2, [r3, #20]
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	441a      	add	r2, r3
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002316:	2100      	movs	r1, #0
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f005 f8e3 	bl	80074e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	61bb      	str	r3, [r7, #24]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800232c:	b29b      	uxth	r3, r3
 800232e:	461a      	mov	r2, r3
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	4413      	add	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d112      	bne.n	800236c <PCD_EP_ISR_Handler+0x23c>
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	b29b      	uxth	r3, r3
 800234c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002350:	b29a      	uxth	r2, r3
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	801a      	strh	r2, [r3, #0]
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	b29b      	uxth	r3, r3
 800235c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002360:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002364:	b29a      	uxth	r2, r3
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	801a      	strh	r2, [r3, #0]
 800236a:	e02f      	b.n	80023cc <PCD_EP_ISR_Handler+0x29c>
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	2b3e      	cmp	r3, #62	; 0x3e
 8002372:	d813      	bhi.n	800239c <PCD_EP_ISR_Handler+0x26c>
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	085b      	lsrs	r3, r3, #1
 800237a:	633b      	str	r3, [r7, #48]	; 0x30
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b00      	cmp	r3, #0
 8002386:	d002      	beq.n	800238e <PCD_EP_ISR_Handler+0x25e>
 8002388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800238a:	3301      	adds	r3, #1
 800238c:	633b      	str	r3, [r7, #48]	; 0x30
 800238e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002390:	b29b      	uxth	r3, r3
 8002392:	029b      	lsls	r3, r3, #10
 8002394:	b29a      	uxth	r2, r3
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	801a      	strh	r2, [r3, #0]
 800239a:	e017      	b.n	80023cc <PCD_EP_ISR_Handler+0x29c>
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	095b      	lsrs	r3, r3, #5
 80023a2:	633b      	str	r3, [r7, #48]	; 0x30
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	f003 031f 	and.w	r3, r3, #31
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d102      	bne.n	80023b6 <PCD_EP_ISR_Handler+0x286>
 80023b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b2:	3b01      	subs	r3, #1
 80023b4:	633b      	str	r3, [r7, #48]	; 0x30
 80023b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	029b      	lsls	r3, r3, #10
 80023bc:	b29b      	uxth	r3, r3
 80023be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023dc:	827b      	strh	r3, [r7, #18]
 80023de:	8a7b      	ldrh	r3, [r7, #18]
 80023e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80023e4:	827b      	strh	r3, [r7, #18]
 80023e6:	8a7b      	ldrh	r3, [r7, #18]
 80023e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023ec:	827b      	strh	r3, [r7, #18]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	8a7b      	ldrh	r3, [r7, #18]
 80023f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002404:	b29b      	uxth	r3, r3
 8002406:	8013      	strh	r3, [r2, #0]
 8002408:	e177      	b.n	80026fa <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	881b      	ldrh	r3, [r3, #0]
 800241a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800241c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002420:	2b00      	cmp	r3, #0
 8002422:	f280 80ea 	bge.w	80025fa <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	461a      	mov	r2, r3
 800242c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	b29a      	uxth	r2, r3
 8002438:	f640 738f 	movw	r3, #3983	; 0xf8f
 800243c:	4013      	ands	r3, r2
 800243e:	853b      	strh	r3, [r7, #40]	; 0x28
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002450:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002454:	b292      	uxth	r2, r2
 8002456:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002458:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	4413      	add	r3, r2
 800246c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	7b1b      	ldrb	r3, [r3, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d122      	bne.n	80024bc <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800247e:	b29b      	uxth	r3, r3
 8002480:	461a      	mov	r2, r3
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	4413      	add	r3, r2
 800248a:	3306      	adds	r3, #6
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	4413      	add	r3, r2
 8002494:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800249e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80024a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 8087 	beq.w	80025b6 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6818      	ldr	r0, [r3, #0]
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	6959      	ldr	r1, [r3, #20]
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	88da      	ldrh	r2, [r3, #6]
 80024b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024b6:	f003 fa2c 	bl	8005912 <USB_ReadPMA>
 80024ba:	e07c      	b.n	80025b6 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	78db      	ldrb	r3, [r3, #3]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d108      	bne.n	80024d6 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80024c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024c6:	461a      	mov	r2, r3
 80024c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f923 	bl	8002716 <HAL_PCD_EP_DB_Receive>
 80024d0:	4603      	mov	r3, r0
 80024d2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80024d4:	e06f      	b.n	80025b6 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f0:	847b      	strh	r3, [r7, #34]	; 0x22
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	461a      	mov	r2, r3
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	441a      	add	r2, r3
 8002500:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002502:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002506:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800250a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800250e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002512:	b29b      	uxth	r3, r3
 8002514:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	b29b      	uxth	r3, r3
 8002528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d021      	beq.n	8002574 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002538:	b29b      	uxth	r3, r3
 800253a:	461a      	mov	r2, r3
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	4413      	add	r3, r2
 8002544:	3302      	adds	r3, #2
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6812      	ldr	r2, [r2, #0]
 800254c:	4413      	add	r3, r2
 800254e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002558:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800255a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800255c:	2b00      	cmp	r3, #0
 800255e:	d02a      	beq.n	80025b6 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6818      	ldr	r0, [r3, #0]
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	6959      	ldr	r1, [r3, #20]
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	891a      	ldrh	r2, [r3, #8]
 800256c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800256e:	f003 f9d0 	bl	8005912 <USB_ReadPMA>
 8002572:	e020      	b.n	80025b6 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800257c:	b29b      	uxth	r3, r3
 800257e:	461a      	mov	r2, r3
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	4413      	add	r3, r2
 8002588:	3306      	adds	r3, #6
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	4413      	add	r3, r2
 8002592:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800259c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800259e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d008      	beq.n	80025b6 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6818      	ldr	r0, [r3, #0]
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	6959      	ldr	r1, [r3, #20]
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	895a      	ldrh	r2, [r3, #10]
 80025b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025b2:	f003 f9ae 	bl	8005912 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	69da      	ldr	r2, [r3, #28]
 80025ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025bc:	441a      	add	r2, r3
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	695a      	ldr	r2, [r3, #20]
 80025c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025c8:	441a      	add	r2, r3
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d004      	beq.n	80025e0 <PCD_EP_ISR_Handler+0x4b0>
 80025d6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d206      	bcs.n	80025ee <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	4619      	mov	r1, r3
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f004 ff7c 	bl	80074e4 <HAL_PCD_DataOutStageCallback>
 80025ec:	e005      	b.n	80025fa <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025f4:	4618      	mov	r0, r3
 80025f6:	f001 fee9 	bl	80043cc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80025fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002600:	2b00      	cmp	r3, #0
 8002602:	d07a      	beq.n	80026fa <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8002604:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002608:	1c5a      	adds	r2, r3, #1
 800260a:	4613      	mov	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	4413      	add	r3, r2
 8002616:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	461a      	mov	r2, r3
 800261e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	b29b      	uxth	r3, r3
 800262a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800262e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002632:	843b      	strh	r3, [r7, #32]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	441a      	add	r2, r3
 8002642:	8c3b      	ldrh	r3, [r7, #32]
 8002644:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002648:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800264c:	b29b      	uxth	r3, r3
 800264e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	78db      	ldrb	r3, [r3, #3]
 8002654:	2b02      	cmp	r3, #2
 8002656:	d108      	bne.n	800266a <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800265c:	2b02      	cmp	r3, #2
 800265e:	d146      	bne.n	80026ee <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002660:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002666:	2b00      	cmp	r3, #0
 8002668:	d141      	bne.n	80026ee <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002672:	b29b      	uxth	r3, r3
 8002674:	461a      	mov	r2, r3
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4413      	add	r3, r2
 800267e:	3302      	adds	r3, #2
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6812      	ldr	r2, [r2, #0]
 8002686:	4413      	add	r3, r2
 8002688:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002692:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	699a      	ldr	r2, [r3, #24]
 8002698:	8bfb      	ldrh	r3, [r7, #30]
 800269a:	429a      	cmp	r2, r3
 800269c:	d906      	bls.n	80026ac <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	699a      	ldr	r2, [r3, #24]
 80026a2:	8bfb      	ldrh	r3, [r7, #30]
 80026a4:	1ad2      	subs	r2, r2, r3
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	619a      	str	r2, [r3, #24]
 80026aa:	e002      	b.n	80026b2 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	2200      	movs	r2, #0
 80026b0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d106      	bne.n	80026c8 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	4619      	mov	r1, r3
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f004 ff2a 	bl	800751a <HAL_PCD_DataInStageCallback>
 80026c6:	e018      	b.n	80026fa <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	695a      	ldr	r2, [r3, #20]
 80026cc:	8bfb      	ldrh	r3, [r7, #30]
 80026ce:	441a      	add	r2, r3
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	69da      	ldr	r2, [r3, #28]
 80026d8:	8bfb      	ldrh	r3, [r7, #30]
 80026da:	441a      	add	r2, r3
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026e6:	4618      	mov	r0, r3
 80026e8:	f001 fe70 	bl	80043cc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80026ec:	e005      	b.n	80026fa <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80026ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026f0:	461a      	mov	r2, r3
 80026f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f91b 	bl	8002930 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002702:	b29b      	uxth	r3, r3
 8002704:	b21b      	sxth	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	f6ff ad17 	blt.w	800213a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3738      	adds	r7, #56	; 0x38
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b088      	sub	sp, #32
 800271a:	af00      	add	r7, sp, #0
 800271c:	60f8      	str	r0, [r7, #12]
 800271e:	60b9      	str	r1, [r7, #8]
 8002720:	4613      	mov	r3, r2
 8002722:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002724:	88fb      	ldrh	r3, [r7, #6]
 8002726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d07e      	beq.n	800282c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002736:	b29b      	uxth	r3, r3
 8002738:	461a      	mov	r2, r3
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4413      	add	r3, r2
 8002742:	3302      	adds	r3, #2
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	6812      	ldr	r2, [r2, #0]
 800274a:	4413      	add	r3, r2
 800274c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002756:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	699a      	ldr	r2, [r3, #24]
 800275c:	8b7b      	ldrh	r3, [r7, #26]
 800275e:	429a      	cmp	r2, r3
 8002760:	d306      	bcc.n	8002770 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	699a      	ldr	r2, [r3, #24]
 8002766:	8b7b      	ldrh	r3, [r7, #26]
 8002768:	1ad2      	subs	r2, r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	619a      	str	r2, [r3, #24]
 800276e:	e002      	b.n	8002776 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2200      	movs	r2, #0
 8002774:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d123      	bne.n	80027c6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	461a      	mov	r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	b29b      	uxth	r3, r3
 8002790:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002798:	833b      	strh	r3, [r7, #24]
 800279a:	8b3b      	ldrh	r3, [r7, #24]
 800279c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80027a0:	833b      	strh	r3, [r7, #24]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	461a      	mov	r2, r3
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	441a      	add	r2, r3
 80027b0:	8b3b      	ldrh	r3, [r7, #24]
 80027b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027c6:	88fb      	ldrh	r3, [r7, #6]
 80027c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d01f      	beq.n	8002810 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	461a      	mov	r2, r3
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ea:	82fb      	strh	r3, [r7, #22]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	461a      	mov	r2, r3
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	441a      	add	r2, r3
 80027fa:	8afb      	ldrh	r3, [r7, #22]
 80027fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002800:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002804:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002808:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800280c:	b29b      	uxth	r3, r3
 800280e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002810:	8b7b      	ldrh	r3, [r7, #26]
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 8087 	beq.w	8002926 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6818      	ldr	r0, [r3, #0]
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	6959      	ldr	r1, [r3, #20]
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	891a      	ldrh	r2, [r3, #8]
 8002824:	8b7b      	ldrh	r3, [r7, #26]
 8002826:	f003 f874 	bl	8005912 <USB_ReadPMA>
 800282a:	e07c      	b.n	8002926 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002834:	b29b      	uxth	r3, r3
 8002836:	461a      	mov	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	4413      	add	r3, r2
 8002840:	3306      	adds	r3, #6
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	4413      	add	r3, r2
 800284a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002854:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	699a      	ldr	r2, [r3, #24]
 800285a:	8b7b      	ldrh	r3, [r7, #26]
 800285c:	429a      	cmp	r2, r3
 800285e:	d306      	bcc.n	800286e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	699a      	ldr	r2, [r3, #24]
 8002864:	8b7b      	ldrh	r3, [r7, #26]
 8002866:	1ad2      	subs	r2, r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	619a      	str	r2, [r3, #24]
 800286c:	e002      	b.n	8002874 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2200      	movs	r2, #0
 8002872:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d123      	bne.n	80028c4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	461a      	mov	r2, r3
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	b29b      	uxth	r3, r3
 800288e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002896:	83fb      	strh	r3, [r7, #30]
 8002898:	8bfb      	ldrh	r3, [r7, #30]
 800289a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800289e:	83fb      	strh	r3, [r7, #30]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	461a      	mov	r2, r3
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	441a      	add	r2, r3
 80028ae:	8bfb      	ldrh	r3, [r7, #30]
 80028b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80028c4:	88fb      	ldrh	r3, [r7, #6]
 80028c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d11f      	bne.n	800290e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e8:	83bb      	strh	r3, [r7, #28]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	441a      	add	r2, r3
 80028f8:	8bbb      	ldrh	r3, [r7, #28]
 80028fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002906:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800290a:	b29b      	uxth	r3, r3
 800290c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800290e:	8b7b      	ldrh	r3, [r7, #26]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d008      	beq.n	8002926 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6818      	ldr	r0, [r3, #0]
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	6959      	ldr	r1, [r3, #20]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	895a      	ldrh	r2, [r3, #10]
 8002920:	8b7b      	ldrh	r3, [r7, #26]
 8002922:	f002 fff6 	bl	8005912 <USB_ReadPMA>
    }
  }

  return count;
 8002926:	8b7b      	ldrh	r3, [r7, #26]
}
 8002928:	4618      	mov	r0, r3
 800292a:	3720      	adds	r7, #32
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b094      	sub	sp, #80	; 0x50
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	4613      	mov	r3, r2
 800293c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800293e:	88fb      	ldrh	r3, [r7, #6]
 8002940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 8138 	beq.w	8002bba <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002952:	b29b      	uxth	r3, r3
 8002954:	461a      	mov	r2, r3
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4413      	add	r3, r2
 800295e:	3302      	adds	r3, #2
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	6812      	ldr	r2, [r2, #0]
 8002966:	4413      	add	r3, r2
 8002968:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800296c:	881b      	ldrh	r3, [r3, #0]
 800296e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002972:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	699a      	ldr	r2, [r3, #24]
 800297a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800297e:	429a      	cmp	r2, r3
 8002980:	d907      	bls.n	8002992 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	699a      	ldr	r2, [r3, #24]
 8002986:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800298a:	1ad2      	subs	r2, r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	619a      	str	r2, [r3, #24]
 8002990:	e002      	b.n	8002998 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2200      	movs	r2, #0
 8002996:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d12c      	bne.n	80029fa <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	4619      	mov	r1, r3
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f004 fdb7 	bl	800751a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029ac:	88fb      	ldrh	r3, [r7, #6]
 80029ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 823a 	beq.w	8002e2c <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	461a      	mov	r2, r3
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029d2:	82fb      	strh	r3, [r7, #22]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	461a      	mov	r2, r3
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	441a      	add	r2, r3
 80029e2:	8afb      	ldrh	r3, [r7, #22]
 80029e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	8013      	strh	r3, [r2, #0]
 80029f8:	e218      	b.n	8002e2c <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029fa:	88fb      	ldrh	r3, [r7, #6]
 80029fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d01f      	beq.n	8002a44 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	461a      	mov	r2, r3
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	441a      	add	r2, r3
 8002a2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	f040 81ee 	bne.w	8002e2c <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	695a      	ldr	r2, [r3, #20]
 8002a54:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002a58:	441a      	add	r2, r3
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	69da      	ldr	r2, [r3, #28]
 8002a62:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002a66:	441a      	add	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	6a1a      	ldr	r2, [r3, #32]
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d309      	bcc.n	8002a8c <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	6a1a      	ldr	r2, [r3, #32]
 8002a82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a84:	1ad2      	subs	r2, r2, r3
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	621a      	str	r2, [r3, #32]
 8002a8a:	e015      	b.n	8002ab8 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d107      	bne.n	8002aa4 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8002a94:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002a98:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002aa2:	e009      	b.n	8002ab8 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	785b      	ldrb	r3, [r3, #1]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d155      	bne.n	8002b6c <HAL_PCD_EP_DB_Transmit+0x23c>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	61fb      	str	r3, [r7, #28]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	61fb      	str	r3, [r7, #28]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	011a      	lsls	r2, r3, #4
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ae6:	61bb      	str	r3, [r7, #24]
 8002ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d112      	bne.n	8002b14 <HAL_PCD_EP_DB_Transmit+0x1e4>
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	801a      	strh	r2, [r3, #0]
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	801a      	strh	r2, [r3, #0]
 8002b12:	e047      	b.n	8002ba4 <HAL_PCD_EP_DB_Transmit+0x274>
 8002b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b16:	2b3e      	cmp	r3, #62	; 0x3e
 8002b18:	d811      	bhi.n	8002b3e <HAL_PCD_EP_DB_Transmit+0x20e>
 8002b1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b1c:	085b      	lsrs	r3, r3, #1
 8002b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d002      	beq.n	8002b30 <HAL_PCD_EP_DB_Transmit+0x200>
 8002b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	029b      	lsls	r3, r3, #10
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	801a      	strh	r2, [r3, #0]
 8002b3c:	e032      	b.n	8002ba4 <HAL_PCD_EP_DB_Transmit+0x274>
 8002b3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b40:	095b      	lsrs	r3, r3, #5
 8002b42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b46:	f003 031f 	and.w	r3, r3, #31
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d102      	bne.n	8002b54 <HAL_PCD_EP_DB_Transmit+0x224>
 8002b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b50:	3b01      	subs	r3, #1
 8002b52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	029b      	lsls	r3, r3, #10
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	801a      	strh	r2, [r3, #0]
 8002b6a:	e01b      	b.n	8002ba4 <HAL_PCD_EP_DB_Transmit+0x274>
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	785b      	ldrb	r3, [r3, #1]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d117      	bne.n	8002ba4 <HAL_PCD_EP_DB_Transmit+0x274>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	461a      	mov	r2, r3
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	4413      	add	r3, r2
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	011a      	lsls	r2, r3, #4
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	4413      	add	r3, r2
 8002b96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b9a:	623b      	str	r3, [r7, #32]
 8002b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	6a3b      	ldr	r3, [r7, #32]
 8002ba2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	6959      	ldr	r1, [r3, #20]
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	891a      	ldrh	r2, [r3, #8]
 8002bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	f002 fe68 	bl	8005888 <USB_WritePMA>
 8002bb8:	e138      	b.n	8002e2c <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4413      	add	r3, r2
 8002bce:	3306      	adds	r3, #6
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	6812      	ldr	r2, [r2, #0]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bdc:	881b      	ldrh	r3, [r3, #0]
 8002bde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002be2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	699a      	ldr	r2, [r3, #24]
 8002bea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d307      	bcc.n	8002c02 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	699a      	ldr	r2, [r3, #24]
 8002bf6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002bfa:	1ad2      	subs	r2, r2, r3
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	619a      	str	r2, [r3, #24]
 8002c00:	e002      	b.n	8002c08 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	2200      	movs	r2, #0
 8002c06:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d12e      	bne.n	8002c6e <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	4619      	mov	r1, r3
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f004 fc7f 	bl	800751a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c1c:	88fb      	ldrh	r3, [r7, #6]
 8002c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f040 8102 	bne.w	8002e2c <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	881b      	ldrh	r3, [r3, #0]
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c42:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	441a      	add	r2, r3
 8002c54:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002c58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	8013      	strh	r3, [r2, #0]
 8002c6c:	e0de      	b.n	8002e2c <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c6e:	88fb      	ldrh	r3, [r7, #6]
 8002c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d11f      	bne.n	8002cb8 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c92:	867b      	strh	r3, [r7, #50]	; 0x32
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	441a      	add	r2, r3
 8002ca2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002ca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	f040 80b4 	bne.w	8002e2c <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	695a      	ldr	r2, [r3, #20]
 8002cc8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ccc:	441a      	add	r2, r3
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	69da      	ldr	r2, [r3, #28]
 8002cd6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002cda:	441a      	add	r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	6a1a      	ldr	r2, [r3, #32]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d309      	bcc.n	8002d00 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	6a1a      	ldr	r2, [r3, #32]
 8002cf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cf8:	1ad2      	subs	r2, r2, r3
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	621a      	str	r2, [r3, #32]
 8002cfe:	e015      	b.n	8002d2c <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d107      	bne.n	8002d18 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8002d08:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002d0c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d16:	e009      	b.n	8002d2c <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2200      	movs	r2, #0
 8002d22:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	643b      	str	r3, [r7, #64]	; 0x40
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	785b      	ldrb	r3, [r3, #1]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d155      	bne.n	8002de6 <HAL_PCD_EP_DB_Transmit+0x4b6>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4e:	4413      	add	r3, r2
 8002d50:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	011a      	lsls	r2, r3, #4
 8002d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d60:	637b      	str	r3, [r7, #52]	; 0x34
 8002d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d112      	bne.n	8002d8e <HAL_PCD_EP_DB_Transmit+0x45e>
 8002d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d76:	801a      	strh	r2, [r3, #0]
 8002d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d8a:	801a      	strh	r2, [r3, #0]
 8002d8c:	e044      	b.n	8002e18 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002d8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d90:	2b3e      	cmp	r3, #62	; 0x3e
 8002d92:	d811      	bhi.n	8002db8 <HAL_PCD_EP_DB_Transmit+0x488>
 8002d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d96:	085b      	lsrs	r3, r3, #1
 8002d98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d002      	beq.n	8002daa <HAL_PCD_EP_DB_Transmit+0x47a>
 8002da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002da6:	3301      	adds	r3, #1
 8002da8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	029b      	lsls	r3, r3, #10
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db4:	801a      	strh	r2, [r3, #0]
 8002db6:	e02f      	b.n	8002e18 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dba:	095b      	lsrs	r3, r3, #5
 8002dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dc0:	f003 031f 	and.w	r3, r3, #31
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d102      	bne.n	8002dce <HAL_PCD_EP_DB_Transmit+0x49e>
 8002dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	029b      	lsls	r3, r3, #10
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de2:	801a      	strh	r2, [r3, #0]
 8002de4:	e018      	b.n	8002e18 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	785b      	ldrb	r3, [r3, #1]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d114      	bne.n	8002e18 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dfc:	4413      	add	r3, r2
 8002dfe:	643b      	str	r3, [r7, #64]	; 0x40
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	011a      	lsls	r2, r3, #4
 8002e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e08:	4413      	add	r3, r2
 8002e0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e16:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6818      	ldr	r0, [r3, #0]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	6959      	ldr	r1, [r3, #20]
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	895a      	ldrh	r2, [r3, #10]
 8002e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	f002 fd2e 	bl	8005888 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	461a      	mov	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e46:	82bb      	strh	r3, [r7, #20]
 8002e48:	8abb      	ldrh	r3, [r7, #20]
 8002e4a:	f083 0310 	eor.w	r3, r3, #16
 8002e4e:	82bb      	strh	r3, [r7, #20]
 8002e50:	8abb      	ldrh	r3, [r7, #20]
 8002e52:	f083 0320 	eor.w	r3, r3, #32
 8002e56:	82bb      	strh	r3, [r7, #20]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	441a      	add	r2, r3
 8002e66:	8abb      	ldrh	r3, [r7, #20]
 8002e68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3750      	adds	r7, #80	; 0x50
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b087      	sub	sp, #28
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	60f8      	str	r0, [r7, #12]
 8002e8e:	607b      	str	r3, [r7, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	817b      	strh	r3, [r7, #10]
 8002e94:	4613      	mov	r3, r2
 8002e96:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002e98:	897b      	ldrh	r3, [r7, #10]
 8002e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00b      	beq.n	8002ebc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ea4:	897b      	ldrh	r3, [r7, #10]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	1c5a      	adds	r2, r3, #1
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	e009      	b.n	8002ed0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ebc:	897a      	ldrh	r2, [r7, #10]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	4413      	add	r3, r2
 8002ece:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002ed0:	893b      	ldrh	r3, [r7, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d107      	bne.n	8002ee6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	80da      	strh	r2, [r3, #6]
 8002ee4:	e00b      	b.n	8002efe <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	0c1b      	lsrs	r3, r3, #16
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	371c      	adds	r7, #28
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bc80      	pop	{r7}
 8002f08:	4770      	bx	lr
	...

08002f0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e26c      	b.n	80033f8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f000 8087 	beq.w	800303a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f2c:	4b92      	ldr	r3, [pc, #584]	; (8003178 <HAL_RCC_OscConfig+0x26c>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f003 030c 	and.w	r3, r3, #12
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d00c      	beq.n	8002f52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f38:	4b8f      	ldr	r3, [pc, #572]	; (8003178 <HAL_RCC_OscConfig+0x26c>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f003 030c 	and.w	r3, r3, #12
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d112      	bne.n	8002f6a <HAL_RCC_OscConfig+0x5e>
 8002f44:	4b8c      	ldr	r3, [pc, #560]	; (8003178 <HAL_RCC_OscConfig+0x26c>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f50:	d10b      	bne.n	8002f6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f52:	4b89      	ldr	r3, [pc, #548]	; (8003178 <HAL_RCC_OscConfig+0x26c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d06c      	beq.n	8003038 <HAL_RCC_OscConfig+0x12c>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d168      	bne.n	8003038 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e246      	b.n	80033f8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f72:	d106      	bne.n	8002f82 <HAL_RCC_OscConfig+0x76>
 8002f74:	4b80      	ldr	r3, [pc, #512]	; (8003178 <HAL_RCC_OscConfig+0x26c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a7f      	ldr	r2, [pc, #508]	; (8003178 <HAL_RCC_OscConfig+0x26c>)
 8002f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f7e:	6013      	str	r3, [r2, #0]
 8002f80:	e02e      	b.n	8002fe0 <HAL_RCC_OscConfig+0xd4>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10c      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x98>
 8002f8a:	4b7b      	ldr	r3, [pc, #492]	; (8003178 <HAL_RCC_OscConfig+0x26c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a7a      	ldr	r2, [pc, #488]	; (8003178 <HAL_RCC_OscConfig+0x26c>)
 8002f90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	4b78      	ldr	r3, [pc, #480]	; (8003178 <HAL_RCC_OscConfig+0x26c>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a77      	ldr	r2, [pc, #476]	; (8003178 <HAL_RCC_OscConfig+0x26c>)
 8002f9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fa0:	6013      	str	r3, [r2, #0]
 8002fa2:	e01d      	b.n	8002fe0 <HAL_RCC_OscConfig+0xd4>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fac:	d10c      	bne.n	8002fc8 <HAL_RCC_OscConfig+0xbc>
 8002fae:	4b72      	ldr	r3, [pc, #456]	; (8003178 <HAL_RCC_OscConfig+0x26c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a71      	ldr	r2, [pc, #452]	; (8003178 <HAL_RCC_OscConfig+0x26c>)
 8002fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	4b6f      	ldr	r3, [pc, #444]	; (8003178 <HAL_RCC_OscConfig+0x26c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a6e      	ldr	r2, [pc, #440]	; (8003178 <HAL_RCC_OscConfig+0x26c>)
 8002fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc4:	6013      	str	r3, [r2, #0]
 8002fc6:	e00b      	b.n	8002fe0 <HAL_RCC_OscConfig+0xd4>
 8002fc8:	4b6b      	ldr	r3, [pc, #428]	; (8003178 <HAL_RCC_OscConfig+0x26c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a6a      	ldr	r2, [pc, #424]	; (8003178 <HAL_RCC_OscConfig+0x26c>)
 8002fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fd2:	6013      	str	r3, [r2, #0]
 8002fd4:	4b68      	ldr	r3, [pc, #416]	; (8003178 <HAL_RCC_OscConfig+0x26c>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a67      	ldr	r2, [pc, #412]	; (8003178 <HAL_RCC_OscConfig+0x26c>)
 8002fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fde:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d013      	beq.n	8003010 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe8:	f7fd fb9e 	bl	8000728 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ff0:	f7fd fb9a 	bl	8000728 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b64      	cmp	r3, #100	; 0x64
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e1fa      	b.n	80033f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003002:	4b5d      	ldr	r3, [pc, #372]	; (8003178 <HAL_RCC_OscConfig+0x26c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0f0      	beq.n	8002ff0 <HAL_RCC_OscConfig+0xe4>
 800300e:	e014      	b.n	800303a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003010:	f7fd fb8a 	bl	8000728 <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003018:	f7fd fb86 	bl	8000728 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b64      	cmp	r3, #100	; 0x64
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e1e6      	b.n	80033f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800302a:	4b53      	ldr	r3, [pc, #332]	; (8003178 <HAL_RCC_OscConfig+0x26c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f0      	bne.n	8003018 <HAL_RCC_OscConfig+0x10c>
 8003036:	e000      	b.n	800303a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d063      	beq.n	800310e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003046:	4b4c      	ldr	r3, [pc, #304]	; (8003178 <HAL_RCC_OscConfig+0x26c>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f003 030c 	and.w	r3, r3, #12
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00b      	beq.n	800306a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003052:	4b49      	ldr	r3, [pc, #292]	; (8003178 <HAL_RCC_OscConfig+0x26c>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f003 030c 	and.w	r3, r3, #12
 800305a:	2b08      	cmp	r3, #8
 800305c:	d11c      	bne.n	8003098 <HAL_RCC_OscConfig+0x18c>
 800305e:	4b46      	ldr	r3, [pc, #280]	; (8003178 <HAL_RCC_OscConfig+0x26c>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d116      	bne.n	8003098 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800306a:	4b43      	ldr	r3, [pc, #268]	; (8003178 <HAL_RCC_OscConfig+0x26c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d005      	beq.n	8003082 <HAL_RCC_OscConfig+0x176>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d001      	beq.n	8003082 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e1ba      	b.n	80033f8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003082:	4b3d      	ldr	r3, [pc, #244]	; (8003178 <HAL_RCC_OscConfig+0x26c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	4939      	ldr	r1, [pc, #228]	; (8003178 <HAL_RCC_OscConfig+0x26c>)
 8003092:	4313      	orrs	r3, r2
 8003094:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003096:	e03a      	b.n	800310e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d020      	beq.n	80030e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030a0:	4b36      	ldr	r3, [pc, #216]	; (800317c <HAL_RCC_OscConfig+0x270>)
 80030a2:	2201      	movs	r2, #1
 80030a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a6:	f7fd fb3f 	bl	8000728 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ae:	f7fd fb3b 	bl	8000728 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e19b      	b.n	80033f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c0:	4b2d      	ldr	r3, [pc, #180]	; (8003178 <HAL_RCC_OscConfig+0x26c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0f0      	beq.n	80030ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030cc:	4b2a      	ldr	r3, [pc, #168]	; (8003178 <HAL_RCC_OscConfig+0x26c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	4927      	ldr	r1, [pc, #156]	; (8003178 <HAL_RCC_OscConfig+0x26c>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	600b      	str	r3, [r1, #0]
 80030e0:	e015      	b.n	800310e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030e2:	4b26      	ldr	r3, [pc, #152]	; (800317c <HAL_RCC_OscConfig+0x270>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e8:	f7fd fb1e 	bl	8000728 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030f0:	f7fd fb1a 	bl	8000728 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e17a      	b.n	80033f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003102:	4b1d      	ldr	r3, [pc, #116]	; (8003178 <HAL_RCC_OscConfig+0x26c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f0      	bne.n	80030f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0308 	and.w	r3, r3, #8
 8003116:	2b00      	cmp	r3, #0
 8003118:	d03a      	beq.n	8003190 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d019      	beq.n	8003156 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003122:	4b17      	ldr	r3, [pc, #92]	; (8003180 <HAL_RCC_OscConfig+0x274>)
 8003124:	2201      	movs	r2, #1
 8003126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003128:	f7fd fafe 	bl	8000728 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003130:	f7fd fafa 	bl	8000728 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e15a      	b.n	80033f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003142:	4b0d      	ldr	r3, [pc, #52]	; (8003178 <HAL_RCC_OscConfig+0x26c>)
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0f0      	beq.n	8003130 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800314e:	2001      	movs	r0, #1
 8003150:	f000 faa6 	bl	80036a0 <RCC_Delay>
 8003154:	e01c      	b.n	8003190 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003156:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <HAL_RCC_OscConfig+0x274>)
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800315c:	f7fd fae4 	bl	8000728 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003162:	e00f      	b.n	8003184 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003164:	f7fd fae0 	bl	8000728 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d908      	bls.n	8003184 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e140      	b.n	80033f8 <HAL_RCC_OscConfig+0x4ec>
 8003176:	bf00      	nop
 8003178:	40021000 	.word	0x40021000
 800317c:	42420000 	.word	0x42420000
 8003180:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003184:	4b9e      	ldr	r3, [pc, #632]	; (8003400 <HAL_RCC_OscConfig+0x4f4>)
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1e9      	bne.n	8003164 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 80a6 	beq.w	80032ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800319e:	2300      	movs	r3, #0
 80031a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031a2:	4b97      	ldr	r3, [pc, #604]	; (8003400 <HAL_RCC_OscConfig+0x4f4>)
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10d      	bne.n	80031ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ae:	4b94      	ldr	r3, [pc, #592]	; (8003400 <HAL_RCC_OscConfig+0x4f4>)
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	4a93      	ldr	r2, [pc, #588]	; (8003400 <HAL_RCC_OscConfig+0x4f4>)
 80031b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b8:	61d3      	str	r3, [r2, #28]
 80031ba:	4b91      	ldr	r3, [pc, #580]	; (8003400 <HAL_RCC_OscConfig+0x4f4>)
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c2:	60bb      	str	r3, [r7, #8]
 80031c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031c6:	2301      	movs	r3, #1
 80031c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ca:	4b8e      	ldr	r3, [pc, #568]	; (8003404 <HAL_RCC_OscConfig+0x4f8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d118      	bne.n	8003208 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031d6:	4b8b      	ldr	r3, [pc, #556]	; (8003404 <HAL_RCC_OscConfig+0x4f8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a8a      	ldr	r2, [pc, #552]	; (8003404 <HAL_RCC_OscConfig+0x4f8>)
 80031dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031e2:	f7fd faa1 	bl	8000728 <HAL_GetTick>
 80031e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e8:	e008      	b.n	80031fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ea:	f7fd fa9d 	bl	8000728 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b64      	cmp	r3, #100	; 0x64
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e0fd      	b.n	80033f8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031fc:	4b81      	ldr	r3, [pc, #516]	; (8003404 <HAL_RCC_OscConfig+0x4f8>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003204:	2b00      	cmp	r3, #0
 8003206:	d0f0      	beq.n	80031ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d106      	bne.n	800321e <HAL_RCC_OscConfig+0x312>
 8003210:	4b7b      	ldr	r3, [pc, #492]	; (8003400 <HAL_RCC_OscConfig+0x4f4>)
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	4a7a      	ldr	r2, [pc, #488]	; (8003400 <HAL_RCC_OscConfig+0x4f4>)
 8003216:	f043 0301 	orr.w	r3, r3, #1
 800321a:	6213      	str	r3, [r2, #32]
 800321c:	e02d      	b.n	800327a <HAL_RCC_OscConfig+0x36e>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10c      	bne.n	8003240 <HAL_RCC_OscConfig+0x334>
 8003226:	4b76      	ldr	r3, [pc, #472]	; (8003400 <HAL_RCC_OscConfig+0x4f4>)
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	4a75      	ldr	r2, [pc, #468]	; (8003400 <HAL_RCC_OscConfig+0x4f4>)
 800322c:	f023 0301 	bic.w	r3, r3, #1
 8003230:	6213      	str	r3, [r2, #32]
 8003232:	4b73      	ldr	r3, [pc, #460]	; (8003400 <HAL_RCC_OscConfig+0x4f4>)
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	4a72      	ldr	r2, [pc, #456]	; (8003400 <HAL_RCC_OscConfig+0x4f4>)
 8003238:	f023 0304 	bic.w	r3, r3, #4
 800323c:	6213      	str	r3, [r2, #32]
 800323e:	e01c      	b.n	800327a <HAL_RCC_OscConfig+0x36e>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	2b05      	cmp	r3, #5
 8003246:	d10c      	bne.n	8003262 <HAL_RCC_OscConfig+0x356>
 8003248:	4b6d      	ldr	r3, [pc, #436]	; (8003400 <HAL_RCC_OscConfig+0x4f4>)
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	4a6c      	ldr	r2, [pc, #432]	; (8003400 <HAL_RCC_OscConfig+0x4f4>)
 800324e:	f043 0304 	orr.w	r3, r3, #4
 8003252:	6213      	str	r3, [r2, #32]
 8003254:	4b6a      	ldr	r3, [pc, #424]	; (8003400 <HAL_RCC_OscConfig+0x4f4>)
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	4a69      	ldr	r2, [pc, #420]	; (8003400 <HAL_RCC_OscConfig+0x4f4>)
 800325a:	f043 0301 	orr.w	r3, r3, #1
 800325e:	6213      	str	r3, [r2, #32]
 8003260:	e00b      	b.n	800327a <HAL_RCC_OscConfig+0x36e>
 8003262:	4b67      	ldr	r3, [pc, #412]	; (8003400 <HAL_RCC_OscConfig+0x4f4>)
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	4a66      	ldr	r2, [pc, #408]	; (8003400 <HAL_RCC_OscConfig+0x4f4>)
 8003268:	f023 0301 	bic.w	r3, r3, #1
 800326c:	6213      	str	r3, [r2, #32]
 800326e:	4b64      	ldr	r3, [pc, #400]	; (8003400 <HAL_RCC_OscConfig+0x4f4>)
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	4a63      	ldr	r2, [pc, #396]	; (8003400 <HAL_RCC_OscConfig+0x4f4>)
 8003274:	f023 0304 	bic.w	r3, r3, #4
 8003278:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d015      	beq.n	80032ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003282:	f7fd fa51 	bl	8000728 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003288:	e00a      	b.n	80032a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800328a:	f7fd fa4d 	bl	8000728 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	f241 3288 	movw	r2, #5000	; 0x1388
 8003298:	4293      	cmp	r3, r2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e0ab      	b.n	80033f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a0:	4b57      	ldr	r3, [pc, #348]	; (8003400 <HAL_RCC_OscConfig+0x4f4>)
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0ee      	beq.n	800328a <HAL_RCC_OscConfig+0x37e>
 80032ac:	e014      	b.n	80032d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ae:	f7fd fa3b 	bl	8000728 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032b4:	e00a      	b.n	80032cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032b6:	f7fd fa37 	bl	8000728 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e095      	b.n	80033f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032cc:	4b4c      	ldr	r3, [pc, #304]	; (8003400 <HAL_RCC_OscConfig+0x4f4>)
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1ee      	bne.n	80032b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032d8:	7dfb      	ldrb	r3, [r7, #23]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d105      	bne.n	80032ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032de:	4b48      	ldr	r3, [pc, #288]	; (8003400 <HAL_RCC_OscConfig+0x4f4>)
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	4a47      	ldr	r2, [pc, #284]	; (8003400 <HAL_RCC_OscConfig+0x4f4>)
 80032e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 8081 	beq.w	80033f6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032f4:	4b42      	ldr	r3, [pc, #264]	; (8003400 <HAL_RCC_OscConfig+0x4f4>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 030c 	and.w	r3, r3, #12
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d061      	beq.n	80033c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	69db      	ldr	r3, [r3, #28]
 8003304:	2b02      	cmp	r3, #2
 8003306:	d146      	bne.n	8003396 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003308:	4b3f      	ldr	r3, [pc, #252]	; (8003408 <HAL_RCC_OscConfig+0x4fc>)
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330e:	f7fd fa0b 	bl	8000728 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003316:	f7fd fa07 	bl	8000728 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e067      	b.n	80033f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003328:	4b35      	ldr	r3, [pc, #212]	; (8003400 <HAL_RCC_OscConfig+0x4f4>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1f0      	bne.n	8003316 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800333c:	d108      	bne.n	8003350 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800333e:	4b30      	ldr	r3, [pc, #192]	; (8003400 <HAL_RCC_OscConfig+0x4f4>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	492d      	ldr	r1, [pc, #180]	; (8003400 <HAL_RCC_OscConfig+0x4f4>)
 800334c:	4313      	orrs	r3, r2
 800334e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003350:	4b2b      	ldr	r3, [pc, #172]	; (8003400 <HAL_RCC_OscConfig+0x4f4>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a19      	ldr	r1, [r3, #32]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	430b      	orrs	r3, r1
 8003362:	4927      	ldr	r1, [pc, #156]	; (8003400 <HAL_RCC_OscConfig+0x4f4>)
 8003364:	4313      	orrs	r3, r2
 8003366:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003368:	4b27      	ldr	r3, [pc, #156]	; (8003408 <HAL_RCC_OscConfig+0x4fc>)
 800336a:	2201      	movs	r2, #1
 800336c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336e:	f7fd f9db 	bl	8000728 <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003376:	f7fd f9d7 	bl	8000728 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e037      	b.n	80033f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003388:	4b1d      	ldr	r3, [pc, #116]	; (8003400 <HAL_RCC_OscConfig+0x4f4>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0f0      	beq.n	8003376 <HAL_RCC_OscConfig+0x46a>
 8003394:	e02f      	b.n	80033f6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003396:	4b1c      	ldr	r3, [pc, #112]	; (8003408 <HAL_RCC_OscConfig+0x4fc>)
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339c:	f7fd f9c4 	bl	8000728 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a4:	f7fd f9c0 	bl	8000728 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e020      	b.n	80033f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033b6:	4b12      	ldr	r3, [pc, #72]	; (8003400 <HAL_RCC_OscConfig+0x4f4>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f0      	bne.n	80033a4 <HAL_RCC_OscConfig+0x498>
 80033c2:	e018      	b.n	80033f6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d101      	bne.n	80033d0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e013      	b.n	80033f8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033d0:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <HAL_RCC_OscConfig+0x4f4>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d106      	bne.n	80033f2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d001      	beq.n	80033f6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e000      	b.n	80033f8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40021000 	.word	0x40021000
 8003404:	40007000 	.word	0x40007000
 8003408:	42420060 	.word	0x42420060

0800340c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e0d0      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003420:	4b6a      	ldr	r3, [pc, #424]	; (80035cc <HAL_RCC_ClockConfig+0x1c0>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	429a      	cmp	r2, r3
 800342c:	d910      	bls.n	8003450 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342e:	4b67      	ldr	r3, [pc, #412]	; (80035cc <HAL_RCC_ClockConfig+0x1c0>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f023 0207 	bic.w	r2, r3, #7
 8003436:	4965      	ldr	r1, [pc, #404]	; (80035cc <HAL_RCC_ClockConfig+0x1c0>)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	4313      	orrs	r3, r2
 800343c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800343e:	4b63      	ldr	r3, [pc, #396]	; (80035cc <HAL_RCC_ClockConfig+0x1c0>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	d001      	beq.n	8003450 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e0b8      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d020      	beq.n	800349e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d005      	beq.n	8003474 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003468:	4b59      	ldr	r3, [pc, #356]	; (80035d0 <HAL_RCC_ClockConfig+0x1c4>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	4a58      	ldr	r2, [pc, #352]	; (80035d0 <HAL_RCC_ClockConfig+0x1c4>)
 800346e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003472:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0308 	and.w	r3, r3, #8
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003480:	4b53      	ldr	r3, [pc, #332]	; (80035d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	4a52      	ldr	r2, [pc, #328]	; (80035d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003486:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800348a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800348c:	4b50      	ldr	r3, [pc, #320]	; (80035d0 <HAL_RCC_ClockConfig+0x1c4>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	494d      	ldr	r1, [pc, #308]	; (80035d0 <HAL_RCC_ClockConfig+0x1c4>)
 800349a:	4313      	orrs	r3, r2
 800349c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d040      	beq.n	800352c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d107      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b2:	4b47      	ldr	r3, [pc, #284]	; (80035d0 <HAL_RCC_ClockConfig+0x1c4>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d115      	bne.n	80034ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e07f      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d107      	bne.n	80034da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ca:	4b41      	ldr	r3, [pc, #260]	; (80035d0 <HAL_RCC_ClockConfig+0x1c4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d109      	bne.n	80034ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e073      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034da:	4b3d      	ldr	r3, [pc, #244]	; (80035d0 <HAL_RCC_ClockConfig+0x1c4>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e06b      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034ea:	4b39      	ldr	r3, [pc, #228]	; (80035d0 <HAL_RCC_ClockConfig+0x1c4>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f023 0203 	bic.w	r2, r3, #3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	4936      	ldr	r1, [pc, #216]	; (80035d0 <HAL_RCC_ClockConfig+0x1c4>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034fc:	f7fd f914 	bl	8000728 <HAL_GetTick>
 8003500:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003502:	e00a      	b.n	800351a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003504:	f7fd f910 	bl	8000728 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003512:	4293      	cmp	r3, r2
 8003514:	d901      	bls.n	800351a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e053      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351a:	4b2d      	ldr	r3, [pc, #180]	; (80035d0 <HAL_RCC_ClockConfig+0x1c4>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f003 020c 	and.w	r2, r3, #12
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	429a      	cmp	r2, r3
 800352a:	d1eb      	bne.n	8003504 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800352c:	4b27      	ldr	r3, [pc, #156]	; (80035cc <HAL_RCC_ClockConfig+0x1c0>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d210      	bcs.n	800355c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800353a:	4b24      	ldr	r3, [pc, #144]	; (80035cc <HAL_RCC_ClockConfig+0x1c0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f023 0207 	bic.w	r2, r3, #7
 8003542:	4922      	ldr	r1, [pc, #136]	; (80035cc <HAL_RCC_ClockConfig+0x1c0>)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	4313      	orrs	r3, r2
 8003548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800354a:	4b20      	ldr	r3, [pc, #128]	; (80035cc <HAL_RCC_ClockConfig+0x1c0>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	429a      	cmp	r2, r3
 8003556:	d001      	beq.n	800355c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e032      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b00      	cmp	r3, #0
 8003566:	d008      	beq.n	800357a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003568:	4b19      	ldr	r3, [pc, #100]	; (80035d0 <HAL_RCC_ClockConfig+0x1c4>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	4916      	ldr	r1, [pc, #88]	; (80035d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003576:	4313      	orrs	r3, r2
 8003578:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d009      	beq.n	800359a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003586:	4b12      	ldr	r3, [pc, #72]	; (80035d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	490e      	ldr	r1, [pc, #56]	; (80035d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003596:	4313      	orrs	r3, r2
 8003598:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800359a:	f000 f821 	bl	80035e0 <HAL_RCC_GetSysClockFreq>
 800359e:	4602      	mov	r2, r0
 80035a0:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <HAL_RCC_ClockConfig+0x1c4>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	091b      	lsrs	r3, r3, #4
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	490a      	ldr	r1, [pc, #40]	; (80035d4 <HAL_RCC_ClockConfig+0x1c8>)
 80035ac:	5ccb      	ldrb	r3, [r1, r3]
 80035ae:	fa22 f303 	lsr.w	r3, r2, r3
 80035b2:	4a09      	ldr	r2, [pc, #36]	; (80035d8 <HAL_RCC_ClockConfig+0x1cc>)
 80035b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035b6:	4b09      	ldr	r3, [pc, #36]	; (80035dc <HAL_RCC_ClockConfig+0x1d0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fd f872 	bl	80006a4 <HAL_InitTick>

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40022000 	.word	0x40022000
 80035d0:	40021000 	.word	0x40021000
 80035d4:	08008324 	.word	0x08008324
 80035d8:	20000000 	.word	0x20000000
 80035dc:	20000004 	.word	0x20000004

080035e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e0:	b490      	push	{r4, r7}
 80035e2:	b08a      	sub	sp, #40	; 0x28
 80035e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80035e6:	4b2a      	ldr	r3, [pc, #168]	; (8003690 <HAL_RCC_GetSysClockFreq+0xb0>)
 80035e8:	1d3c      	adds	r4, r7, #4
 80035ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80035f0:	f240 2301 	movw	r3, #513	; 0x201
 80035f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	61fb      	str	r3, [r7, #28]
 80035fa:	2300      	movs	r3, #0
 80035fc:	61bb      	str	r3, [r7, #24]
 80035fe:	2300      	movs	r3, #0
 8003600:	627b      	str	r3, [r7, #36]	; 0x24
 8003602:	2300      	movs	r3, #0
 8003604:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003606:	2300      	movs	r3, #0
 8003608:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800360a:	4b22      	ldr	r3, [pc, #136]	; (8003694 <HAL_RCC_GetSysClockFreq+0xb4>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f003 030c 	and.w	r3, r3, #12
 8003616:	2b04      	cmp	r3, #4
 8003618:	d002      	beq.n	8003620 <HAL_RCC_GetSysClockFreq+0x40>
 800361a:	2b08      	cmp	r3, #8
 800361c:	d003      	beq.n	8003626 <HAL_RCC_GetSysClockFreq+0x46>
 800361e:	e02d      	b.n	800367c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003620:	4b1d      	ldr	r3, [pc, #116]	; (8003698 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003622:	623b      	str	r3, [r7, #32]
      break;
 8003624:	e02d      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	0c9b      	lsrs	r3, r3, #18
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003632:	4413      	add	r3, r2
 8003634:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003638:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d013      	beq.n	800366c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003644:	4b13      	ldr	r3, [pc, #76]	; (8003694 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	0c5b      	lsrs	r3, r3, #17
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003652:	4413      	add	r3, r2
 8003654:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003658:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	4a0e      	ldr	r2, [pc, #56]	; (8003698 <HAL_RCC_GetSysClockFreq+0xb8>)
 800365e:	fb02 f203 	mul.w	r2, r2, r3
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	fbb2 f3f3 	udiv	r3, r2, r3
 8003668:	627b      	str	r3, [r7, #36]	; 0x24
 800366a:	e004      	b.n	8003676 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	4a0b      	ldr	r2, [pc, #44]	; (800369c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003670:	fb02 f303 	mul.w	r3, r2, r3
 8003674:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	623b      	str	r3, [r7, #32]
      break;
 800367a:	e002      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800367c:	4b06      	ldr	r3, [pc, #24]	; (8003698 <HAL_RCC_GetSysClockFreq+0xb8>)
 800367e:	623b      	str	r3, [r7, #32]
      break;
 8003680:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003682:	6a3b      	ldr	r3, [r7, #32]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3728      	adds	r7, #40	; 0x28
 8003688:	46bd      	mov	sp, r7
 800368a:	bc90      	pop	{r4, r7}
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	080082cc 	.word	0x080082cc
 8003694:	40021000 	.word	0x40021000
 8003698:	007a1200 	.word	0x007a1200
 800369c:	003d0900 	.word	0x003d0900

080036a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036a8:	4b0a      	ldr	r3, [pc, #40]	; (80036d4 <RCC_Delay+0x34>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a0a      	ldr	r2, [pc, #40]	; (80036d8 <RCC_Delay+0x38>)
 80036ae:	fba2 2303 	umull	r2, r3, r2, r3
 80036b2:	0a5b      	lsrs	r3, r3, #9
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	fb02 f303 	mul.w	r3, r2, r3
 80036ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036bc:	bf00      	nop
  }
  while (Delay --);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	1e5a      	subs	r2, r3, #1
 80036c2:	60fa      	str	r2, [r7, #12]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1f9      	bne.n	80036bc <RCC_Delay+0x1c>
}
 80036c8:	bf00      	nop
 80036ca:	bf00      	nop
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bc80      	pop	{r7}
 80036d2:	4770      	bx	lr
 80036d4:	20000000 	.word	0x20000000
 80036d8:	10624dd3 	.word	0x10624dd3

080036dc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	613b      	str	r3, [r7, #16]
 80036e8:	2300      	movs	r3, #0
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d07d      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80036f8:	2300      	movs	r3, #0
 80036fa:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036fc:	4b4f      	ldr	r3, [pc, #316]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10d      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003708:	4b4c      	ldr	r3, [pc, #304]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800370a:	69db      	ldr	r3, [r3, #28]
 800370c:	4a4b      	ldr	r2, [pc, #300]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800370e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003712:	61d3      	str	r3, [r2, #28]
 8003714:	4b49      	ldr	r3, [pc, #292]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003720:	2301      	movs	r3, #1
 8003722:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003724:	4b46      	ldr	r3, [pc, #280]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372c:	2b00      	cmp	r3, #0
 800372e:	d118      	bne.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003730:	4b43      	ldr	r3, [pc, #268]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a42      	ldr	r2, [pc, #264]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800373a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800373c:	f7fc fff4 	bl	8000728 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003742:	e008      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003744:	f7fc fff0 	bl	8000728 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b64      	cmp	r3, #100	; 0x64
 8003750:	d901      	bls.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e06d      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003756:	4b3a      	ldr	r3, [pc, #232]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0f0      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003762:	4b36      	ldr	r3, [pc, #216]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800376a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d02e      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	429a      	cmp	r2, r3
 800377e:	d027      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003780:	4b2e      	ldr	r3, [pc, #184]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003788:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800378a:	4b2e      	ldr	r3, [pc, #184]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800378c:	2201      	movs	r2, #1
 800378e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003790:	4b2c      	ldr	r3, [pc, #176]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003796:	4a29      	ldr	r2, [pc, #164]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d014      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a6:	f7fc ffbf 	bl	8000728 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ac:	e00a      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ae:	f7fc ffbb 	bl	8000728 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037bc:	4293      	cmp	r3, r2
 80037be:	d901      	bls.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e036      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c4:	4b1d      	ldr	r3, [pc, #116]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0ee      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037d0:	4b1a      	ldr	r3, [pc, #104]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	4917      	ldr	r1, [pc, #92]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037e2:	7dfb      	ldrb	r3, [r7, #23]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d105      	bne.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037e8:	4b14      	ldr	r3, [pc, #80]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	4a13      	ldr	r2, [pc, #76]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d008      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003800:	4b0e      	ldr	r3, [pc, #56]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	490b      	ldr	r1, [pc, #44]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800380e:	4313      	orrs	r3, r2
 8003810:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0310 	and.w	r3, r3, #16
 800381a:	2b00      	cmp	r3, #0
 800381c:	d008      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800381e:	4b07      	ldr	r3, [pc, #28]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	4904      	ldr	r1, [pc, #16]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800382c:	4313      	orrs	r3, r2
 800382e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40021000 	.word	0x40021000
 8003840:	40007000 	.word	0x40007000
 8003844:	42420440 	.word	0x42420440

08003848 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003848:	b084      	sub	sp, #16
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
 8003852:	f107 0014 	add.w	r0, r7, #20
 8003856:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	bc80      	pop	{r7}
 8003864:	b004      	add	sp, #16
 8003866:	4770      	bx	lr

08003868 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003878:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800387c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	b29a      	uxth	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3714      	adds	r7, #20
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr

08003894 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800389c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80038a0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	43db      	mvns	r3, r3
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	4013      	ands	r3, r2
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr

080038c8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	460b      	mov	r3, r1
 80038d2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr

080038e0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80038e0:	b084      	sub	sp, #16
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
 80038ea:	f107 0014 	add.w	r0, r7, #20
 80038ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	bc80      	pop	{r7}
 800391c:	b004      	add	sp, #16
 800391e:	4770      	bx	lr

08003920 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003920:	b480      	push	{r7}
 8003922:	b09b      	sub	sp, #108	; 0x6c
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800392a:	2300      	movs	r3, #0
 800392c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	881b      	ldrh	r3, [r3, #0]
 800393c:	b29b      	uxth	r3, r3
 800393e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003946:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	78db      	ldrb	r3, [r3, #3]
 800394e:	2b03      	cmp	r3, #3
 8003950:	d81f      	bhi.n	8003992 <USB_ActivateEndpoint+0x72>
 8003952:	a201      	add	r2, pc, #4	; (adr r2, 8003958 <USB_ActivateEndpoint+0x38>)
 8003954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003958:	08003969 	.word	0x08003969
 800395c:	08003985 	.word	0x08003985
 8003960:	0800399b 	.word	0x0800399b
 8003964:	08003977 	.word	0x08003977
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003968:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800396c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003970:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003974:	e012      	b.n	800399c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003976:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800397a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800397e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003982:	e00b      	b.n	800399c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003984:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003988:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800398c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003990:	e004      	b.n	800399c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003998:	e000      	b.n	800399c <USB_ActivateEndpoint+0x7c>
      break;
 800399a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	441a      	add	r2, r3
 80039a6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80039aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	4313      	orrs	r3, r2
 80039de:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	441a      	add	r2, r3
 80039ec:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80039f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	7b1b      	ldrb	r3, [r3, #12]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f040 8149 	bne.w	8003ca0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	785b      	ldrb	r3, [r3, #1]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 8084 	beq.w	8003b20 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	461a      	mov	r2, r3
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	4413      	add	r3, r2
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	011a      	lsls	r2, r3, #4
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	4413      	add	r3, r2
 8003a36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a3a:	613b      	str	r3, [r7, #16]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	88db      	ldrh	r3, [r3, #6]
 8003a40:	085b      	lsrs	r3, r3, #1
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	881b      	ldrh	r3, [r3, #0]
 8003a58:	81fb      	strh	r3, [r7, #14]
 8003a5a:	89fb      	ldrh	r3, [r7, #14]
 8003a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d01b      	beq.n	8003a9c <USB_ActivateEndpoint+0x17c>
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	881b      	ldrh	r3, [r3, #0]
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a7a:	81bb      	strh	r3, [r7, #12]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	441a      	add	r2, r3
 8003a86:	89bb      	ldrh	r3, [r7, #12]
 8003a88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	78db      	ldrb	r3, [r3, #3]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d020      	beq.n	8003ae6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	881b      	ldrh	r3, [r3, #0]
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003aba:	813b      	strh	r3, [r7, #8]
 8003abc:	893b      	ldrh	r3, [r7, #8]
 8003abe:	f083 0320 	eor.w	r3, r3, #32
 8003ac2:	813b      	strh	r3, [r7, #8]
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	441a      	add	r2, r3
 8003ace:	893b      	ldrh	r3, [r7, #8]
 8003ad0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ad4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	8013      	strh	r3, [r2, #0]
 8003ae4:	e27f      	b.n	8003fe6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	881b      	ldrh	r3, [r3, #0]
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003af8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003afc:	817b      	strh	r3, [r7, #10]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	441a      	add	r2, r3
 8003b08:	897b      	ldrh	r3, [r7, #10]
 8003b0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	8013      	strh	r3, [r2, #0]
 8003b1e:	e262      	b.n	8003fe6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b30:	4413      	add	r3, r2
 8003b32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	011a      	lsls	r2, r3, #4
 8003b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003b42:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	88db      	ldrh	r3, [r3, #6]
 8003b48:	085b      	lsrs	r3, r3, #1
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b52:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	461a      	mov	r2, r3
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	4413      	add	r3, r2
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	011a      	lsls	r2, r3, #4
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	4413      	add	r3, r2
 8003b72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b76:	623b      	str	r3, [r7, #32]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d112      	bne.n	8003ba6 <USB_ActivateEndpoint+0x286>
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	881b      	ldrh	r3, [r3, #0]
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	801a      	strh	r2, [r3, #0]
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	801a      	strh	r2, [r3, #0]
 8003ba4:	e02f      	b.n	8003c06 <USB_ActivateEndpoint+0x2e6>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	2b3e      	cmp	r3, #62	; 0x3e
 8003bac:	d813      	bhi.n	8003bd6 <USB_ActivateEndpoint+0x2b6>
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	085b      	lsrs	r3, r3, #1
 8003bb4:	663b      	str	r3, [r7, #96]	; 0x60
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d002      	beq.n	8003bc8 <USB_ActivateEndpoint+0x2a8>
 8003bc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	663b      	str	r3, [r7, #96]	; 0x60
 8003bc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	029b      	lsls	r3, r3, #10
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	801a      	strh	r2, [r3, #0]
 8003bd4:	e017      	b.n	8003c06 <USB_ActivateEndpoint+0x2e6>
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	095b      	lsrs	r3, r3, #5
 8003bdc:	663b      	str	r3, [r7, #96]	; 0x60
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	f003 031f 	and.w	r3, r3, #31
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d102      	bne.n	8003bf0 <USB_ActivateEndpoint+0x2d0>
 8003bea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bec:	3b01      	subs	r3, #1
 8003bee:	663b      	str	r3, [r7, #96]	; 0x60
 8003bf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	029b      	lsls	r3, r3, #10
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	83fb      	strh	r3, [r7, #30]
 8003c14:	8bfb      	ldrh	r3, [r7, #30]
 8003c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d01b      	beq.n	8003c56 <USB_ActivateEndpoint+0x336>
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4413      	add	r3, r2
 8003c28:	881b      	ldrh	r3, [r3, #0]
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c34:	83bb      	strh	r3, [r7, #28]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	441a      	add	r2, r3
 8003c40:	8bbb      	ldrh	r3, [r7, #28]
 8003c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6c:	837b      	strh	r3, [r7, #26]
 8003c6e:	8b7b      	ldrh	r3, [r7, #26]
 8003c70:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003c74:	837b      	strh	r3, [r7, #26]
 8003c76:	8b7b      	ldrh	r3, [r7, #26]
 8003c78:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c7c:	837b      	strh	r3, [r7, #26]
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	441a      	add	r2, r3
 8003c88:	8b7b      	ldrh	r3, [r7, #26]
 8003c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	8013      	strh	r3, [r2, #0]
 8003c9e:	e1a2      	b.n	8003fe6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cb6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	441a      	add	r2, r3
 8003cc4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003cc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ccc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cd0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	461a      	mov	r2, r3
 8003cea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cec:	4413      	add	r3, r2
 8003cee:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	011a      	lsls	r2, r3, #4
 8003cf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cfe:	657b      	str	r3, [r7, #84]	; 0x54
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	891b      	ldrh	r3, [r3, #8]
 8003d04:	085b      	lsrs	r3, r3, #1
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d0e:	801a      	strh	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	653b      	str	r3, [r7, #80]	; 0x50
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d20:	4413      	add	r3, r2
 8003d22:	653b      	str	r3, [r7, #80]	; 0x50
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	011a      	lsls	r2, r3, #4
 8003d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003d32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	895b      	ldrh	r3, [r3, #10]
 8003d38:	085b      	lsrs	r3, r3, #1
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d42:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	785b      	ldrb	r3, [r3, #1]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f040 8091 	bne.w	8003e70 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4413      	add	r3, r2
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003d5c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d01b      	beq.n	8003d9e <USB_ActivateEndpoint+0x47e>
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4413      	add	r3, r2
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d7c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	441a      	add	r2, r3
 8003d88:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003d8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4413      	add	r3, r2
 8003da8:	881b      	ldrh	r3, [r3, #0]
 8003daa:	873b      	strh	r3, [r7, #56]	; 0x38
 8003dac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d01b      	beq.n	8003dee <USB_ActivateEndpoint+0x4ce>
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4413      	add	r3, r2
 8003dc0:	881b      	ldrh	r3, [r3, #0]
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dcc:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	441a      	add	r2, r3
 8003dd8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003dda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003de6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4413      	add	r3, r2
 8003df8:	881b      	ldrh	r3, [r3, #0]
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e04:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003e06:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003e08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003e0c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003e0e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003e10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003e14:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	441a      	add	r2, r3
 8003e20:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003e22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e4c:	867b      	strh	r3, [r7, #50]	; 0x32
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	441a      	add	r2, r3
 8003e58:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003e5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	8013      	strh	r3, [r2, #0]
 8003e6e:	e0ba      	b.n	8003fe6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	881b      	ldrh	r3, [r3, #0]
 8003e7c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003e80:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003e84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d01d      	beq.n	8003ec8 <USB_ActivateEndpoint+0x5a8>
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	441a      	add	r2, r3
 8003eb0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003eb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ebc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4413      	add	r3, r2
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003ed8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d01d      	beq.n	8003f20 <USB_ActivateEndpoint+0x600>
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	881b      	ldrh	r3, [r3, #0]
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003efa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	441a      	add	r2, r3
 8003f08:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003f0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	78db      	ldrb	r3, [r3, #3]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d024      	beq.n	8003f72 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	881b      	ldrh	r3, [r3, #0]
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f3e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003f42:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003f46:	f083 0320 	eor.w	r3, r3, #32
 8003f4a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	441a      	add	r2, r3
 8003f58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003f5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	8013      	strh	r3, [r2, #0]
 8003f70:	e01d      	b.n	8003fae <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4413      	add	r3, r2
 8003f7c:	881b      	ldrh	r3, [r3, #0]
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f88:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	441a      	add	r2, r3
 8003f96:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003f9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	881b      	ldrh	r3, [r3, #0]
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	441a      	add	r2, r3
 8003fd0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003fd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003fe6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	376c      	adds	r7, #108	; 0x6c
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bc80      	pop	{r7}
 8003ff2:	4770      	bx	lr

08003ff4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b08d      	sub	sp, #52	; 0x34
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	7b1b      	ldrb	r3, [r3, #12]
 8004002:	2b00      	cmp	r3, #0
 8004004:	f040 808e 	bne.w	8004124 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	785b      	ldrb	r3, [r3, #1]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d044      	beq.n	800409a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	881b      	ldrh	r3, [r3, #0]
 800401c:	81bb      	strh	r3, [r7, #12]
 800401e:	89bb      	ldrh	r3, [r7, #12]
 8004020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004024:	2b00      	cmp	r3, #0
 8004026:	d01b      	beq.n	8004060 <USB_DeactivateEndpoint+0x6c>
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	881b      	ldrh	r3, [r3, #0]
 8004034:	b29b      	uxth	r3, r3
 8004036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800403a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800403e:	817b      	strh	r3, [r7, #10]
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	441a      	add	r2, r3
 800404a:	897b      	ldrh	r3, [r7, #10]
 800404c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004050:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004054:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004058:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800405c:	b29b      	uxth	r3, r3
 800405e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	881b      	ldrh	r3, [r3, #0]
 800406c:	b29b      	uxth	r3, r3
 800406e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004072:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004076:	813b      	strh	r3, [r7, #8]
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	441a      	add	r2, r3
 8004082:	893b      	ldrh	r3, [r7, #8]
 8004084:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004088:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800408c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004094:	b29b      	uxth	r3, r3
 8004096:	8013      	strh	r3, [r2, #0]
 8004098:	e192      	b.n	80043c0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	827b      	strh	r3, [r7, #18]
 80040a8:	8a7b      	ldrh	r3, [r7, #18]
 80040aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d01b      	beq.n	80040ea <USB_DeactivateEndpoint+0xf6>
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	b29b      	uxth	r3, r3
 80040c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c8:	823b      	strh	r3, [r7, #16]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	441a      	add	r2, r3
 80040d4:	8a3b      	ldrh	r3, [r7, #16]
 80040d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4413      	add	r3, r2
 80040f4:	881b      	ldrh	r3, [r3, #0]
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004100:	81fb      	strh	r3, [r7, #14]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	441a      	add	r2, r3
 800410c:	89fb      	ldrh	r3, [r7, #14]
 800410e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004112:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800411a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800411e:	b29b      	uxth	r3, r3
 8004120:	8013      	strh	r3, [r2, #0]
 8004122:	e14d      	b.n	80043c0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	785b      	ldrb	r3, [r3, #1]
 8004128:	2b00      	cmp	r3, #0
 800412a:	f040 80a5 	bne.w	8004278 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4413      	add	r3, r2
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	843b      	strh	r3, [r7, #32]
 800413c:	8c3b      	ldrh	r3, [r7, #32]
 800413e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d01b      	beq.n	800417e <USB_DeactivateEndpoint+0x18a>
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	881b      	ldrh	r3, [r3, #0]
 8004152:	b29b      	uxth	r3, r3
 8004154:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415c:	83fb      	strh	r3, [r7, #30]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	441a      	add	r2, r3
 8004168:	8bfb      	ldrh	r3, [r7, #30]
 800416a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800416e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004172:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800417a:	b29b      	uxth	r3, r3
 800417c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	4413      	add	r3, r2
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	83bb      	strh	r3, [r7, #28]
 800418c:	8bbb      	ldrh	r3, [r7, #28]
 800418e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004192:	2b00      	cmp	r3, #0
 8004194:	d01b      	beq.n	80041ce <USB_DeactivateEndpoint+0x1da>
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4413      	add	r3, r2
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ac:	837b      	strh	r3, [r7, #26]
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	441a      	add	r2, r3
 80041b8:	8b7b      	ldrh	r3, [r7, #26]
 80041ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4413      	add	r3, r2
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	b29b      	uxth	r3, r3
 80041dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e4:	833b      	strh	r3, [r7, #24]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	441a      	add	r2, r3
 80041f0:	8b3b      	ldrh	r3, [r7, #24]
 80041f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004202:	b29b      	uxth	r3, r3
 8004204:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4413      	add	r3, r2
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	b29b      	uxth	r3, r3
 8004214:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800421c:	82fb      	strh	r3, [r7, #22]
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	441a      	add	r2, r3
 8004228:	8afb      	ldrh	r3, [r7, #22]
 800422a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800422e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800423a:	b29b      	uxth	r3, r3
 800423c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4413      	add	r3, r2
 8004248:	881b      	ldrh	r3, [r3, #0]
 800424a:	b29b      	uxth	r3, r3
 800424c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004250:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004254:	82bb      	strh	r3, [r7, #20]
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	441a      	add	r2, r3
 8004260:	8abb      	ldrh	r3, [r7, #20]
 8004262:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004266:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800426a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800426e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004272:	b29b      	uxth	r3, r3
 8004274:	8013      	strh	r3, [r2, #0]
 8004276:	e0a3      	b.n	80043c0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	881b      	ldrh	r3, [r3, #0]
 8004284:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004286:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d01b      	beq.n	80042c8 <USB_DeactivateEndpoint+0x2d4>
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	b29b      	uxth	r3, r3
 800429e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	441a      	add	r2, r3
 80042b2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80042b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	881b      	ldrh	r3, [r3, #0]
 80042d4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80042d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80042d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d01b      	beq.n	8004318 <USB_DeactivateEndpoint+0x324>
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f6:	853b      	strh	r3, [r7, #40]	; 0x28
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	441a      	add	r2, r3
 8004302:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004304:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004308:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800430c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004310:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004314:	b29b      	uxth	r3, r3
 8004316:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4413      	add	r3, r2
 8004322:	881b      	ldrh	r3, [r3, #0]
 8004324:	b29b      	uxth	r3, r3
 8004326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800432a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	441a      	add	r2, r3
 800433a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800433c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004340:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004344:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800434c:	b29b      	uxth	r3, r3
 800434e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	b29b      	uxth	r3, r3
 800435e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004366:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	441a      	add	r2, r3
 8004372:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004374:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004378:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800437c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004384:	b29b      	uxth	r3, r3
 8004386:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4413      	add	r3, r2
 8004392:	881b      	ldrh	r3, [r3, #0]
 8004394:	b29b      	uxth	r3, r3
 8004396:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800439a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800439e:	847b      	strh	r3, [r7, #34]	; 0x22
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	441a      	add	r2, r3
 80043aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80043ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043bc:	b29b      	uxth	r3, r3
 80043be:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3734      	adds	r7, #52	; 0x34
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bc80      	pop	{r7}
 80043ca:	4770      	bx	lr

080043cc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b0c4      	sub	sp, #272	; 0x110
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	1d3b      	adds	r3, r7, #4
 80043d4:	6018      	str	r0, [r3, #0]
 80043d6:	463b      	mov	r3, r7
 80043d8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043da:	463b      	mov	r3, r7
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	785b      	ldrb	r3, [r3, #1]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	f040 8557 	bne.w	8004e94 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80043e6:	463b      	mov	r3, r7
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	699a      	ldr	r2, [r3, #24]
 80043ec:	463b      	mov	r3, r7
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d905      	bls.n	8004402 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80043f6:	463b      	mov	r3, r7
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004400:	e004      	b.n	800440c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004402:	463b      	mov	r3, r7
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800440c:	463b      	mov	r3, r7
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	7b1b      	ldrb	r3, [r3, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d12c      	bne.n	8004470 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004416:	463b      	mov	r3, r7
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6959      	ldr	r1, [r3, #20]
 800441c:	463b      	mov	r3, r7
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	88da      	ldrh	r2, [r3, #6]
 8004422:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004426:	b29b      	uxth	r3, r3
 8004428:	1d38      	adds	r0, r7, #4
 800442a:	6800      	ldr	r0, [r0, #0]
 800442c:	f001 fa2c 	bl	8005888 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004430:	1d3b      	adds	r3, r7, #4
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	617b      	str	r3, [r7, #20]
 8004436:	1d3b      	adds	r3, r7, #4
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800443e:	b29b      	uxth	r3, r3
 8004440:	461a      	mov	r2, r3
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	4413      	add	r3, r2
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	463b      	mov	r3, r7
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	011a      	lsls	r2, r3, #4
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	4413      	add	r3, r2
 8004454:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004458:	f107 0310 	add.w	r3, r7, #16
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004462:	b29a      	uxth	r2, r3
 8004464:	f107 0310 	add.w	r3, r7, #16
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	801a      	strh	r2, [r3, #0]
 800446c:	f000 bcdd 	b.w	8004e2a <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004470:	463b      	mov	r3, r7
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	78db      	ldrb	r3, [r3, #3]
 8004476:	2b02      	cmp	r3, #2
 8004478:	f040 8347 	bne.w	8004b0a <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800447c:	463b      	mov	r3, r7
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6a1a      	ldr	r2, [r3, #32]
 8004482:	463b      	mov	r3, r7
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	429a      	cmp	r2, r3
 800448a:	f240 82eb 	bls.w	8004a64 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800448e:	1d3b      	adds	r3, r7, #4
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	463b      	mov	r3, r7
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4413      	add	r3, r2
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	b29b      	uxth	r3, r3
 80044a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80044ac:	1d3b      	adds	r3, r7, #4
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	463b      	mov	r3, r7
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	441a      	add	r2, r3
 80044ba:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80044be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044c6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80044ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80044d2:	463b      	mov	r3, r7
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6a1a      	ldr	r2, [r3, #32]
 80044d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044dc:	1ad2      	subs	r2, r2, r3
 80044de:	463b      	mov	r3, r7
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80044e4:	1d3b      	adds	r3, r7, #4
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	463b      	mov	r3, r7
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4413      	add	r3, r2
 80044f2:	881b      	ldrh	r3, [r3, #0]
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 8159 	beq.w	80047b2 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004500:	1d3b      	adds	r3, r7, #4
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	637b      	str	r3, [r7, #52]	; 0x34
 8004506:	463b      	mov	r3, r7
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	785b      	ldrb	r3, [r3, #1]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d164      	bne.n	80045da <USB_EPStartXfer+0x20e>
 8004510:	1d3b      	adds	r3, r7, #4
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004516:	1d3b      	adds	r3, r7, #4
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800451e:	b29b      	uxth	r3, r3
 8004520:	461a      	mov	r2, r3
 8004522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004524:	4413      	add	r3, r2
 8004526:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004528:	463b      	mov	r3, r7
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	011a      	lsls	r2, r3, #4
 8004530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004532:	4413      	add	r3, r2
 8004534:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004538:	62bb      	str	r3, [r7, #40]	; 0x28
 800453a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800453e:	2b00      	cmp	r3, #0
 8004540:	d112      	bne.n	8004568 <USB_EPStartXfer+0x19c>
 8004542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	b29b      	uxth	r3, r3
 8004548:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800454c:	b29a      	uxth	r2, r3
 800454e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004550:	801a      	strh	r2, [r3, #0]
 8004552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	b29b      	uxth	r3, r3
 8004558:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800455c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004560:	b29a      	uxth	r2, r3
 8004562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004564:	801a      	strh	r2, [r3, #0]
 8004566:	e054      	b.n	8004612 <USB_EPStartXfer+0x246>
 8004568:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800456c:	2b3e      	cmp	r3, #62	; 0x3e
 800456e:	d817      	bhi.n	80045a0 <USB_EPStartXfer+0x1d4>
 8004570:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004574:	085b      	lsrs	r3, r3, #1
 8004576:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800457a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d004      	beq.n	8004590 <USB_EPStartXfer+0x1c4>
 8004586:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800458a:	3301      	adds	r3, #1
 800458c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004590:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004594:	b29b      	uxth	r3, r3
 8004596:	029b      	lsls	r3, r3, #10
 8004598:	b29a      	uxth	r2, r3
 800459a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459c:	801a      	strh	r2, [r3, #0]
 800459e:	e038      	b.n	8004612 <USB_EPStartXfer+0x246>
 80045a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045a4:	095b      	lsrs	r3, r3, #5
 80045a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80045aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045ae:	f003 031f 	and.w	r3, r3, #31
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d104      	bne.n	80045c0 <USB_EPStartXfer+0x1f4>
 80045b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045ba:	3b01      	subs	r3, #1
 80045bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80045c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	029b      	lsls	r3, r3, #10
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d6:	801a      	strh	r2, [r3, #0]
 80045d8:	e01b      	b.n	8004612 <USB_EPStartXfer+0x246>
 80045da:	463b      	mov	r3, r7
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	785b      	ldrb	r3, [r3, #1]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d116      	bne.n	8004612 <USB_EPStartXfer+0x246>
 80045e4:	1d3b      	adds	r3, r7, #4
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	461a      	mov	r2, r3
 80045f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045f2:	4413      	add	r3, r2
 80045f4:	637b      	str	r3, [r7, #52]	; 0x34
 80045f6:	463b      	mov	r3, r7
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	011a      	lsls	r2, r3, #4
 80045fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004600:	4413      	add	r3, r2
 8004602:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004606:	633b      	str	r3, [r7, #48]	; 0x30
 8004608:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800460c:	b29a      	uxth	r2, r3
 800460e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004610:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004612:	463b      	mov	r3, r7
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	895b      	ldrh	r3, [r3, #10]
 8004618:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800461c:	463b      	mov	r3, r7
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6959      	ldr	r1, [r3, #20]
 8004622:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004626:	b29b      	uxth	r3, r3
 8004628:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800462c:	1d38      	adds	r0, r7, #4
 800462e:	6800      	ldr	r0, [r0, #0]
 8004630:	f001 f92a 	bl	8005888 <USB_WritePMA>
            ep->xfer_buff += len;
 8004634:	463b      	mov	r3, r7
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695a      	ldr	r2, [r3, #20]
 800463a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800463e:	441a      	add	r2, r3
 8004640:	463b      	mov	r3, r7
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004646:	463b      	mov	r3, r7
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6a1a      	ldr	r2, [r3, #32]
 800464c:	463b      	mov	r3, r7
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	429a      	cmp	r2, r3
 8004654:	d909      	bls.n	800466a <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8004656:	463b      	mov	r3, r7
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	6a1a      	ldr	r2, [r3, #32]
 800465c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004660:	1ad2      	subs	r2, r2, r3
 8004662:	463b      	mov	r3, r7
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	621a      	str	r2, [r3, #32]
 8004668:	e008      	b.n	800467c <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800466a:	463b      	mov	r3, r7
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004674:	463b      	mov	r3, r7
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2200      	movs	r2, #0
 800467a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800467c:	463b      	mov	r3, r7
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	785b      	ldrb	r3, [r3, #1]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d164      	bne.n	8004750 <USB_EPStartXfer+0x384>
 8004686:	1d3b      	adds	r3, r7, #4
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	61fb      	str	r3, [r7, #28]
 800468c:	1d3b      	adds	r3, r7, #4
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004694:	b29b      	uxth	r3, r3
 8004696:	461a      	mov	r2, r3
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	4413      	add	r3, r2
 800469c:	61fb      	str	r3, [r7, #28]
 800469e:	463b      	mov	r3, r7
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	011a      	lsls	r2, r3, #4
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	4413      	add	r3, r2
 80046aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046ae:	61bb      	str	r3, [r7, #24]
 80046b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d112      	bne.n	80046de <USB_EPStartXfer+0x312>
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	b29b      	uxth	r3, r3
 80046be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	801a      	strh	r2, [r3, #0]
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	881b      	ldrh	r3, [r3, #0]
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	801a      	strh	r2, [r3, #0]
 80046dc:	e057      	b.n	800478e <USB_EPStartXfer+0x3c2>
 80046de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046e2:	2b3e      	cmp	r3, #62	; 0x3e
 80046e4:	d817      	bhi.n	8004716 <USB_EPStartXfer+0x34a>
 80046e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ea:	085b      	lsrs	r3, r3, #1
 80046ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80046f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d004      	beq.n	8004706 <USB_EPStartXfer+0x33a>
 80046fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004700:	3301      	adds	r3, #1
 8004702:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004706:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800470a:	b29b      	uxth	r3, r3
 800470c:	029b      	lsls	r3, r3, #10
 800470e:	b29a      	uxth	r2, r3
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	801a      	strh	r2, [r3, #0]
 8004714:	e03b      	b.n	800478e <USB_EPStartXfer+0x3c2>
 8004716:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800471a:	095b      	lsrs	r3, r3, #5
 800471c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004720:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004724:	f003 031f 	and.w	r3, r3, #31
 8004728:	2b00      	cmp	r3, #0
 800472a:	d104      	bne.n	8004736 <USB_EPStartXfer+0x36a>
 800472c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004730:	3b01      	subs	r3, #1
 8004732:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004736:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800473a:	b29b      	uxth	r3, r3
 800473c:	029b      	lsls	r3, r3, #10
 800473e:	b29b      	uxth	r3, r3
 8004740:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004744:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004748:	b29a      	uxth	r2, r3
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	801a      	strh	r2, [r3, #0]
 800474e:	e01e      	b.n	800478e <USB_EPStartXfer+0x3c2>
 8004750:	463b      	mov	r3, r7
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	785b      	ldrb	r3, [r3, #1]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d119      	bne.n	800478e <USB_EPStartXfer+0x3c2>
 800475a:	1d3b      	adds	r3, r7, #4
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	627b      	str	r3, [r7, #36]	; 0x24
 8004760:	1d3b      	adds	r3, r7, #4
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004768:	b29b      	uxth	r3, r3
 800476a:	461a      	mov	r2, r3
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	4413      	add	r3, r2
 8004770:	627b      	str	r3, [r7, #36]	; 0x24
 8004772:	463b      	mov	r3, r7
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	011a      	lsls	r2, r3, #4
 800477a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477c:	4413      	add	r3, r2
 800477e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004782:	623b      	str	r3, [r7, #32]
 8004784:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004788:	b29a      	uxth	r2, r3
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800478e:	463b      	mov	r3, r7
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	891b      	ldrh	r3, [r3, #8]
 8004794:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004798:	463b      	mov	r3, r7
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6959      	ldr	r1, [r3, #20]
 800479e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80047a8:	1d38      	adds	r0, r7, #4
 80047aa:	6800      	ldr	r0, [r0, #0]
 80047ac:	f001 f86c 	bl	8005888 <USB_WritePMA>
 80047b0:	e33b      	b.n	8004e2a <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80047b2:	463b      	mov	r3, r7
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	785b      	ldrb	r3, [r3, #1]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d164      	bne.n	8004886 <USB_EPStartXfer+0x4ba>
 80047bc:	1d3b      	adds	r3, r7, #4
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047c2:	1d3b      	adds	r3, r7, #4
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	461a      	mov	r2, r3
 80047ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d0:	4413      	add	r3, r2
 80047d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047d4:	463b      	mov	r3, r7
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	011a      	lsls	r2, r3, #4
 80047dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047de:	4413      	add	r3, r2
 80047e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80047e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d112      	bne.n	8004814 <USB_EPStartXfer+0x448>
 80047ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047fc:	801a      	strh	r2, [r3, #0]
 80047fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	b29b      	uxth	r3, r3
 8004804:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004808:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800480c:	b29a      	uxth	r2, r3
 800480e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004810:	801a      	strh	r2, [r3, #0]
 8004812:	e057      	b.n	80048c4 <USB_EPStartXfer+0x4f8>
 8004814:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004818:	2b3e      	cmp	r3, #62	; 0x3e
 800481a:	d817      	bhi.n	800484c <USB_EPStartXfer+0x480>
 800481c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004820:	085b      	lsrs	r3, r3, #1
 8004822:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004826:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	d004      	beq.n	800483c <USB_EPStartXfer+0x470>
 8004832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004836:	3301      	adds	r3, #1
 8004838:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800483c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004840:	b29b      	uxth	r3, r3
 8004842:	029b      	lsls	r3, r3, #10
 8004844:	b29a      	uxth	r2, r3
 8004846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004848:	801a      	strh	r2, [r3, #0]
 800484a:	e03b      	b.n	80048c4 <USB_EPStartXfer+0x4f8>
 800484c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004850:	095b      	lsrs	r3, r3, #5
 8004852:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004856:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800485a:	f003 031f 	and.w	r3, r3, #31
 800485e:	2b00      	cmp	r3, #0
 8004860:	d104      	bne.n	800486c <USB_EPStartXfer+0x4a0>
 8004862:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004866:	3b01      	subs	r3, #1
 8004868:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800486c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004870:	b29b      	uxth	r3, r3
 8004872:	029b      	lsls	r3, r3, #10
 8004874:	b29b      	uxth	r3, r3
 8004876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800487a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800487e:	b29a      	uxth	r2, r3
 8004880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004882:	801a      	strh	r2, [r3, #0]
 8004884:	e01e      	b.n	80048c4 <USB_EPStartXfer+0x4f8>
 8004886:	463b      	mov	r3, r7
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	785b      	ldrb	r3, [r3, #1]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d119      	bne.n	80048c4 <USB_EPStartXfer+0x4f8>
 8004890:	1d3b      	adds	r3, r7, #4
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	657b      	str	r3, [r7, #84]	; 0x54
 8004896:	1d3b      	adds	r3, r7, #4
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800489e:	b29b      	uxth	r3, r3
 80048a0:	461a      	mov	r2, r3
 80048a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048a4:	4413      	add	r3, r2
 80048a6:	657b      	str	r3, [r7, #84]	; 0x54
 80048a8:	463b      	mov	r3, r7
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	011a      	lsls	r2, r3, #4
 80048b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048b2:	4413      	add	r3, r2
 80048b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048b8:	653b      	str	r3, [r7, #80]	; 0x50
 80048ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048be:	b29a      	uxth	r2, r3
 80048c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048c2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80048c4:	463b      	mov	r3, r7
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	891b      	ldrh	r3, [r3, #8]
 80048ca:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80048ce:	463b      	mov	r3, r7
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6959      	ldr	r1, [r3, #20]
 80048d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048d8:	b29b      	uxth	r3, r3
 80048da:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80048de:	1d38      	adds	r0, r7, #4
 80048e0:	6800      	ldr	r0, [r0, #0]
 80048e2:	f000 ffd1 	bl	8005888 <USB_WritePMA>
            ep->xfer_buff += len;
 80048e6:	463b      	mov	r3, r7
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	695a      	ldr	r2, [r3, #20]
 80048ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048f0:	441a      	add	r2, r3
 80048f2:	463b      	mov	r3, r7
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80048f8:	463b      	mov	r3, r7
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6a1a      	ldr	r2, [r3, #32]
 80048fe:	463b      	mov	r3, r7
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	429a      	cmp	r2, r3
 8004906:	d909      	bls.n	800491c <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8004908:	463b      	mov	r3, r7
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6a1a      	ldr	r2, [r3, #32]
 800490e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004912:	1ad2      	subs	r2, r2, r3
 8004914:	463b      	mov	r3, r7
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	621a      	str	r2, [r3, #32]
 800491a:	e008      	b.n	800492e <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 800491c:	463b      	mov	r3, r7
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004926:	463b      	mov	r3, r7
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2200      	movs	r2, #0
 800492c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800492e:	1d3b      	adds	r3, r7, #4
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	647b      	str	r3, [r7, #68]	; 0x44
 8004934:	463b      	mov	r3, r7
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	785b      	ldrb	r3, [r3, #1]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d164      	bne.n	8004a08 <USB_EPStartXfer+0x63c>
 800493e:	1d3b      	adds	r3, r7, #4
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004944:	1d3b      	adds	r3, r7, #4
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800494c:	b29b      	uxth	r3, r3
 800494e:	461a      	mov	r2, r3
 8004950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004952:	4413      	add	r3, r2
 8004954:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004956:	463b      	mov	r3, r7
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	011a      	lsls	r2, r3, #4
 800495e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004960:	4413      	add	r3, r2
 8004962:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004966:	63bb      	str	r3, [r7, #56]	; 0x38
 8004968:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800496c:	2b00      	cmp	r3, #0
 800496e:	d112      	bne.n	8004996 <USB_EPStartXfer+0x5ca>
 8004970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	b29b      	uxth	r3, r3
 8004976:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800497a:	b29a      	uxth	r2, r3
 800497c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497e:	801a      	strh	r2, [r3, #0]
 8004980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004982:	881b      	ldrh	r3, [r3, #0]
 8004984:	b29b      	uxth	r3, r3
 8004986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800498a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800498e:	b29a      	uxth	r2, r3
 8004990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004992:	801a      	strh	r2, [r3, #0]
 8004994:	e054      	b.n	8004a40 <USB_EPStartXfer+0x674>
 8004996:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800499a:	2b3e      	cmp	r3, #62	; 0x3e
 800499c:	d817      	bhi.n	80049ce <USB_EPStartXfer+0x602>
 800499e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049a2:	085b      	lsrs	r3, r3, #1
 80049a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80049a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d004      	beq.n	80049be <USB_EPStartXfer+0x5f2>
 80049b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049b8:	3301      	adds	r3, #1
 80049ba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80049be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	029b      	lsls	r3, r3, #10
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ca:	801a      	strh	r2, [r3, #0]
 80049cc:	e038      	b.n	8004a40 <USB_EPStartXfer+0x674>
 80049ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049d2:	095b      	lsrs	r3, r3, #5
 80049d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80049d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049dc:	f003 031f 	and.w	r3, r3, #31
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d104      	bne.n	80049ee <USB_EPStartXfer+0x622>
 80049e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049e8:	3b01      	subs	r3, #1
 80049ea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80049ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	029b      	lsls	r3, r3, #10
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a04:	801a      	strh	r2, [r3, #0]
 8004a06:	e01b      	b.n	8004a40 <USB_EPStartXfer+0x674>
 8004a08:	463b      	mov	r3, r7
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	785b      	ldrb	r3, [r3, #1]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d116      	bne.n	8004a40 <USB_EPStartXfer+0x674>
 8004a12:	1d3b      	adds	r3, r7, #4
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a20:	4413      	add	r3, r2
 8004a22:	647b      	str	r3, [r7, #68]	; 0x44
 8004a24:	463b      	mov	r3, r7
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	011a      	lsls	r2, r3, #4
 8004a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a2e:	4413      	add	r3, r2
 8004a30:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a34:	643b      	str	r3, [r7, #64]	; 0x40
 8004a36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a3e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004a40:	463b      	mov	r3, r7
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	895b      	ldrh	r3, [r3, #10]
 8004a46:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a4a:	463b      	mov	r3, r7
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6959      	ldr	r1, [r3, #20]
 8004a50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004a5a:	1d38      	adds	r0, r7, #4
 8004a5c:	6800      	ldr	r0, [r0, #0]
 8004a5e:	f000 ff13 	bl	8005888 <USB_WritePMA>
 8004a62:	e1e2      	b.n	8004e2a <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004a64:	463b      	mov	r3, r7
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004a6e:	1d3b      	adds	r3, r7, #4
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	463b      	mov	r3, r7
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4413      	add	r3, r2
 8004a7c:	881b      	ldrh	r3, [r3, #0]
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a88:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004a8c:	1d3b      	adds	r3, r7, #4
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	463b      	mov	r3, r7
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	441a      	add	r2, r3
 8004a9a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004a9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004ab2:	1d3b      	adds	r3, r7, #4
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	663b      	str	r3, [r7, #96]	; 0x60
 8004ab8:	1d3b      	adds	r3, r7, #4
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ac6:	4413      	add	r3, r2
 8004ac8:	663b      	str	r3, [r7, #96]	; 0x60
 8004aca:	463b      	mov	r3, r7
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	011a      	lsls	r2, r3, #4
 8004ad2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ada:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004adc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ae4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004ae6:	463b      	mov	r3, r7
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	891b      	ldrh	r3, [r3, #8]
 8004aec:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004af0:	463b      	mov	r3, r7
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6959      	ldr	r1, [r3, #20]
 8004af6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004b00:	1d38      	adds	r0, r7, #4
 8004b02:	6800      	ldr	r0, [r0, #0]
 8004b04:	f000 fec0 	bl	8005888 <USB_WritePMA>
 8004b08:	e18f      	b.n	8004e2a <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004b0a:	1d3b      	adds	r3, r7, #4
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	463b      	mov	r3, r7
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	881b      	ldrh	r3, [r3, #0]
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f000 808f 	beq.w	8004c44 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004b26:	1d3b      	adds	r3, r7, #4
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b2c:	463b      	mov	r3, r7
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	785b      	ldrb	r3, [r3, #1]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d164      	bne.n	8004c00 <USB_EPStartXfer+0x834>
 8004b36:	1d3b      	adds	r3, r7, #4
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	673b      	str	r3, [r7, #112]	; 0x70
 8004b3c:	1d3b      	adds	r3, r7, #4
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	461a      	mov	r2, r3
 8004b48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b4a:	4413      	add	r3, r2
 8004b4c:	673b      	str	r3, [r7, #112]	; 0x70
 8004b4e:	463b      	mov	r3, r7
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	011a      	lsls	r2, r3, #4
 8004b56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b58:	4413      	add	r3, r2
 8004b5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d112      	bne.n	8004b8e <USB_EPStartXfer+0x7c2>
 8004b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b6a:	881b      	ldrh	r3, [r3, #0]
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b76:	801a      	strh	r2, [r3, #0]
 8004b78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b8a:	801a      	strh	r2, [r3, #0]
 8004b8c:	e054      	b.n	8004c38 <USB_EPStartXfer+0x86c>
 8004b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b92:	2b3e      	cmp	r3, #62	; 0x3e
 8004b94:	d817      	bhi.n	8004bc6 <USB_EPStartXfer+0x7fa>
 8004b96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b9a:	085b      	lsrs	r3, r3, #1
 8004b9c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d004      	beq.n	8004bb6 <USB_EPStartXfer+0x7ea>
 8004bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	029b      	lsls	r3, r3, #10
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc2:	801a      	strh	r2, [r3, #0]
 8004bc4:	e038      	b.n	8004c38 <USB_EPStartXfer+0x86c>
 8004bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bca:	095b      	lsrs	r3, r3, #5
 8004bcc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bd4:	f003 031f 	and.w	r3, r3, #31
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d104      	bne.n	8004be6 <USB_EPStartXfer+0x81a>
 8004bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be0:	3b01      	subs	r3, #1
 8004be2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	029b      	lsls	r3, r3, #10
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bfc:	801a      	strh	r2, [r3, #0]
 8004bfe:	e01b      	b.n	8004c38 <USB_EPStartXfer+0x86c>
 8004c00:	463b      	mov	r3, r7
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	785b      	ldrb	r3, [r3, #1]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d116      	bne.n	8004c38 <USB_EPStartXfer+0x86c>
 8004c0a:	1d3b      	adds	r3, r7, #4
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	461a      	mov	r2, r3
 8004c16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c18:	4413      	add	r3, r2
 8004c1a:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c1c:	463b      	mov	r3, r7
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	011a      	lsls	r2, r3, #4
 8004c24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c26:	4413      	add	r3, r2
 8004c28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c2c:	677b      	str	r3, [r7, #116]	; 0x74
 8004c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c36:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004c38:	463b      	mov	r3, r7
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	895b      	ldrh	r3, [r3, #10]
 8004c3e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8004c42:	e097      	b.n	8004d74 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c44:	463b      	mov	r3, r7
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	785b      	ldrb	r3, [r3, #1]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d168      	bne.n	8004d20 <USB_EPStartXfer+0x954>
 8004c4e:	1d3b      	adds	r3, r7, #4
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c56:	1d3b      	adds	r3, r7, #4
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	461a      	mov	r2, r3
 8004c62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c66:	4413      	add	r3, r2
 8004c68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c6c:	463b      	mov	r3, r7
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	011a      	lsls	r2, r3, #4
 8004c74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c78:	4413      	add	r3, r2
 8004c7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c7e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d112      	bne.n	8004cae <USB_EPStartXfer+0x8e2>
 8004c88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c8a:	881b      	ldrh	r3, [r3, #0]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c96:	801a      	strh	r2, [r3, #0]
 8004c98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c9a:	881b      	ldrh	r3, [r3, #0]
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004caa:	801a      	strh	r2, [r3, #0]
 8004cac:	e05d      	b.n	8004d6a <USB_EPStartXfer+0x99e>
 8004cae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cb2:	2b3e      	cmp	r3, #62	; 0x3e
 8004cb4:	d817      	bhi.n	8004ce6 <USB_EPStartXfer+0x91a>
 8004cb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cba:	085b      	lsrs	r3, r3, #1
 8004cbc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004cc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d004      	beq.n	8004cd6 <USB_EPStartXfer+0x90a>
 8004ccc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004cd6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	029b      	lsls	r3, r3, #10
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ce2:	801a      	strh	r2, [r3, #0]
 8004ce4:	e041      	b.n	8004d6a <USB_EPStartXfer+0x99e>
 8004ce6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cea:	095b      	lsrs	r3, r3, #5
 8004cec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004cf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cf4:	f003 031f 	and.w	r3, r3, #31
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d104      	bne.n	8004d06 <USB_EPStartXfer+0x93a>
 8004cfc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004d00:	3b01      	subs	r3, #1
 8004d02:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004d06:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	029b      	lsls	r3, r3, #10
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d1c:	801a      	strh	r2, [r3, #0]
 8004d1e:	e024      	b.n	8004d6a <USB_EPStartXfer+0x99e>
 8004d20:	463b      	mov	r3, r7
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	785b      	ldrb	r3, [r3, #1]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d11f      	bne.n	8004d6a <USB_EPStartXfer+0x99e>
 8004d2a:	1d3b      	adds	r3, r7, #4
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d32:	1d3b      	adds	r3, r7, #4
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d42:	4413      	add	r3, r2
 8004d44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d48:	463b      	mov	r3, r7
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	011a      	lsls	r2, r3, #4
 8004d50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d54:	4413      	add	r3, r2
 8004d56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d68:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004d6a:	463b      	mov	r3, r7
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	891b      	ldrh	r3, [r3, #8]
 8004d70:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d74:	463b      	mov	r3, r7
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6959      	ldr	r1, [r3, #20]
 8004d7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004d84:	1d38      	adds	r0, r7, #4
 8004d86:	6800      	ldr	r0, [r0, #0]
 8004d88:	f000 fd7e 	bl	8005888 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004d8c:	463b      	mov	r3, r7
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	785b      	ldrb	r3, [r3, #1]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d122      	bne.n	8004ddc <USB_EPStartXfer+0xa10>
 8004d96:	1d3b      	adds	r3, r7, #4
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	463b      	mov	r3, r7
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	881b      	ldrh	r3, [r3, #0]
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8004db4:	1d3b      	adds	r3, r7, #4
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	463b      	mov	r3, r7
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	441a      	add	r2, r3
 8004dc2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8004dc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dd2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	8013      	strh	r3, [r2, #0]
 8004dda:	e026      	b.n	8004e2a <USB_EPStartXfer+0xa5e>
 8004ddc:	463b      	mov	r3, r7
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	785b      	ldrb	r3, [r3, #1]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d121      	bne.n	8004e2a <USB_EPStartXfer+0xa5e>
 8004de6:	1d3b      	adds	r3, r7, #4
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	463b      	mov	r3, r7
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e00:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8004e04:	1d3b      	adds	r3, r7, #4
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	463b      	mov	r3, r7
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	441a      	add	r2, r3
 8004e12:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004e16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004e2a:	1d3b      	adds	r3, r7, #4
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	463b      	mov	r3, r7
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	881b      	ldrh	r3, [r3, #0]
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	f107 020e 	add.w	r2, r7, #14
 8004e40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e48:	8013      	strh	r3, [r2, #0]
 8004e4a:	f107 030e 	add.w	r3, r7, #14
 8004e4e:	f107 020e 	add.w	r2, r7, #14
 8004e52:	8812      	ldrh	r2, [r2, #0]
 8004e54:	f082 0210 	eor.w	r2, r2, #16
 8004e58:	801a      	strh	r2, [r3, #0]
 8004e5a:	f107 030e 	add.w	r3, r7, #14
 8004e5e:	f107 020e 	add.w	r2, r7, #14
 8004e62:	8812      	ldrh	r2, [r2, #0]
 8004e64:	f082 0220 	eor.w	r2, r2, #32
 8004e68:	801a      	strh	r2, [r3, #0]
 8004e6a:	1d3b      	adds	r3, r7, #4
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	463b      	mov	r3, r7
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	441a      	add	r2, r3
 8004e78:	f107 030e 	add.w	r3, r7, #14
 8004e7c:	881b      	ldrh	r3, [r3, #0]
 8004e7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	8013      	strh	r3, [r2, #0]
 8004e92:	e3b5      	b.n	8005600 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004e94:	463b      	mov	r3, r7
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	7b1b      	ldrb	r3, [r3, #12]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f040 8090 	bne.w	8004fc0 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004ea0:	463b      	mov	r3, r7
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	699a      	ldr	r2, [r3, #24]
 8004ea6:	463b      	mov	r3, r7
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d90e      	bls.n	8004ece <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8004eb0:	463b      	mov	r3, r7
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8004eba:	463b      	mov	r3, r7
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	699a      	ldr	r2, [r3, #24]
 8004ec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ec4:	1ad2      	subs	r2, r2, r3
 8004ec6:	463b      	mov	r3, r7
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	619a      	str	r2, [r3, #24]
 8004ecc:	e008      	b.n	8004ee0 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8004ece:	463b      	mov	r3, r7
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8004ed8:	463b      	mov	r3, r7
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2200      	movs	r2, #0
 8004ede:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004ee0:	1d3b      	adds	r3, r7, #4
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ee8:	1d3b      	adds	r3, r7, #4
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004ef8:	4413      	add	r3, r2
 8004efa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004efe:	463b      	mov	r3, r7
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	011a      	lsls	r2, r3, #4
 8004f06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d116      	bne.n	8004f4a <USB_EPStartXfer+0xb7e>
 8004f1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f2e:	801a      	strh	r2, [r3, #0]
 8004f30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f46:	801a      	strh	r2, [r3, #0]
 8004f48:	e32c      	b.n	80055a4 <USB_EPStartXfer+0x11d8>
 8004f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f4e:	2b3e      	cmp	r3, #62	; 0x3e
 8004f50:	d818      	bhi.n	8004f84 <USB_EPStartXfer+0xbb8>
 8004f52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f56:	085b      	lsrs	r3, r3, #1
 8004f58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d004      	beq.n	8004f72 <USB_EPStartXfer+0xba6>
 8004f68:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004f72:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	029b      	lsls	r3, r3, #10
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f80:	801a      	strh	r2, [r3, #0]
 8004f82:	e30f      	b.n	80055a4 <USB_EPStartXfer+0x11d8>
 8004f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f88:	095b      	lsrs	r3, r3, #5
 8004f8a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004f8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f92:	f003 031f 	and.w	r3, r3, #31
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d104      	bne.n	8004fa4 <USB_EPStartXfer+0xbd8>
 8004f9a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004fa4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	029b      	lsls	r3, r3, #10
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004fbc:	801a      	strh	r2, [r3, #0]
 8004fbe:	e2f1      	b.n	80055a4 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004fc0:	463b      	mov	r3, r7
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	78db      	ldrb	r3, [r3, #3]
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	f040 818f 	bne.w	80052ea <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004fcc:	463b      	mov	r3, r7
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	785b      	ldrb	r3, [r3, #1]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d175      	bne.n	80050c2 <USB_EPStartXfer+0xcf6>
 8004fd6:	1d3b      	adds	r3, r7, #4
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fde:	1d3b      	adds	r3, r7, #4
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	461a      	mov	r2, r3
 8004fea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004fee:	4413      	add	r3, r2
 8004ff0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ff4:	463b      	mov	r3, r7
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	011a      	lsls	r2, r3, #4
 8004ffc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005000:	4413      	add	r3, r2
 8005002:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005006:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800500a:	463b      	mov	r3, r7
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d116      	bne.n	8005042 <USB_EPStartXfer+0xc76>
 8005014:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005018:	881b      	ldrh	r3, [r3, #0]
 800501a:	b29b      	uxth	r3, r3
 800501c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005020:	b29a      	uxth	r2, r3
 8005022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005026:	801a      	strh	r2, [r3, #0]
 8005028:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	b29b      	uxth	r3, r3
 8005030:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005034:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005038:	b29a      	uxth	r2, r3
 800503a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800503e:	801a      	strh	r2, [r3, #0]
 8005040:	e065      	b.n	800510e <USB_EPStartXfer+0xd42>
 8005042:	463b      	mov	r3, r7
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	2b3e      	cmp	r3, #62	; 0x3e
 800504a:	d81a      	bhi.n	8005082 <USB_EPStartXfer+0xcb6>
 800504c:	463b      	mov	r3, r7
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	085b      	lsrs	r3, r3, #1
 8005054:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005058:	463b      	mov	r3, r7
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	2b00      	cmp	r3, #0
 8005064:	d004      	beq.n	8005070 <USB_EPStartXfer+0xca4>
 8005066:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800506a:	3301      	adds	r3, #1
 800506c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005070:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005074:	b29b      	uxth	r3, r3
 8005076:	029b      	lsls	r3, r3, #10
 8005078:	b29a      	uxth	r2, r3
 800507a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800507e:	801a      	strh	r2, [r3, #0]
 8005080:	e045      	b.n	800510e <USB_EPStartXfer+0xd42>
 8005082:	463b      	mov	r3, r7
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	095b      	lsrs	r3, r3, #5
 800508a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800508e:	463b      	mov	r3, r7
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	f003 031f 	and.w	r3, r3, #31
 8005098:	2b00      	cmp	r3, #0
 800509a:	d104      	bne.n	80050a6 <USB_EPStartXfer+0xcda>
 800509c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80050a0:	3b01      	subs	r3, #1
 80050a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	029b      	lsls	r3, r3, #10
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050be:	801a      	strh	r2, [r3, #0]
 80050c0:	e025      	b.n	800510e <USB_EPStartXfer+0xd42>
 80050c2:	463b      	mov	r3, r7
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	785b      	ldrb	r3, [r3, #1]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d120      	bne.n	800510e <USB_EPStartXfer+0xd42>
 80050cc:	1d3b      	adds	r3, r7, #4
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050d4:	1d3b      	adds	r3, r7, #4
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050dc:	b29b      	uxth	r3, r3
 80050de:	461a      	mov	r2, r3
 80050e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80050e4:	4413      	add	r3, r2
 80050e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050ea:	463b      	mov	r3, r7
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	011a      	lsls	r2, r3, #4
 80050f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80050f6:	4413      	add	r3, r2
 80050f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005100:	463b      	mov	r3, r7
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	b29a      	uxth	r2, r3
 8005108:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800510c:	801a      	strh	r2, [r3, #0]
 800510e:	1d3b      	adds	r3, r7, #4
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005116:	463b      	mov	r3, r7
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	785b      	ldrb	r3, [r3, #1]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d175      	bne.n	800520c <USB_EPStartXfer+0xe40>
 8005120:	1d3b      	adds	r3, r7, #4
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005128:	1d3b      	adds	r3, r7, #4
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005130:	b29b      	uxth	r3, r3
 8005132:	461a      	mov	r2, r3
 8005134:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005138:	4413      	add	r3, r2
 800513a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800513e:	463b      	mov	r3, r7
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	011a      	lsls	r2, r3, #4
 8005146:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800514a:	4413      	add	r3, r2
 800514c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005150:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005154:	463b      	mov	r3, r7
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d116      	bne.n	800518c <USB_EPStartXfer+0xdc0>
 800515e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005162:	881b      	ldrh	r3, [r3, #0]
 8005164:	b29b      	uxth	r3, r3
 8005166:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800516a:	b29a      	uxth	r2, r3
 800516c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005170:	801a      	strh	r2, [r3, #0]
 8005172:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005176:	881b      	ldrh	r3, [r3, #0]
 8005178:	b29b      	uxth	r3, r3
 800517a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800517e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005182:	b29a      	uxth	r2, r3
 8005184:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005188:	801a      	strh	r2, [r3, #0]
 800518a:	e061      	b.n	8005250 <USB_EPStartXfer+0xe84>
 800518c:	463b      	mov	r3, r7
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	2b3e      	cmp	r3, #62	; 0x3e
 8005194:	d81a      	bhi.n	80051cc <USB_EPStartXfer+0xe00>
 8005196:	463b      	mov	r3, r7
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	085b      	lsrs	r3, r3, #1
 800519e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80051a2:	463b      	mov	r3, r7
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d004      	beq.n	80051ba <USB_EPStartXfer+0xdee>
 80051b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051b4:	3301      	adds	r3, #1
 80051b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80051ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051be:	b29b      	uxth	r3, r3
 80051c0:	029b      	lsls	r3, r3, #10
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051c8:	801a      	strh	r2, [r3, #0]
 80051ca:	e041      	b.n	8005250 <USB_EPStartXfer+0xe84>
 80051cc:	463b      	mov	r3, r7
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	095b      	lsrs	r3, r3, #5
 80051d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80051d8:	463b      	mov	r3, r7
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	f003 031f 	and.w	r3, r3, #31
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d104      	bne.n	80051f0 <USB_EPStartXfer+0xe24>
 80051e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ea:	3b01      	subs	r3, #1
 80051ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80051f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	029b      	lsls	r3, r3, #10
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005202:	b29a      	uxth	r2, r3
 8005204:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005208:	801a      	strh	r2, [r3, #0]
 800520a:	e021      	b.n	8005250 <USB_EPStartXfer+0xe84>
 800520c:	463b      	mov	r3, r7
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	785b      	ldrb	r3, [r3, #1]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d11c      	bne.n	8005250 <USB_EPStartXfer+0xe84>
 8005216:	1d3b      	adds	r3, r7, #4
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800521e:	b29b      	uxth	r3, r3
 8005220:	461a      	mov	r2, r3
 8005222:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005226:	4413      	add	r3, r2
 8005228:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800522c:	463b      	mov	r3, r7
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	011a      	lsls	r2, r3, #4
 8005234:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005238:	4413      	add	r3, r2
 800523a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800523e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005242:	463b      	mov	r3, r7
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	b29a      	uxth	r2, r3
 800524a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800524e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005250:	463b      	mov	r3, r7
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	2b00      	cmp	r3, #0
 8005258:	f000 81a4 	beq.w	80055a4 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800525c:	1d3b      	adds	r3, r7, #4
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	463b      	mov	r3, r7
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4413      	add	r3, r2
 800526a:	881b      	ldrh	r3, [r3, #0]
 800526c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005270:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d005      	beq.n	8005288 <USB_EPStartXfer+0xebc>
 800527c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10d      	bne.n	80052a4 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005288:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800528c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005290:	2b00      	cmp	r3, #0
 8005292:	f040 8187 	bne.w	80055a4 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005296:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800529a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f040 8180 	bne.w	80055a4 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80052a4:	1d3b      	adds	r3, r7, #4
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	463b      	mov	r3, r7
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4413      	add	r3, r2
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052be:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80052c2:	1d3b      	adds	r3, r7, #4
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	463b      	mov	r3, r7
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	441a      	add	r2, r3
 80052d0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80052d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	8013      	strh	r3, [r2, #0]
 80052e8:	e15c      	b.n	80055a4 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80052ea:	463b      	mov	r3, r7
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	78db      	ldrb	r3, [r3, #3]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	f040 8155 	bne.w	80055a0 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80052f6:	463b      	mov	r3, r7
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	699a      	ldr	r2, [r3, #24]
 80052fc:	463b      	mov	r3, r7
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	429a      	cmp	r2, r3
 8005304:	d90e      	bls.n	8005324 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8005306:	463b      	mov	r3, r7
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8005310:	463b      	mov	r3, r7
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	699a      	ldr	r2, [r3, #24]
 8005316:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800531a:	1ad2      	subs	r2, r2, r3
 800531c:	463b      	mov	r3, r7
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	619a      	str	r2, [r3, #24]
 8005322:	e008      	b.n	8005336 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005324:	463b      	mov	r3, r7
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 800532e:	463b      	mov	r3, r7
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2200      	movs	r2, #0
 8005334:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005336:	463b      	mov	r3, r7
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	785b      	ldrb	r3, [r3, #1]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d16f      	bne.n	8005420 <USB_EPStartXfer+0x1054>
 8005340:	1d3b      	adds	r3, r7, #4
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005348:	1d3b      	adds	r3, r7, #4
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005350:	b29b      	uxth	r3, r3
 8005352:	461a      	mov	r2, r3
 8005354:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005358:	4413      	add	r3, r2
 800535a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800535e:	463b      	mov	r3, r7
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	011a      	lsls	r2, r3, #4
 8005366:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800536a:	4413      	add	r3, r2
 800536c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005370:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005374:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005378:	2b00      	cmp	r3, #0
 800537a:	d116      	bne.n	80053aa <USB_EPStartXfer+0xfde>
 800537c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005380:	881b      	ldrh	r3, [r3, #0]
 8005382:	b29b      	uxth	r3, r3
 8005384:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005388:	b29a      	uxth	r2, r3
 800538a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800538e:	801a      	strh	r2, [r3, #0]
 8005390:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	b29b      	uxth	r3, r3
 8005398:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800539c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053a6:	801a      	strh	r2, [r3, #0]
 80053a8:	e05f      	b.n	800546a <USB_EPStartXfer+0x109e>
 80053aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053ae:	2b3e      	cmp	r3, #62	; 0x3e
 80053b0:	d818      	bhi.n	80053e4 <USB_EPStartXfer+0x1018>
 80053b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053b6:	085b      	lsrs	r3, r3, #1
 80053b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d004      	beq.n	80053d2 <USB_EPStartXfer+0x1006>
 80053c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053cc:	3301      	adds	r3, #1
 80053ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	029b      	lsls	r3, r3, #10
 80053da:	b29a      	uxth	r2, r3
 80053dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053e0:	801a      	strh	r2, [r3, #0]
 80053e2:	e042      	b.n	800546a <USB_EPStartXfer+0x109e>
 80053e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053e8:	095b      	lsrs	r3, r3, #5
 80053ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053f2:	f003 031f 	and.w	r3, r3, #31
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d104      	bne.n	8005404 <USB_EPStartXfer+0x1038>
 80053fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053fe:	3b01      	subs	r3, #1
 8005400:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005408:	b29b      	uxth	r3, r3
 800540a:	029b      	lsls	r3, r3, #10
 800540c:	b29b      	uxth	r3, r3
 800540e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005412:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005416:	b29a      	uxth	r2, r3
 8005418:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800541c:	801a      	strh	r2, [r3, #0]
 800541e:	e024      	b.n	800546a <USB_EPStartXfer+0x109e>
 8005420:	463b      	mov	r3, r7
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	785b      	ldrb	r3, [r3, #1]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d11f      	bne.n	800546a <USB_EPStartXfer+0x109e>
 800542a:	1d3b      	adds	r3, r7, #4
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005432:	1d3b      	adds	r3, r7, #4
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800543a:	b29b      	uxth	r3, r3
 800543c:	461a      	mov	r2, r3
 800543e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005442:	4413      	add	r3, r2
 8005444:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005448:	463b      	mov	r3, r7
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	011a      	lsls	r2, r3, #4
 8005450:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005454:	4413      	add	r3, r2
 8005456:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800545a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800545e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005462:	b29a      	uxth	r2, r3
 8005464:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005468:	801a      	strh	r2, [r3, #0]
 800546a:	1d3b      	adds	r3, r7, #4
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005472:	463b      	mov	r3, r7
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	785b      	ldrb	r3, [r3, #1]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d16f      	bne.n	800555c <USB_EPStartXfer+0x1190>
 800547c:	1d3b      	adds	r3, r7, #4
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005484:	1d3b      	adds	r3, r7, #4
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800548c:	b29b      	uxth	r3, r3
 800548e:	461a      	mov	r2, r3
 8005490:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005494:	4413      	add	r3, r2
 8005496:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800549a:	463b      	mov	r3, r7
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	011a      	lsls	r2, r3, #4
 80054a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80054a6:	4413      	add	r3, r2
 80054a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80054b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d116      	bne.n	80054e6 <USB_EPStartXfer+0x111a>
 80054b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	b29b      	uxth	r3, r3
 80054c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80054ca:	801a      	strh	r2, [r3, #0]
 80054cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80054d0:	881b      	ldrh	r3, [r3, #0]
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054dc:	b29a      	uxth	r2, r3
 80054de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80054e2:	801a      	strh	r2, [r3, #0]
 80054e4:	e05e      	b.n	80055a4 <USB_EPStartXfer+0x11d8>
 80054e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054ea:	2b3e      	cmp	r3, #62	; 0x3e
 80054ec:	d818      	bhi.n	8005520 <USB_EPStartXfer+0x1154>
 80054ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054f2:	085b      	lsrs	r3, r3, #1
 80054f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80054f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b00      	cmp	r3, #0
 8005502:	d004      	beq.n	800550e <USB_EPStartXfer+0x1142>
 8005504:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005508:	3301      	adds	r3, #1
 800550a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800550e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005512:	b29b      	uxth	r3, r3
 8005514:	029b      	lsls	r3, r3, #10
 8005516:	b29a      	uxth	r2, r3
 8005518:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800551c:	801a      	strh	r2, [r3, #0]
 800551e:	e041      	b.n	80055a4 <USB_EPStartXfer+0x11d8>
 8005520:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005524:	095b      	lsrs	r3, r3, #5
 8005526:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800552a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800552e:	f003 031f 	and.w	r3, r3, #31
 8005532:	2b00      	cmp	r3, #0
 8005534:	d104      	bne.n	8005540 <USB_EPStartXfer+0x1174>
 8005536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800553a:	3b01      	subs	r3, #1
 800553c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005540:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005544:	b29b      	uxth	r3, r3
 8005546:	029b      	lsls	r3, r3, #10
 8005548:	b29b      	uxth	r3, r3
 800554a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800554e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005552:	b29a      	uxth	r2, r3
 8005554:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005558:	801a      	strh	r2, [r3, #0]
 800555a:	e023      	b.n	80055a4 <USB_EPStartXfer+0x11d8>
 800555c:	463b      	mov	r3, r7
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	785b      	ldrb	r3, [r3, #1]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d11e      	bne.n	80055a4 <USB_EPStartXfer+0x11d8>
 8005566:	1d3b      	adds	r3, r7, #4
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800556e:	b29b      	uxth	r3, r3
 8005570:	461a      	mov	r2, r3
 8005572:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005576:	4413      	add	r3, r2
 8005578:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800557c:	463b      	mov	r3, r7
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	011a      	lsls	r2, r3, #4
 8005584:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005588:	4413      	add	r3, r2
 800558a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800558e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005592:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005596:	b29a      	uxth	r2, r3
 8005598:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800559c:	801a      	strh	r2, [r3, #0]
 800559e:	e001      	b.n	80055a4 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e02e      	b.n	8005602 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80055a4:	1d3b      	adds	r3, r7, #4
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	463b      	mov	r3, r7
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	881b      	ldrh	r3, [r3, #0]
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055be:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80055c2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80055c6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80055ca:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80055ce:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80055d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80055d6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80055da:	1d3b      	adds	r3, r7, #4
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	463b      	mov	r3, r7
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	441a      	add	r2, r3
 80055e8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80055ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	785b      	ldrb	r3, [r3, #1]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d020      	beq.n	8005660 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	4413      	add	r3, r2
 8005628:	881b      	ldrh	r3, [r3, #0]
 800562a:	b29b      	uxth	r3, r3
 800562c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005634:	81bb      	strh	r3, [r7, #12]
 8005636:	89bb      	ldrh	r3, [r7, #12]
 8005638:	f083 0310 	eor.w	r3, r3, #16
 800563c:	81bb      	strh	r3, [r7, #12]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	441a      	add	r2, r3
 8005648:	89bb      	ldrh	r3, [r7, #12]
 800564a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800564e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800565a:	b29b      	uxth	r3, r3
 800565c:	8013      	strh	r3, [r2, #0]
 800565e:	e01f      	b.n	80056a0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	881b      	ldrh	r3, [r3, #0]
 800566c:	b29b      	uxth	r3, r3
 800566e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005676:	81fb      	strh	r3, [r7, #14]
 8005678:	89fb      	ldrh	r3, [r7, #14]
 800567a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800567e:	81fb      	strh	r3, [r7, #14]
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	441a      	add	r2, r3
 800568a:	89fb      	ldrh	r3, [r7, #14]
 800568c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005690:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005694:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800569c:	b29b      	uxth	r3, r3
 800569e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bc80      	pop	{r7}
 80056aa:	4770      	bx	lr

080056ac <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	7b1b      	ldrb	r3, [r3, #12]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f040 809d 	bne.w	80057fa <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	785b      	ldrb	r3, [r3, #1]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d04c      	beq.n	8005762 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	881b      	ldrh	r3, [r3, #0]
 80056d4:	823b      	strh	r3, [r7, #16]
 80056d6:	8a3b      	ldrh	r3, [r7, #16]
 80056d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d01b      	beq.n	8005718 <USB_EPClearStall+0x6c>
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	881b      	ldrh	r3, [r3, #0]
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f6:	81fb      	strh	r3, [r7, #14]
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	441a      	add	r2, r3
 8005702:	89fb      	ldrh	r3, [r7, #14]
 8005704:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005708:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800570c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005710:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005714:	b29b      	uxth	r3, r3
 8005716:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	78db      	ldrb	r3, [r3, #3]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d06c      	beq.n	80057fa <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	881b      	ldrh	r3, [r3, #0]
 800572c:	b29b      	uxth	r3, r3
 800572e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005732:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005736:	81bb      	strh	r3, [r7, #12]
 8005738:	89bb      	ldrh	r3, [r7, #12]
 800573a:	f083 0320 	eor.w	r3, r3, #32
 800573e:	81bb      	strh	r3, [r7, #12]
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	441a      	add	r2, r3
 800574a:	89bb      	ldrh	r3, [r7, #12]
 800574c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005750:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800575c:	b29b      	uxth	r3, r3
 800575e:	8013      	strh	r3, [r2, #0]
 8005760:	e04b      	b.n	80057fa <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	4413      	add	r3, r2
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	82fb      	strh	r3, [r7, #22]
 8005770:	8afb      	ldrh	r3, [r7, #22]
 8005772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d01b      	beq.n	80057b2 <USB_EPClearStall+0x106>
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	881b      	ldrh	r3, [r3, #0]
 8005786:	b29b      	uxth	r3, r3
 8005788:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800578c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005790:	82bb      	strh	r3, [r7, #20]
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	441a      	add	r2, r3
 800579c:	8abb      	ldrh	r3, [r7, #20]
 800579e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4413      	add	r3, r2
 80057bc:	881b      	ldrh	r3, [r3, #0]
 80057be:	b29b      	uxth	r3, r3
 80057c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c8:	827b      	strh	r3, [r7, #18]
 80057ca:	8a7b      	ldrh	r3, [r7, #18]
 80057cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80057d0:	827b      	strh	r3, [r7, #18]
 80057d2:	8a7b      	ldrh	r3, [r7, #18]
 80057d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80057d8:	827b      	strh	r3, [r7, #18]
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	441a      	add	r2, r3
 80057e4:	8a7b      	ldrh	r3, [r7, #18]
 80057e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	371c      	adds	r7, #28
 8005800:	46bd      	mov	sp, r7
 8005802:	bc80      	pop	{r7}
 8005804:	4770      	bx	lr

08005806 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005806:	b480      	push	{r7}
 8005808:	b083      	sub	sp, #12
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
 800580e:	460b      	mov	r3, r1
 8005810:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005812:	78fb      	ldrb	r3, [r7, #3]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d103      	bne.n	8005820 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2280      	movs	r2, #128	; 0x80
 800581c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	bc80      	pop	{r7}
 800582a:	4770      	bx	lr

0800582c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	bc80      	pop	{r7}
 800583e:	4770      	bx	lr

08005840 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	bc80      	pop	{r7}
 8005852:	4770      	bx	lr

08005854 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005862:	b29b      	uxth	r3, r3
 8005864:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005866:	68fb      	ldr	r3, [r7, #12]
}
 8005868:	4618      	mov	r0, r3
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	bc80      	pop	{r7}
 8005870:	4770      	bx	lr

08005872 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005872:	b480      	push	{r7}
 8005874:	b083      	sub	sp, #12
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
 800587a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	bc80      	pop	{r7}
 8005886:	4770      	bx	lr

08005888 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005888:	b480      	push	{r7}
 800588a:	b08d      	sub	sp, #52	; 0x34
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	4611      	mov	r1, r2
 8005894:	461a      	mov	r2, r3
 8005896:	460b      	mov	r3, r1
 8005898:	80fb      	strh	r3, [r7, #6]
 800589a:	4613      	mov	r3, r2
 800589c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800589e:	88bb      	ldrh	r3, [r7, #4]
 80058a0:	3301      	adds	r3, #1
 80058a2:	085b      	lsrs	r3, r3, #1
 80058a4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80058ae:	88fb      	ldrh	r3, [r7, #6]
 80058b0:	005a      	lsls	r2, r3, #1
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058ba:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80058bc:	6a3b      	ldr	r3, [r7, #32]
 80058be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058c0:	e01e      	b.n	8005900 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80058c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	3301      	adds	r3, #1
 80058cc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80058ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	021b      	lsls	r3, r3, #8
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	461a      	mov	r2, r3
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	4313      	orrs	r3, r2
 80058de:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80058e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ea:	3302      	adds	r3, #2
 80058ec:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80058ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f0:	3302      	adds	r3, #2
 80058f2:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f6:	3301      	adds	r3, #1
 80058f8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80058fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058fc:	3b01      	subs	r3, #1
 80058fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1dd      	bne.n	80058c2 <USB_WritePMA+0x3a>
  }
}
 8005906:	bf00      	nop
 8005908:	bf00      	nop
 800590a:	3734      	adds	r7, #52	; 0x34
 800590c:	46bd      	mov	sp, r7
 800590e:	bc80      	pop	{r7}
 8005910:	4770      	bx	lr

08005912 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005912:	b480      	push	{r7}
 8005914:	b08b      	sub	sp, #44	; 0x2c
 8005916:	af00      	add	r7, sp, #0
 8005918:	60f8      	str	r0, [r7, #12]
 800591a:	60b9      	str	r1, [r7, #8]
 800591c:	4611      	mov	r1, r2
 800591e:	461a      	mov	r2, r3
 8005920:	460b      	mov	r3, r1
 8005922:	80fb      	strh	r3, [r7, #6]
 8005924:	4613      	mov	r3, r2
 8005926:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005928:	88bb      	ldrh	r3, [r7, #4]
 800592a:	085b      	lsrs	r3, r3, #1
 800592c:	b29b      	uxth	r3, r3
 800592e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005938:	88fb      	ldrh	r3, [r7, #6]
 800593a:	005a      	lsls	r2, r3, #1
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	4413      	add	r3, r2
 8005940:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005944:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	627b      	str	r3, [r7, #36]	; 0x24
 800594a:	e01b      	b.n	8005984 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800594c:	6a3b      	ldr	r3, [r7, #32]
 800594e:	881b      	ldrh	r3, [r3, #0]
 8005950:	b29b      	uxth	r3, r3
 8005952:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005954:	6a3b      	ldr	r3, [r7, #32]
 8005956:	3302      	adds	r3, #2
 8005958:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	b2da      	uxtb	r2, r3
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	3301      	adds	r3, #1
 8005966:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	0a1b      	lsrs	r3, r3, #8
 800596c:	b2da      	uxtb	r2, r3
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	3301      	adds	r3, #1
 8005976:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005978:	6a3b      	ldr	r3, [r7, #32]
 800597a:	3302      	adds	r3, #2
 800597c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800597e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005980:	3b01      	subs	r3, #1
 8005982:	627b      	str	r3, [r7, #36]	; 0x24
 8005984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1e0      	bne.n	800594c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800598a:	88bb      	ldrh	r3, [r7, #4]
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	b29b      	uxth	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d007      	beq.n	80059a6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	881b      	ldrh	r3, [r3, #0]
 800599a:	b29b      	uxth	r3, r3
 800599c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	b2da      	uxtb	r2, r3
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	701a      	strb	r2, [r3, #0]
  }
}
 80059a6:	bf00      	nop
 80059a8:	372c      	adds	r7, #44	; 0x2c
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bc80      	pop	{r7}
 80059ae:	4770      	bx	lr

080059b0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	460b      	mov	r3, r1
 80059ba:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	7c1b      	ldrb	r3, [r3, #16]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d115      	bne.n	80059f4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80059c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059cc:	2202      	movs	r2, #2
 80059ce:	2181      	movs	r1, #129	; 0x81
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f001 fe86 	bl	80076e2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80059dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059e0:	2202      	movs	r2, #2
 80059e2:	2101      	movs	r1, #1
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f001 fe7c 	bl	80076e2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80059f2:	e012      	b.n	8005a1a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80059f4:	2340      	movs	r3, #64	; 0x40
 80059f6:	2202      	movs	r2, #2
 80059f8:	2181      	movs	r1, #129	; 0x81
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f001 fe71 	bl	80076e2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a06:	2340      	movs	r3, #64	; 0x40
 8005a08:	2202      	movs	r2, #2
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f001 fe68 	bl	80076e2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005a1a:	2308      	movs	r3, #8
 8005a1c:	2203      	movs	r2, #3
 8005a1e:	2182      	movs	r1, #130	; 0x82
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f001 fe5e 	bl	80076e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005a2c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005a30:	f001 ff7e 	bl	8007930 <USBD_static_malloc>
 8005a34:	4602      	mov	r2, r0
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d102      	bne.n	8005a4c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005a46:	2301      	movs	r3, #1
 8005a48:	73fb      	strb	r3, [r7, #15]
 8005a4a:	e026      	b.n	8005a9a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a52:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	7c1b      	ldrb	r3, [r3, #16]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d109      	bne.n	8005a8a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a80:	2101      	movs	r1, #1
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f001 ff1e 	bl	80078c4 <USBD_LL_PrepareReceive>
 8005a88:	e007      	b.n	8005a9a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a90:	2340      	movs	r3, #64	; 0x40
 8005a92:	2101      	movs	r1, #1
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f001 ff15 	bl	80078c4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	460b      	mov	r3, r1
 8005aae:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005ab4:	2181      	movs	r1, #129	; 0x81
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f001 fe39 	bl	800772e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005ac2:	2101      	movs	r1, #1
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f001 fe32 	bl	800772e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005ad2:	2182      	movs	r1, #130	; 0x82
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f001 fe2a 	bl	800772e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00e      	beq.n	8005b08 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005afa:	4618      	mov	r0, r3
 8005afc:	f001 ff24 	bl	8007948 <USBD_static_free>
    pdev->pClassData = NULL;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b086      	sub	sp, #24
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
 8005b1a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b22:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005b24:	2300      	movs	r3, #0
 8005b26:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d039      	beq.n	8005bb0 <USBD_CDC_Setup+0x9e>
 8005b3c:	2b20      	cmp	r3, #32
 8005b3e:	d17f      	bne.n	8005c40 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	88db      	ldrh	r3, [r3, #6]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d029      	beq.n	8005b9c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	b25b      	sxtb	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	da11      	bge.n	8005b76 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	683a      	ldr	r2, [r7, #0]
 8005b5c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005b5e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	88d2      	ldrh	r2, [r2, #6]
 8005b64:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005b66:	6939      	ldr	r1, [r7, #16]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	88db      	ldrh	r3, [r3, #6]
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f001 fa09 	bl	8006f86 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005b74:	e06b      	b.n	8005c4e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	785a      	ldrb	r2, [r3, #1]
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	88db      	ldrh	r3, [r3, #6]
 8005b84:	b2da      	uxtb	r2, r3
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005b8c:	6939      	ldr	r1, [r7, #16]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	88db      	ldrh	r3, [r3, #6]
 8005b92:	461a      	mov	r2, r3
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f001 fa24 	bl	8006fe2 <USBD_CtlPrepareRx>
      break;
 8005b9a:	e058      	b.n	8005c4e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	683a      	ldr	r2, [r7, #0]
 8005ba6:	7850      	ldrb	r0, [r2, #1]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	6839      	ldr	r1, [r7, #0]
 8005bac:	4798      	blx	r3
      break;
 8005bae:	e04e      	b.n	8005c4e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	785b      	ldrb	r3, [r3, #1]
 8005bb4:	2b0b      	cmp	r3, #11
 8005bb6:	d02e      	beq.n	8005c16 <USBD_CDC_Setup+0x104>
 8005bb8:	2b0b      	cmp	r3, #11
 8005bba:	dc38      	bgt.n	8005c2e <USBD_CDC_Setup+0x11c>
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d002      	beq.n	8005bc6 <USBD_CDC_Setup+0xb4>
 8005bc0:	2b0a      	cmp	r3, #10
 8005bc2:	d014      	beq.n	8005bee <USBD_CDC_Setup+0xdc>
 8005bc4:	e033      	b.n	8005c2e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bcc:	2b03      	cmp	r3, #3
 8005bce:	d107      	bne.n	8005be0 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005bd0:	f107 030c 	add.w	r3, r7, #12
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f001 f9d4 	bl	8006f86 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005bde:	e02e      	b.n	8005c3e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005be0:	6839      	ldr	r1, [r7, #0]
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f001 f965 	bl	8006eb2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005be8:	2302      	movs	r3, #2
 8005bea:	75fb      	strb	r3, [r7, #23]
          break;
 8005bec:	e027      	b.n	8005c3e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bf4:	2b03      	cmp	r3, #3
 8005bf6:	d107      	bne.n	8005c08 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005bf8:	f107 030f 	add.w	r3, r7, #15
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	4619      	mov	r1, r3
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f001 f9c0 	bl	8006f86 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c06:	e01a      	b.n	8005c3e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005c08:	6839      	ldr	r1, [r7, #0]
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f001 f951 	bl	8006eb2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c10:	2302      	movs	r3, #2
 8005c12:	75fb      	strb	r3, [r7, #23]
          break;
 8005c14:	e013      	b.n	8005c3e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c1c:	2b03      	cmp	r3, #3
 8005c1e:	d00d      	beq.n	8005c3c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8005c20:	6839      	ldr	r1, [r7, #0]
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f001 f945 	bl	8006eb2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c28:	2302      	movs	r3, #2
 8005c2a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005c2c:	e006      	b.n	8005c3c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8005c2e:	6839      	ldr	r1, [r7, #0]
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f001 f93e 	bl	8006eb2 <USBD_CtlError>
          ret = USBD_FAIL;
 8005c36:	2302      	movs	r3, #2
 8005c38:	75fb      	strb	r3, [r7, #23]
          break;
 8005c3a:	e000      	b.n	8005c3e <USBD_CDC_Setup+0x12c>
          break;
 8005c3c:	bf00      	nop
      }
      break;
 8005c3e:	e006      	b.n	8005c4e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005c40:	6839      	ldr	r1, [r7, #0]
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f001 f935 	bl	8006eb2 <USBD_CtlError>
      ret = USBD_FAIL;
 8005c48:	2302      	movs	r3, #2
 8005c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c4c:	bf00      	nop
  }

  return ret;
 8005c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3718      	adds	r7, #24
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	460b      	mov	r3, r1
 8005c62:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c6a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c72:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d03a      	beq.n	8005cf4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005c7e:	78fa      	ldrb	r2, [r7, #3]
 8005c80:	6879      	ldr	r1, [r7, #4]
 8005c82:	4613      	mov	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	440b      	add	r3, r1
 8005c8c:	331c      	adds	r3, #28
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d029      	beq.n	8005ce8 <USBD_CDC_DataIn+0x90>
 8005c94:	78fa      	ldrb	r2, [r7, #3]
 8005c96:	6879      	ldr	r1, [r7, #4]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	440b      	add	r3, r1
 8005ca2:	331c      	adds	r3, #28
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	78f9      	ldrb	r1, [r7, #3]
 8005ca8:	68b8      	ldr	r0, [r7, #8]
 8005caa:	460b      	mov	r3, r1
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	440b      	add	r3, r1
 8005cb0:	00db      	lsls	r3, r3, #3
 8005cb2:	4403      	add	r3, r0
 8005cb4:	3338      	adds	r3, #56	; 0x38
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	fbb2 f1f3 	udiv	r1, r2, r3
 8005cbc:	fb03 f301 	mul.w	r3, r3, r1
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d110      	bne.n	8005ce8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005cc6:	78fa      	ldrb	r2, [r7, #3]
 8005cc8:	6879      	ldr	r1, [r7, #4]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4413      	add	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	440b      	add	r3, r1
 8005cd4:	331c      	adds	r3, #28
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005cda:	78f9      	ldrb	r1, [r7, #3]
 8005cdc:	2300      	movs	r3, #0
 8005cde:	2200      	movs	r2, #0
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f001 fdcc 	bl	800787e <USBD_LL_Transmit>
 8005ce6:	e003      	b.n	8005cf0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	e000      	b.n	8005cf6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005cf4:	2302      	movs	r3, #2
  }
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b084      	sub	sp, #16
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
 8005d06:	460b      	mov	r3, r1
 8005d08:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d10:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005d12:	78fb      	ldrb	r3, [r7, #3]
 8005d14:	4619      	mov	r1, r3
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f001 fdf7 	bl	800790a <USBD_LL_GetRxDataSize>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00d      	beq.n	8005d4a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005d42:	4611      	mov	r1, r2
 8005d44:	4798      	blx	r3

    return USBD_OK;
 8005d46:	2300      	movs	r3, #0
 8005d48:	e000      	b.n	8005d4c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005d4a:	2302      	movs	r3, #2
  }
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d62:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d015      	beq.n	8005d9a <USBD_CDC_EP0_RxReady+0x46>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005d74:	2bff      	cmp	r3, #255	; 0xff
 8005d76:	d010      	beq.n	8005d9a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005d86:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d8e:	b292      	uxth	r2, r2
 8005d90:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	22ff      	movs	r2, #255	; 0xff
 8005d96:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2243      	movs	r2, #67	; 0x43
 8005db0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005db2:	4b03      	ldr	r3, [pc, #12]	; (8005dc0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bc80      	pop	{r7}
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	20000094 	.word	0x20000094

08005dc4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2243      	movs	r2, #67	; 0x43
 8005dd0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005dd2:	4b03      	ldr	r3, [pc, #12]	; (8005de0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bc80      	pop	{r7}
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	20000050 	.word	0x20000050

08005de4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2243      	movs	r2, #67	; 0x43
 8005df0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005df2:	4b03      	ldr	r3, [pc, #12]	; (8005e00 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bc80      	pop	{r7}
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	200000d8 	.word	0x200000d8

08005e04 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	220a      	movs	r2, #10
 8005e10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005e12:	4b03      	ldr	r3, [pc, #12]	; (8005e20 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bc80      	pop	{r7}
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	2000000c 	.word	0x2000000c

08005e24 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005e2e:	2302      	movs	r3, #2
 8005e30:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d005      	beq.n	8005e44 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	683a      	ldr	r2, [r7, #0]
 8005e3c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005e40:	2300      	movs	r3, #0
 8005e42:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bc80      	pop	{r7}
 8005e4e:	4770      	bx	lr

08005e50 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b087      	sub	sp, #28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e64:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	68ba      	ldr	r2, [r7, #8]
 8005e6a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005e6e:	88fa      	ldrh	r2, [r7, #6]
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	371c      	adds	r7, #28
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bc80      	pop	{r7}
 8005e80:	4770      	bx	lr

08005e82 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b085      	sub	sp, #20
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
 8005e8a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e92:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bc80      	pop	{r7}
 8005ea6:	4770      	bx	lr

08005ea8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eb6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d01c      	beq.n	8005efc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d115      	bne.n	8005ef8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	2181      	movs	r1, #129	; 0x81
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f001 fcc5 	bl	800787e <USBD_LL_Transmit>

      return USBD_OK;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	e002      	b.n	8005efe <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e000      	b.n	8005efe <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005efc:	2302      	movs	r3, #2
  }
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b084      	sub	sp, #16
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f14:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d017      	beq.n	8005f50 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	7c1b      	ldrb	r3, [r3, #16]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d109      	bne.n	8005f3c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f32:	2101      	movs	r1, #1
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f001 fcc5 	bl	80078c4 <USBD_LL_PrepareReceive>
 8005f3a:	e007      	b.n	8005f4c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f42:	2340      	movs	r3, #64	; 0x40
 8005f44:	2101      	movs	r1, #1
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f001 fcbc 	bl	80078c4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	e000      	b.n	8005f52 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005f50:	2302      	movs	r3, #2
  }
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b084      	sub	sp, #16
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	60f8      	str	r0, [r7, #12]
 8005f62:	60b9      	str	r1, [r7, #8]
 8005f64:	4613      	mov	r3, r2
 8005f66:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005f6e:	2302      	movs	r3, #2
 8005f70:	e01a      	b.n	8005fa8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d003      	beq.n	8005f84 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	68ba      	ldr	r2, [r7, #8]
 8005f8e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	79fa      	ldrb	r2, [r7, #7]
 8005f9e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f001 fb29 	bl	80075f8 <USBD_LL_Init>

  return USBD_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3710      	adds	r7, #16
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d006      	beq.n	8005fd2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	73fb      	strb	r3, [r7, #15]
 8005fd0:	e001      	b.n	8005fd6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3714      	adds	r7, #20
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bc80      	pop	{r7}
 8005fe0:	4770      	bx	lr

08005fe2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b082      	sub	sp, #8
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f001 fb5e 	bl	80076ac <USBD_LL_Start>

  return USBD_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b083      	sub	sp, #12
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	bc80      	pop	{r7}
 800600c:	4770      	bx	lr

0800600e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b084      	sub	sp, #16
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	460b      	mov	r3, r1
 8006018:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800601a:	2302      	movs	r3, #2
 800601c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00c      	beq.n	8006042 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	78fa      	ldrb	r2, [r7, #3]
 8006032:	4611      	mov	r1, r2
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	4798      	blx	r3
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800603e:	2300      	movs	r3, #0
 8006040:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006042:	7bfb      	ldrb	r3, [r7, #15]
}
 8006044:	4618      	mov	r0, r3
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	460b      	mov	r3, r1
 8006056:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	78fa      	ldrb	r2, [r7, #3]
 8006062:	4611      	mov	r1, r2
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	4798      	blx	r3

  return USBD_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b082      	sub	sp, #8
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006082:	6839      	ldr	r1, [r7, #0]
 8006084:	4618      	mov	r0, r3
 8006086:	f000 fed8 	bl	8006e3a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006098:	461a      	mov	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80060a6:	f003 031f 	and.w	r3, r3, #31
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d016      	beq.n	80060dc <USBD_LL_SetupStage+0x6a>
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d81c      	bhi.n	80060ec <USBD_LL_SetupStage+0x7a>
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d002      	beq.n	80060bc <USBD_LL_SetupStage+0x4a>
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d008      	beq.n	80060cc <USBD_LL_SetupStage+0x5a>
 80060ba:	e017      	b.n	80060ec <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80060c2:	4619      	mov	r1, r3
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f9cb 	bl	8006460 <USBD_StdDevReq>
      break;
 80060ca:	e01a      	b.n	8006102 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80060d2:	4619      	mov	r1, r3
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 fa2d 	bl	8006534 <USBD_StdItfReq>
      break;
 80060da:	e012      	b.n	8006102 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80060e2:	4619      	mov	r1, r3
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 fa6d 	bl	80065c4 <USBD_StdEPReq>
      break;
 80060ea:	e00a      	b.n	8006102 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80060f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	4619      	mov	r1, r3
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f001 fb36 	bl	800776c <USBD_LL_StallEP>
      break;
 8006100:	bf00      	nop
  }

  return USBD_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3708      	adds	r7, #8
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	460b      	mov	r3, r1
 8006116:	607a      	str	r2, [r7, #4]
 8006118:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800611a:	7afb      	ldrb	r3, [r7, #11]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d14b      	bne.n	80061b8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006126:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800612e:	2b03      	cmp	r3, #3
 8006130:	d134      	bne.n	800619c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	68da      	ldr	r2, [r3, #12]
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	429a      	cmp	r2, r3
 800613c:	d919      	bls.n	8006172 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	68da      	ldr	r2, [r3, #12]
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	1ad2      	subs	r2, r2, r3
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	68da      	ldr	r2, [r3, #12]
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006154:	429a      	cmp	r2, r3
 8006156:	d203      	bcs.n	8006160 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800615c:	b29b      	uxth	r3, r3
 800615e:	e002      	b.n	8006166 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006164:	b29b      	uxth	r3, r3
 8006166:	461a      	mov	r2, r3
 8006168:	6879      	ldr	r1, [r7, #4]
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f000 ff57 	bl	800701e <USBD_CtlContinueRx>
 8006170:	e038      	b.n	80061e4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00a      	beq.n	8006194 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006184:	2b03      	cmp	r3, #3
 8006186:	d105      	bne.n	8006194 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f000 ff54 	bl	8007042 <USBD_CtlSendStatus>
 800619a:	e023      	b.n	80061e4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80061a2:	2b05      	cmp	r3, #5
 80061a4:	d11e      	bne.n	80061e4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80061ae:	2100      	movs	r1, #0
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f001 fadb 	bl	800776c <USBD_LL_StallEP>
 80061b6:	e015      	b.n	80061e4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00d      	beq.n	80061e0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80061ca:	2b03      	cmp	r3, #3
 80061cc:	d108      	bne.n	80061e0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	7afa      	ldrb	r2, [r7, #11]
 80061d8:	4611      	mov	r1, r2
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	4798      	blx	r3
 80061de:	e001      	b.n	80061e4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80061e0:	2302      	movs	r3, #2
 80061e2:	e000      	b.n	80061e6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3718      	adds	r7, #24
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b086      	sub	sp, #24
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	60f8      	str	r0, [r7, #12]
 80061f6:	460b      	mov	r3, r1
 80061f8:	607a      	str	r2, [r7, #4]
 80061fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80061fc:	7afb      	ldrb	r3, [r7, #11]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d17f      	bne.n	8006302 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	3314      	adds	r3, #20
 8006206:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800620e:	2b02      	cmp	r3, #2
 8006210:	d15c      	bne.n	80062cc <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	68da      	ldr	r2, [r3, #12]
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	429a      	cmp	r2, r3
 800621c:	d915      	bls.n	800624a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	68da      	ldr	r2, [r3, #12]
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	1ad2      	subs	r2, r2, r3
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	b29b      	uxth	r3, r3
 8006232:	461a      	mov	r2, r3
 8006234:	6879      	ldr	r1, [r7, #4]
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f000 fec1 	bl	8006fbe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800623c:	2300      	movs	r3, #0
 800623e:	2200      	movs	r2, #0
 8006240:	2100      	movs	r1, #0
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f001 fb3e 	bl	80078c4 <USBD_LL_PrepareReceive>
 8006248:	e04e      	b.n	80062e8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	6912      	ldr	r2, [r2, #16]
 8006252:	fbb3 f1f2 	udiv	r1, r3, r2
 8006256:	fb02 f201 	mul.w	r2, r2, r1
 800625a:	1a9b      	subs	r3, r3, r2
 800625c:	2b00      	cmp	r3, #0
 800625e:	d11c      	bne.n	800629a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	689a      	ldr	r2, [r3, #8]
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006268:	429a      	cmp	r2, r3
 800626a:	d316      	bcc.n	800629a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	689a      	ldr	r2, [r3, #8]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006276:	429a      	cmp	r2, r3
 8006278:	d20f      	bcs.n	800629a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800627a:	2200      	movs	r2, #0
 800627c:	2100      	movs	r1, #0
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f000 fe9d 	bl	8006fbe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800628c:	2300      	movs	r3, #0
 800628e:	2200      	movs	r2, #0
 8006290:	2100      	movs	r1, #0
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f001 fb16 	bl	80078c4 <USBD_LL_PrepareReceive>
 8006298:	e026      	b.n	80062e8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00a      	beq.n	80062bc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80062ac:	2b03      	cmp	r3, #3
 80062ae:	d105      	bne.n	80062bc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80062bc:	2180      	movs	r1, #128	; 0x80
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f001 fa54 	bl	800776c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f000 fecf 	bl	8007068 <USBD_CtlReceiveStatus>
 80062ca:	e00d      	b.n	80062e8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062d2:	2b04      	cmp	r3, #4
 80062d4:	d004      	beq.n	80062e0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d103      	bne.n	80062e8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80062e0:	2180      	movs	r1, #128	; 0x80
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f001 fa42 	bl	800776c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d11d      	bne.n	800632e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f7ff fe81 	bl	8005ffa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006300:	e015      	b.n	800632e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00d      	beq.n	800632a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006314:	2b03      	cmp	r3, #3
 8006316:	d108      	bne.n	800632a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800631e:	695b      	ldr	r3, [r3, #20]
 8006320:	7afa      	ldrb	r2, [r7, #11]
 8006322:	4611      	mov	r1, r2
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	4798      	blx	r3
 8006328:	e001      	b.n	800632e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800632a:	2302      	movs	r3, #2
 800632c:	e000      	b.n	8006330 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3718      	adds	r7, #24
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006340:	2340      	movs	r3, #64	; 0x40
 8006342:	2200      	movs	r2, #0
 8006344:	2100      	movs	r1, #0
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f001 f9cb 	bl	80076e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2240      	movs	r2, #64	; 0x40
 8006358:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800635c:	2340      	movs	r3, #64	; 0x40
 800635e:	2200      	movs	r2, #0
 8006360:	2180      	movs	r1, #128	; 0x80
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f001 f9bd 	bl	80076e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2240      	movs	r2, #64	; 0x40
 8006372:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006398:	2b00      	cmp	r3, #0
 800639a:	d009      	beq.n	80063b0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	6852      	ldr	r2, [r2, #4]
 80063a8:	b2d2      	uxtb	r2, r2
 80063aa:	4611      	mov	r1, r2
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	4798      	blx	r3
  }

  return USBD_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b083      	sub	sp, #12
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
 80063c2:	460b      	mov	r3, r1
 80063c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	78fa      	ldrb	r2, [r7, #3]
 80063ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bc80      	pop	{r7}
 80063d6:	4770      	bx	lr

080063d8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2204      	movs	r2, #4
 80063f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bc80      	pop	{r7}
 80063fe:	4770      	bx	lr

08006400 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800640e:	2b04      	cmp	r3, #4
 8006410:	d105      	bne.n	800641e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	bc80      	pop	{r7}
 8006428:	4770      	bx	lr

0800642a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b082      	sub	sp, #8
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006438:	2b03      	cmp	r3, #3
 800643a:	d10b      	bne.n	8006454 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006442:	69db      	ldr	r3, [r3, #28]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d005      	beq.n	8006454 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800644e:	69db      	ldr	r3, [r3, #28]
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3708      	adds	r7, #8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
	...

08006460 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800646a:	2300      	movs	r3, #0
 800646c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006476:	2b40      	cmp	r3, #64	; 0x40
 8006478:	d005      	beq.n	8006486 <USBD_StdDevReq+0x26>
 800647a:	2b40      	cmp	r3, #64	; 0x40
 800647c:	d84f      	bhi.n	800651e <USBD_StdDevReq+0xbe>
 800647e:	2b00      	cmp	r3, #0
 8006480:	d009      	beq.n	8006496 <USBD_StdDevReq+0x36>
 8006482:	2b20      	cmp	r3, #32
 8006484:	d14b      	bne.n	800651e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	6839      	ldr	r1, [r7, #0]
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	4798      	blx	r3
      break;
 8006494:	e048      	b.n	8006528 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	785b      	ldrb	r3, [r3, #1]
 800649a:	2b09      	cmp	r3, #9
 800649c:	d839      	bhi.n	8006512 <USBD_StdDevReq+0xb2>
 800649e:	a201      	add	r2, pc, #4	; (adr r2, 80064a4 <USBD_StdDevReq+0x44>)
 80064a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a4:	080064f5 	.word	0x080064f5
 80064a8:	08006509 	.word	0x08006509
 80064ac:	08006513 	.word	0x08006513
 80064b0:	080064ff 	.word	0x080064ff
 80064b4:	08006513 	.word	0x08006513
 80064b8:	080064d7 	.word	0x080064d7
 80064bc:	080064cd 	.word	0x080064cd
 80064c0:	08006513 	.word	0x08006513
 80064c4:	080064eb 	.word	0x080064eb
 80064c8:	080064e1 	.word	0x080064e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80064cc:	6839      	ldr	r1, [r7, #0]
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f9dc 	bl	800688c <USBD_GetDescriptor>
          break;
 80064d4:	e022      	b.n	800651c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80064d6:	6839      	ldr	r1, [r7, #0]
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fb3f 	bl	8006b5c <USBD_SetAddress>
          break;
 80064de:	e01d      	b.n	800651c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80064e0:	6839      	ldr	r1, [r7, #0]
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 fb7e 	bl	8006be4 <USBD_SetConfig>
          break;
 80064e8:	e018      	b.n	800651c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80064ea:	6839      	ldr	r1, [r7, #0]
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 fc07 	bl	8006d00 <USBD_GetConfig>
          break;
 80064f2:	e013      	b.n	800651c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80064f4:	6839      	ldr	r1, [r7, #0]
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 fc37 	bl	8006d6a <USBD_GetStatus>
          break;
 80064fc:	e00e      	b.n	800651c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80064fe:	6839      	ldr	r1, [r7, #0]
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 fc65 	bl	8006dd0 <USBD_SetFeature>
          break;
 8006506:	e009      	b.n	800651c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006508:	6839      	ldr	r1, [r7, #0]
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fc74 	bl	8006df8 <USBD_ClrFeature>
          break;
 8006510:	e004      	b.n	800651c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006512:	6839      	ldr	r1, [r7, #0]
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 fccc 	bl	8006eb2 <USBD_CtlError>
          break;
 800651a:	bf00      	nop
      }
      break;
 800651c:	e004      	b.n	8006528 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800651e:	6839      	ldr	r1, [r7, #0]
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 fcc6 	bl	8006eb2 <USBD_CtlError>
      break;
 8006526:	bf00      	nop
  }

  return ret;
 8006528:	7bfb      	ldrb	r3, [r7, #15]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop

08006534 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800653e:	2300      	movs	r3, #0
 8006540:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800654a:	2b40      	cmp	r3, #64	; 0x40
 800654c:	d005      	beq.n	800655a <USBD_StdItfReq+0x26>
 800654e:	2b40      	cmp	r3, #64	; 0x40
 8006550:	d82e      	bhi.n	80065b0 <USBD_StdItfReq+0x7c>
 8006552:	2b00      	cmp	r3, #0
 8006554:	d001      	beq.n	800655a <USBD_StdItfReq+0x26>
 8006556:	2b20      	cmp	r3, #32
 8006558:	d12a      	bne.n	80065b0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006560:	3b01      	subs	r3, #1
 8006562:	2b02      	cmp	r3, #2
 8006564:	d81d      	bhi.n	80065a2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	889b      	ldrh	r3, [r3, #4]
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b01      	cmp	r3, #1
 800656e:	d813      	bhi.n	8006598 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	6839      	ldr	r1, [r7, #0]
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	4798      	blx	r3
 800657e:	4603      	mov	r3, r0
 8006580:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	88db      	ldrh	r3, [r3, #6]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d110      	bne.n	80065ac <USBD_StdItfReq+0x78>
 800658a:	7bfb      	ldrb	r3, [r7, #15]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10d      	bne.n	80065ac <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 fd56 	bl	8007042 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006596:	e009      	b.n	80065ac <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006598:	6839      	ldr	r1, [r7, #0]
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fc89 	bl	8006eb2 <USBD_CtlError>
          break;
 80065a0:	e004      	b.n	80065ac <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80065a2:	6839      	ldr	r1, [r7, #0]
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 fc84 	bl	8006eb2 <USBD_CtlError>
          break;
 80065aa:	e000      	b.n	80065ae <USBD_StdItfReq+0x7a>
          break;
 80065ac:	bf00      	nop
      }
      break;
 80065ae:	e004      	b.n	80065ba <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80065b0:	6839      	ldr	r1, [r7, #0]
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 fc7d 	bl	8006eb2 <USBD_CtlError>
      break;
 80065b8:	bf00      	nop
  }

  return USBD_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80065ce:	2300      	movs	r3, #0
 80065d0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	889b      	ldrh	r3, [r3, #4]
 80065d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065e0:	2b40      	cmp	r3, #64	; 0x40
 80065e2:	d007      	beq.n	80065f4 <USBD_StdEPReq+0x30>
 80065e4:	2b40      	cmp	r3, #64	; 0x40
 80065e6:	f200 8146 	bhi.w	8006876 <USBD_StdEPReq+0x2b2>
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00a      	beq.n	8006604 <USBD_StdEPReq+0x40>
 80065ee:	2b20      	cmp	r3, #32
 80065f0:	f040 8141 	bne.w	8006876 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	6839      	ldr	r1, [r7, #0]
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	4798      	blx	r3
      break;
 8006602:	e13d      	b.n	8006880 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800660c:	2b20      	cmp	r3, #32
 800660e:	d10a      	bne.n	8006626 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	6839      	ldr	r1, [r7, #0]
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	4798      	blx	r3
 800661e:	4603      	mov	r3, r0
 8006620:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006622:	7bfb      	ldrb	r3, [r7, #15]
 8006624:	e12d      	b.n	8006882 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	785b      	ldrb	r3, [r3, #1]
 800662a:	2b03      	cmp	r3, #3
 800662c:	d007      	beq.n	800663e <USBD_StdEPReq+0x7a>
 800662e:	2b03      	cmp	r3, #3
 8006630:	f300 811b 	bgt.w	800686a <USBD_StdEPReq+0x2a6>
 8006634:	2b00      	cmp	r3, #0
 8006636:	d072      	beq.n	800671e <USBD_StdEPReq+0x15a>
 8006638:	2b01      	cmp	r3, #1
 800663a:	d03a      	beq.n	80066b2 <USBD_StdEPReq+0xee>
 800663c:	e115      	b.n	800686a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006644:	2b02      	cmp	r3, #2
 8006646:	d002      	beq.n	800664e <USBD_StdEPReq+0x8a>
 8006648:	2b03      	cmp	r3, #3
 800664a:	d015      	beq.n	8006678 <USBD_StdEPReq+0xb4>
 800664c:	e02b      	b.n	80066a6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800664e:	7bbb      	ldrb	r3, [r7, #14]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00c      	beq.n	800666e <USBD_StdEPReq+0xaa>
 8006654:	7bbb      	ldrb	r3, [r7, #14]
 8006656:	2b80      	cmp	r3, #128	; 0x80
 8006658:	d009      	beq.n	800666e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800665a:	7bbb      	ldrb	r3, [r7, #14]
 800665c:	4619      	mov	r1, r3
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f001 f884 	bl	800776c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006664:	2180      	movs	r1, #128	; 0x80
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f001 f880 	bl	800776c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800666c:	e020      	b.n	80066b0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800666e:	6839      	ldr	r1, [r7, #0]
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 fc1e 	bl	8006eb2 <USBD_CtlError>
              break;
 8006676:	e01b      	b.n	80066b0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	885b      	ldrh	r3, [r3, #2]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10e      	bne.n	800669e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006680:	7bbb      	ldrb	r3, [r7, #14]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00b      	beq.n	800669e <USBD_StdEPReq+0xda>
 8006686:	7bbb      	ldrb	r3, [r7, #14]
 8006688:	2b80      	cmp	r3, #128	; 0x80
 800668a:	d008      	beq.n	800669e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	88db      	ldrh	r3, [r3, #6]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d104      	bne.n	800669e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006694:	7bbb      	ldrb	r3, [r7, #14]
 8006696:	4619      	mov	r1, r3
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f001 f867 	bl	800776c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 fccf 	bl	8007042 <USBD_CtlSendStatus>

              break;
 80066a4:	e004      	b.n	80066b0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80066a6:	6839      	ldr	r1, [r7, #0]
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 fc02 	bl	8006eb2 <USBD_CtlError>
              break;
 80066ae:	bf00      	nop
          }
          break;
 80066b0:	e0e0      	b.n	8006874 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d002      	beq.n	80066c2 <USBD_StdEPReq+0xfe>
 80066bc:	2b03      	cmp	r3, #3
 80066be:	d015      	beq.n	80066ec <USBD_StdEPReq+0x128>
 80066c0:	e026      	b.n	8006710 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066c2:	7bbb      	ldrb	r3, [r7, #14]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00c      	beq.n	80066e2 <USBD_StdEPReq+0x11e>
 80066c8:	7bbb      	ldrb	r3, [r7, #14]
 80066ca:	2b80      	cmp	r3, #128	; 0x80
 80066cc:	d009      	beq.n	80066e2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80066ce:	7bbb      	ldrb	r3, [r7, #14]
 80066d0:	4619      	mov	r1, r3
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f001 f84a 	bl	800776c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80066d8:	2180      	movs	r1, #128	; 0x80
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f001 f846 	bl	800776c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80066e0:	e01c      	b.n	800671c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80066e2:	6839      	ldr	r1, [r7, #0]
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fbe4 	bl	8006eb2 <USBD_CtlError>
              break;
 80066ea:	e017      	b.n	800671c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	885b      	ldrh	r3, [r3, #2]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d112      	bne.n	800671a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80066f4:	7bbb      	ldrb	r3, [r7, #14]
 80066f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d004      	beq.n	8006708 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80066fe:	7bbb      	ldrb	r3, [r7, #14]
 8006700:	4619      	mov	r1, r3
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f001 f851 	bl	80077aa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 fc9a 	bl	8007042 <USBD_CtlSendStatus>
              }
              break;
 800670e:	e004      	b.n	800671a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006710:	6839      	ldr	r1, [r7, #0]
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fbcd 	bl	8006eb2 <USBD_CtlError>
              break;
 8006718:	e000      	b.n	800671c <USBD_StdEPReq+0x158>
              break;
 800671a:	bf00      	nop
          }
          break;
 800671c:	e0aa      	b.n	8006874 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006724:	2b02      	cmp	r3, #2
 8006726:	d002      	beq.n	800672e <USBD_StdEPReq+0x16a>
 8006728:	2b03      	cmp	r3, #3
 800672a:	d032      	beq.n	8006792 <USBD_StdEPReq+0x1ce>
 800672c:	e097      	b.n	800685e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800672e:	7bbb      	ldrb	r3, [r7, #14]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d007      	beq.n	8006744 <USBD_StdEPReq+0x180>
 8006734:	7bbb      	ldrb	r3, [r7, #14]
 8006736:	2b80      	cmp	r3, #128	; 0x80
 8006738:	d004      	beq.n	8006744 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800673a:	6839      	ldr	r1, [r7, #0]
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 fbb8 	bl	8006eb2 <USBD_CtlError>
                break;
 8006742:	e091      	b.n	8006868 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006744:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006748:	2b00      	cmp	r3, #0
 800674a:	da0b      	bge.n	8006764 <USBD_StdEPReq+0x1a0>
 800674c:	7bbb      	ldrb	r3, [r7, #14]
 800674e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006752:	4613      	mov	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4413      	add	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	3310      	adds	r3, #16
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	4413      	add	r3, r2
 8006760:	3304      	adds	r3, #4
 8006762:	e00b      	b.n	800677c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006764:	7bbb      	ldrb	r3, [r7, #14]
 8006766:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800676a:	4613      	mov	r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	4413      	add	r3, r2
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	4413      	add	r3, r2
 800677a:	3304      	adds	r3, #4
 800677c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	2200      	movs	r2, #0
 8006782:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	2202      	movs	r2, #2
 8006788:	4619      	mov	r1, r3
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 fbfb 	bl	8006f86 <USBD_CtlSendData>
              break;
 8006790:	e06a      	b.n	8006868 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006792:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006796:	2b00      	cmp	r3, #0
 8006798:	da11      	bge.n	80067be <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800679a:	7bbb      	ldrb	r3, [r7, #14]
 800679c:	f003 020f 	and.w	r2, r3, #15
 80067a0:	6879      	ldr	r1, [r7, #4]
 80067a2:	4613      	mov	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	440b      	add	r3, r1
 80067ac:	3318      	adds	r3, #24
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d117      	bne.n	80067e4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80067b4:	6839      	ldr	r1, [r7, #0]
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fb7b 	bl	8006eb2 <USBD_CtlError>
                  break;
 80067bc:	e054      	b.n	8006868 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80067be:	7bbb      	ldrb	r3, [r7, #14]
 80067c0:	f003 020f 	and.w	r2, r3, #15
 80067c4:	6879      	ldr	r1, [r7, #4]
 80067c6:	4613      	mov	r3, r2
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	4413      	add	r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	440b      	add	r3, r1
 80067d0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d104      	bne.n	80067e4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80067da:	6839      	ldr	r1, [r7, #0]
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 fb68 	bl	8006eb2 <USBD_CtlError>
                  break;
 80067e2:	e041      	b.n	8006868 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	da0b      	bge.n	8006804 <USBD_StdEPReq+0x240>
 80067ec:	7bbb      	ldrb	r3, [r7, #14]
 80067ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067f2:	4613      	mov	r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	3310      	adds	r3, #16
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	4413      	add	r3, r2
 8006800:	3304      	adds	r3, #4
 8006802:	e00b      	b.n	800681c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006804:	7bbb      	ldrb	r3, [r7, #14]
 8006806:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800680a:	4613      	mov	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4413      	add	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	4413      	add	r3, r2
 800681a:	3304      	adds	r3, #4
 800681c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800681e:	7bbb      	ldrb	r3, [r7, #14]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d002      	beq.n	800682a <USBD_StdEPReq+0x266>
 8006824:	7bbb      	ldrb	r3, [r7, #14]
 8006826:	2b80      	cmp	r3, #128	; 0x80
 8006828:	d103      	bne.n	8006832 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	2200      	movs	r2, #0
 800682e:	601a      	str	r2, [r3, #0]
 8006830:	e00e      	b.n	8006850 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006832:	7bbb      	ldrb	r3, [r7, #14]
 8006834:	4619      	mov	r1, r3
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 ffd6 	bl	80077e8 <USBD_LL_IsStallEP>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d003      	beq.n	800684a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	2201      	movs	r2, #1
 8006846:	601a      	str	r2, [r3, #0]
 8006848:	e002      	b.n	8006850 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	2200      	movs	r2, #0
 800684e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	2202      	movs	r2, #2
 8006854:	4619      	mov	r1, r3
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 fb95 	bl	8006f86 <USBD_CtlSendData>
              break;
 800685c:	e004      	b.n	8006868 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800685e:	6839      	ldr	r1, [r7, #0]
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 fb26 	bl	8006eb2 <USBD_CtlError>
              break;
 8006866:	bf00      	nop
          }
          break;
 8006868:	e004      	b.n	8006874 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800686a:	6839      	ldr	r1, [r7, #0]
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fb20 	bl	8006eb2 <USBD_CtlError>
          break;
 8006872:	bf00      	nop
      }
      break;
 8006874:	e004      	b.n	8006880 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006876:	6839      	ldr	r1, [r7, #0]
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 fb1a 	bl	8006eb2 <USBD_CtlError>
      break;
 800687e:	bf00      	nop
  }

  return ret;
 8006880:	7bfb      	ldrb	r3, [r7, #15]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
	...

0800688c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006896:	2300      	movs	r3, #0
 8006898:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800689a:	2300      	movs	r3, #0
 800689c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800689e:	2300      	movs	r3, #0
 80068a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	885b      	ldrh	r3, [r3, #2]
 80068a6:	0a1b      	lsrs	r3, r3, #8
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	3b01      	subs	r3, #1
 80068ac:	2b06      	cmp	r3, #6
 80068ae:	f200 8128 	bhi.w	8006b02 <USBD_GetDescriptor+0x276>
 80068b2:	a201      	add	r2, pc, #4	; (adr r2, 80068b8 <USBD_GetDescriptor+0x2c>)
 80068b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b8:	080068d5 	.word	0x080068d5
 80068bc:	080068ed 	.word	0x080068ed
 80068c0:	0800692d 	.word	0x0800692d
 80068c4:	08006b03 	.word	0x08006b03
 80068c8:	08006b03 	.word	0x08006b03
 80068cc:	08006aa3 	.word	0x08006aa3
 80068d0:	08006acf 	.word	0x08006acf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	7c12      	ldrb	r2, [r2, #16]
 80068e0:	f107 0108 	add.w	r1, r7, #8
 80068e4:	4610      	mov	r0, r2
 80068e6:	4798      	blx	r3
 80068e8:	60f8      	str	r0, [r7, #12]
      break;
 80068ea:	e112      	b.n	8006b12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	7c1b      	ldrb	r3, [r3, #16]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10d      	bne.n	8006910 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fc:	f107 0208 	add.w	r2, r7, #8
 8006900:	4610      	mov	r0, r2
 8006902:	4798      	blx	r3
 8006904:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	3301      	adds	r3, #1
 800690a:	2202      	movs	r2, #2
 800690c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800690e:	e100      	b.n	8006b12 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006918:	f107 0208 	add.w	r2, r7, #8
 800691c:	4610      	mov	r0, r2
 800691e:	4798      	blx	r3
 8006920:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	3301      	adds	r3, #1
 8006926:	2202      	movs	r2, #2
 8006928:	701a      	strb	r2, [r3, #0]
      break;
 800692a:	e0f2      	b.n	8006b12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	885b      	ldrh	r3, [r3, #2]
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b05      	cmp	r3, #5
 8006934:	f200 80ac 	bhi.w	8006a90 <USBD_GetDescriptor+0x204>
 8006938:	a201      	add	r2, pc, #4	; (adr r2, 8006940 <USBD_GetDescriptor+0xb4>)
 800693a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693e:	bf00      	nop
 8006940:	08006959 	.word	0x08006959
 8006944:	0800698d 	.word	0x0800698d
 8006948:	080069c1 	.word	0x080069c1
 800694c:	080069f5 	.word	0x080069f5
 8006950:	08006a29 	.word	0x08006a29
 8006954:	08006a5d 	.word	0x08006a5d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00b      	beq.n	800697c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	7c12      	ldrb	r2, [r2, #16]
 8006970:	f107 0108 	add.w	r1, r7, #8
 8006974:	4610      	mov	r0, r2
 8006976:	4798      	blx	r3
 8006978:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800697a:	e091      	b.n	8006aa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800697c:	6839      	ldr	r1, [r7, #0]
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 fa97 	bl	8006eb2 <USBD_CtlError>
            err++;
 8006984:	7afb      	ldrb	r3, [r7, #11]
 8006986:	3301      	adds	r3, #1
 8006988:	72fb      	strb	r3, [r7, #11]
          break;
 800698a:	e089      	b.n	8006aa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00b      	beq.n	80069b0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	7c12      	ldrb	r2, [r2, #16]
 80069a4:	f107 0108 	add.w	r1, r7, #8
 80069a8:	4610      	mov	r0, r2
 80069aa:	4798      	blx	r3
 80069ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069ae:	e077      	b.n	8006aa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069b0:	6839      	ldr	r1, [r7, #0]
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fa7d 	bl	8006eb2 <USBD_CtlError>
            err++;
 80069b8:	7afb      	ldrb	r3, [r7, #11]
 80069ba:	3301      	adds	r3, #1
 80069bc:	72fb      	strb	r3, [r7, #11]
          break;
 80069be:	e06f      	b.n	8006aa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00b      	beq.n	80069e4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	7c12      	ldrb	r2, [r2, #16]
 80069d8:	f107 0108 	add.w	r1, r7, #8
 80069dc:	4610      	mov	r0, r2
 80069de:	4798      	blx	r3
 80069e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069e2:	e05d      	b.n	8006aa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069e4:	6839      	ldr	r1, [r7, #0]
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 fa63 	bl	8006eb2 <USBD_CtlError>
            err++;
 80069ec:	7afb      	ldrb	r3, [r7, #11]
 80069ee:	3301      	adds	r3, #1
 80069f0:	72fb      	strb	r3, [r7, #11]
          break;
 80069f2:	e055      	b.n	8006aa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00b      	beq.n	8006a18 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	7c12      	ldrb	r2, [r2, #16]
 8006a0c:	f107 0108 	add.w	r1, r7, #8
 8006a10:	4610      	mov	r0, r2
 8006a12:	4798      	blx	r3
 8006a14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a16:	e043      	b.n	8006aa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a18:	6839      	ldr	r1, [r7, #0]
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fa49 	bl	8006eb2 <USBD_CtlError>
            err++;
 8006a20:	7afb      	ldrb	r3, [r7, #11]
 8006a22:	3301      	adds	r3, #1
 8006a24:	72fb      	strb	r3, [r7, #11]
          break;
 8006a26:	e03b      	b.n	8006aa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a2e:	695b      	ldr	r3, [r3, #20]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00b      	beq.n	8006a4c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a3a:	695b      	ldr	r3, [r3, #20]
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	7c12      	ldrb	r2, [r2, #16]
 8006a40:	f107 0108 	add.w	r1, r7, #8
 8006a44:	4610      	mov	r0, r2
 8006a46:	4798      	blx	r3
 8006a48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a4a:	e029      	b.n	8006aa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a4c:	6839      	ldr	r1, [r7, #0]
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fa2f 	bl	8006eb2 <USBD_CtlError>
            err++;
 8006a54:	7afb      	ldrb	r3, [r7, #11]
 8006a56:	3301      	adds	r3, #1
 8006a58:	72fb      	strb	r3, [r7, #11]
          break;
 8006a5a:	e021      	b.n	8006aa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00b      	beq.n	8006a80 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	7c12      	ldrb	r2, [r2, #16]
 8006a74:	f107 0108 	add.w	r1, r7, #8
 8006a78:	4610      	mov	r0, r2
 8006a7a:	4798      	blx	r3
 8006a7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a7e:	e00f      	b.n	8006aa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a80:	6839      	ldr	r1, [r7, #0]
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 fa15 	bl	8006eb2 <USBD_CtlError>
            err++;
 8006a88:	7afb      	ldrb	r3, [r7, #11]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	72fb      	strb	r3, [r7, #11]
          break;
 8006a8e:	e007      	b.n	8006aa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006a90:	6839      	ldr	r1, [r7, #0]
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fa0d 	bl	8006eb2 <USBD_CtlError>
          err++;
 8006a98:	7afb      	ldrb	r3, [r7, #11]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006a9e:	e038      	b.n	8006b12 <USBD_GetDescriptor+0x286>
 8006aa0:	e037      	b.n	8006b12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	7c1b      	ldrb	r3, [r3, #16]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d109      	bne.n	8006abe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ab2:	f107 0208 	add.w	r2, r7, #8
 8006ab6:	4610      	mov	r0, r2
 8006ab8:	4798      	blx	r3
 8006aba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006abc:	e029      	b.n	8006b12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006abe:	6839      	ldr	r1, [r7, #0]
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 f9f6 	bl	8006eb2 <USBD_CtlError>
        err++;
 8006ac6:	7afb      	ldrb	r3, [r7, #11]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	72fb      	strb	r3, [r7, #11]
      break;
 8006acc:	e021      	b.n	8006b12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	7c1b      	ldrb	r3, [r3, #16]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10d      	bne.n	8006af2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ade:	f107 0208 	add.w	r2, r7, #8
 8006ae2:	4610      	mov	r0, r2
 8006ae4:	4798      	blx	r3
 8006ae6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	3301      	adds	r3, #1
 8006aec:	2207      	movs	r2, #7
 8006aee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006af0:	e00f      	b.n	8006b12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006af2:	6839      	ldr	r1, [r7, #0]
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 f9dc 	bl	8006eb2 <USBD_CtlError>
        err++;
 8006afa:	7afb      	ldrb	r3, [r7, #11]
 8006afc:	3301      	adds	r3, #1
 8006afe:	72fb      	strb	r3, [r7, #11]
      break;
 8006b00:	e007      	b.n	8006b12 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006b02:	6839      	ldr	r1, [r7, #0]
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 f9d4 	bl	8006eb2 <USBD_CtlError>
      err++;
 8006b0a:	7afb      	ldrb	r3, [r7, #11]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	72fb      	strb	r3, [r7, #11]
      break;
 8006b10:	bf00      	nop
  }

  if (err != 0U)
 8006b12:	7afb      	ldrb	r3, [r7, #11]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d11c      	bne.n	8006b52 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006b18:	893b      	ldrh	r3, [r7, #8]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d011      	beq.n	8006b42 <USBD_GetDescriptor+0x2b6>
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	88db      	ldrh	r3, [r3, #6]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00d      	beq.n	8006b42 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	88da      	ldrh	r2, [r3, #6]
 8006b2a:	893b      	ldrh	r3, [r7, #8]
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	bf28      	it	cs
 8006b30:	4613      	movcs	r3, r2
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b36:	893b      	ldrh	r3, [r7, #8]
 8006b38:	461a      	mov	r2, r3
 8006b3a:	68f9      	ldr	r1, [r7, #12]
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fa22 	bl	8006f86 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	88db      	ldrh	r3, [r3, #6]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d104      	bne.n	8006b54 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 fa79 	bl	8007042 <USBD_CtlSendStatus>
 8006b50:	e000      	b.n	8006b54 <USBD_GetDescriptor+0x2c8>
    return;
 8006b52:	bf00      	nop
    }
  }
}
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop

08006b5c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	889b      	ldrh	r3, [r3, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d130      	bne.n	8006bd0 <USBD_SetAddress+0x74>
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	88db      	ldrh	r3, [r3, #6]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d12c      	bne.n	8006bd0 <USBD_SetAddress+0x74>
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	885b      	ldrh	r3, [r3, #2]
 8006b7a:	2b7f      	cmp	r3, #127	; 0x7f
 8006b7c:	d828      	bhi.n	8006bd0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	885b      	ldrh	r3, [r3, #2]
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b90:	2b03      	cmp	r3, #3
 8006b92:	d104      	bne.n	8006b9e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006b94:	6839      	ldr	r1, [r7, #0]
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f98b 	bl	8006eb2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b9c:	e01d      	b.n	8006bda <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	7bfa      	ldrb	r2, [r7, #15]
 8006ba2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006ba6:	7bfb      	ldrb	r3, [r7, #15]
 8006ba8:	4619      	mov	r1, r3
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fe48 	bl	8007840 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 fa46 	bl	8007042 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006bb6:	7bfb      	ldrb	r3, [r7, #15]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d004      	beq.n	8006bc6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2202      	movs	r2, #2
 8006bc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bc4:	e009      	b.n	8006bda <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bce:	e004      	b.n	8006bda <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f96d 	bl	8006eb2 <USBD_CtlError>
  }
}
 8006bd8:	bf00      	nop
 8006bda:	bf00      	nop
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
	...

08006be4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	885b      	ldrh	r3, [r3, #2]
 8006bf2:	b2da      	uxtb	r2, r3
 8006bf4:	4b41      	ldr	r3, [pc, #260]	; (8006cfc <USBD_SetConfig+0x118>)
 8006bf6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006bf8:	4b40      	ldr	r3, [pc, #256]	; (8006cfc <USBD_SetConfig+0x118>)
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d904      	bls.n	8006c0a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006c00:	6839      	ldr	r1, [r7, #0]
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f955 	bl	8006eb2 <USBD_CtlError>
 8006c08:	e075      	b.n	8006cf6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d002      	beq.n	8006c1a <USBD_SetConfig+0x36>
 8006c14:	2b03      	cmp	r3, #3
 8006c16:	d023      	beq.n	8006c60 <USBD_SetConfig+0x7c>
 8006c18:	e062      	b.n	8006ce0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006c1a:	4b38      	ldr	r3, [pc, #224]	; (8006cfc <USBD_SetConfig+0x118>)
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d01a      	beq.n	8006c58 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006c22:	4b36      	ldr	r3, [pc, #216]	; (8006cfc <USBD_SetConfig+0x118>)
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	461a      	mov	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2203      	movs	r2, #3
 8006c30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006c34:	4b31      	ldr	r3, [pc, #196]	; (8006cfc <USBD_SetConfig+0x118>)
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	4619      	mov	r1, r3
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7ff f9e7 	bl	800600e <USBD_SetClassConfig>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d104      	bne.n	8006c50 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006c46:	6839      	ldr	r1, [r7, #0]
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 f932 	bl	8006eb2 <USBD_CtlError>
            return;
 8006c4e:	e052      	b.n	8006cf6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f9f6 	bl	8007042 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006c56:	e04e      	b.n	8006cf6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f9f2 	bl	8007042 <USBD_CtlSendStatus>
        break;
 8006c5e:	e04a      	b.n	8006cf6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006c60:	4b26      	ldr	r3, [pc, #152]	; (8006cfc <USBD_SetConfig+0x118>)
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d112      	bne.n	8006c8e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006c70:	4b22      	ldr	r3, [pc, #136]	; (8006cfc <USBD_SetConfig+0x118>)
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	461a      	mov	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006c7a:	4b20      	ldr	r3, [pc, #128]	; (8006cfc <USBD_SetConfig+0x118>)
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	4619      	mov	r1, r3
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f7ff f9e3 	bl	800604c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f9db 	bl	8007042 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006c8c:	e033      	b.n	8006cf6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006c8e:	4b1b      	ldr	r3, [pc, #108]	; (8006cfc <USBD_SetConfig+0x118>)
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	461a      	mov	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d01d      	beq.n	8006cd8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f7ff f9d1 	bl	800604c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006caa:	4b14      	ldr	r3, [pc, #80]	; (8006cfc <USBD_SetConfig+0x118>)
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	461a      	mov	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006cb4:	4b11      	ldr	r3, [pc, #68]	; (8006cfc <USBD_SetConfig+0x118>)
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	4619      	mov	r1, r3
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7ff f9a7 	bl	800600e <USBD_SetClassConfig>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d104      	bne.n	8006cd0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006cc6:	6839      	ldr	r1, [r7, #0]
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 f8f2 	bl	8006eb2 <USBD_CtlError>
            return;
 8006cce:	e012      	b.n	8006cf6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 f9b6 	bl	8007042 <USBD_CtlSendStatus>
        break;
 8006cd6:	e00e      	b.n	8006cf6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f9b2 	bl	8007042 <USBD_CtlSendStatus>
        break;
 8006cde:	e00a      	b.n	8006cf6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006ce0:	6839      	ldr	r1, [r7, #0]
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f8e5 	bl	8006eb2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006ce8:	4b04      	ldr	r3, [pc, #16]	; (8006cfc <USBD_SetConfig+0x118>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	4619      	mov	r1, r3
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f7ff f9ac 	bl	800604c <USBD_ClrClassConfig>
        break;
 8006cf4:	bf00      	nop
    }
  }
}
 8006cf6:	3708      	adds	r7, #8
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	20000210 	.word	0x20000210

08006d00 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	88db      	ldrh	r3, [r3, #6]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d004      	beq.n	8006d1c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006d12:	6839      	ldr	r1, [r7, #0]
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 f8cc 	bl	8006eb2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006d1a:	e022      	b.n	8006d62 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	dc02      	bgt.n	8006d2c <USBD_GetConfig+0x2c>
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	dc03      	bgt.n	8006d32 <USBD_GetConfig+0x32>
 8006d2a:	e015      	b.n	8006d58 <USBD_GetConfig+0x58>
 8006d2c:	2b03      	cmp	r3, #3
 8006d2e:	d00b      	beq.n	8006d48 <USBD_GetConfig+0x48>
 8006d30:	e012      	b.n	8006d58 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	3308      	adds	r3, #8
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	4619      	mov	r1, r3
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 f920 	bl	8006f86 <USBD_CtlSendData>
        break;
 8006d46:	e00c      	b.n	8006d62 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	3304      	adds	r3, #4
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	4619      	mov	r1, r3
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f918 	bl	8006f86 <USBD_CtlSendData>
        break;
 8006d56:	e004      	b.n	8006d62 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006d58:	6839      	ldr	r1, [r7, #0]
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f8a9 	bl	8006eb2 <USBD_CtlError>
        break;
 8006d60:	bf00      	nop
}
 8006d62:	bf00      	nop
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b082      	sub	sp, #8
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d81e      	bhi.n	8006dbe <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	88db      	ldrh	r3, [r3, #6]
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	d004      	beq.n	8006d92 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006d88:	6839      	ldr	r1, [r7, #0]
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f891 	bl	8006eb2 <USBD_CtlError>
        break;
 8006d90:	e01a      	b.n	8006dc8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2201      	movs	r2, #1
 8006d96:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d005      	beq.n	8006dae <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	f043 0202 	orr.w	r2, r3, #2
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	330c      	adds	r3, #12
 8006db2:	2202      	movs	r2, #2
 8006db4:	4619      	mov	r1, r3
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f8e5 	bl	8006f86 <USBD_CtlSendData>
      break;
 8006dbc:	e004      	b.n	8006dc8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006dbe:	6839      	ldr	r1, [r7, #0]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 f876 	bl	8006eb2 <USBD_CtlError>
      break;
 8006dc6:	bf00      	nop
  }
}
 8006dc8:	bf00      	nop
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	885b      	ldrh	r3, [r3, #2]
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d106      	bne.n	8006df0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 f929 	bl	8007042 <USBD_CtlSendStatus>
  }
}
 8006df0:	bf00      	nop
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d80b      	bhi.n	8006e26 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	885b      	ldrh	r3, [r3, #2]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d10c      	bne.n	8006e30 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f90f 	bl	8007042 <USBD_CtlSendStatus>
      }
      break;
 8006e24:	e004      	b.n	8006e30 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006e26:	6839      	ldr	r1, [r7, #0]
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 f842 	bl	8006eb2 <USBD_CtlError>
      break;
 8006e2e:	e000      	b.n	8006e32 <USBD_ClrFeature+0x3a>
      break;
 8006e30:	bf00      	nop
  }
}
 8006e32:	bf00      	nop
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b083      	sub	sp, #12
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
 8006e42:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	781a      	ldrb	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	785a      	ldrb	r2, [r3, #1]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	3302      	adds	r3, #2
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	3303      	adds	r3, #3
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	021b      	lsls	r3, r3, #8
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	4413      	add	r3, r2
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	3304      	adds	r3, #4
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	3305      	adds	r3, #5
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	021b      	lsls	r3, r3, #8
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	4413      	add	r3, r2
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	3306      	adds	r3, #6
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	3307      	adds	r3, #7
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	021b      	lsls	r3, r3, #8
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	4413      	add	r3, r2
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	80da      	strh	r2, [r3, #6]

}
 8006ea8:	bf00      	nop
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bc80      	pop	{r7}
 8006eb0:	4770      	bx	lr

08006eb2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b082      	sub	sp, #8
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
 8006eba:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006ebc:	2180      	movs	r1, #128	; 0x80
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 fc54 	bl	800776c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fc50 	bl	800776c <USBD_LL_StallEP>
}
 8006ecc:	bf00      	nop
 8006ece:	3708      	adds	r7, #8
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b086      	sub	sp, #24
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d032      	beq.n	8006f50 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f000 f834 	bl	8006f58 <USBD_GetLen>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	005b      	lsls	r3, r3, #1
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006efe:	7dfb      	ldrb	r3, [r7, #23]
 8006f00:	1c5a      	adds	r2, r3, #1
 8006f02:	75fa      	strb	r2, [r7, #23]
 8006f04:	461a      	mov	r2, r3
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	4413      	add	r3, r2
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	7812      	ldrb	r2, [r2, #0]
 8006f0e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006f10:	7dfb      	ldrb	r3, [r7, #23]
 8006f12:	1c5a      	adds	r2, r3, #1
 8006f14:	75fa      	strb	r2, [r7, #23]
 8006f16:	461a      	mov	r2, r3
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	2203      	movs	r2, #3
 8006f1e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006f20:	e012      	b.n	8006f48 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	1c5a      	adds	r2, r3, #1
 8006f26:	60fa      	str	r2, [r7, #12]
 8006f28:	7dfa      	ldrb	r2, [r7, #23]
 8006f2a:	1c51      	adds	r1, r2, #1
 8006f2c:	75f9      	strb	r1, [r7, #23]
 8006f2e:	4611      	mov	r1, r2
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	440a      	add	r2, r1
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006f38:	7dfb      	ldrb	r3, [r7, #23]
 8006f3a:	1c5a      	adds	r2, r3, #1
 8006f3c:	75fa      	strb	r2, [r7, #23]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	4413      	add	r3, r2
 8006f44:	2200      	movs	r2, #0
 8006f46:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1e8      	bne.n	8006f22 <USBD_GetString+0x4e>
    }
  }
}
 8006f50:	bf00      	nop
 8006f52:	3718      	adds	r7, #24
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006f60:	2300      	movs	r3, #0
 8006f62:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006f64:	e005      	b.n	8006f72 <USBD_GetLen+0x1a>
  {
    len++;
 8006f66:	7bfb      	ldrb	r3, [r7, #15]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1f5      	bne.n	8006f66 <USBD_GetLen+0xe>
  }

  return len;
 8006f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bc80      	pop	{r7}
 8006f84:	4770      	bx	lr

08006f86 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b084      	sub	sp, #16
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	60f8      	str	r0, [r7, #12]
 8006f8e:	60b9      	str	r1, [r7, #8]
 8006f90:	4613      	mov	r3, r2
 8006f92:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2202      	movs	r2, #2
 8006f98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006f9c:	88fa      	ldrh	r2, [r7, #6]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006fa2:	88fa      	ldrh	r2, [r7, #6]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006fa8:	88fb      	ldrh	r3, [r7, #6]
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	2100      	movs	r1, #0
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f000 fc65 	bl	800787e <USBD_LL_Transmit>

  return USBD_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b084      	sub	sp, #16
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	60f8      	str	r0, [r7, #12]
 8006fc6:	60b9      	str	r1, [r7, #8]
 8006fc8:	4613      	mov	r3, r2
 8006fca:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006fcc:	88fb      	ldrh	r3, [r7, #6]
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	2100      	movs	r1, #0
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	f000 fc53 	bl	800787e <USBD_LL_Transmit>

  return USBD_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b084      	sub	sp, #16
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	60f8      	str	r0, [r7, #12]
 8006fea:	60b9      	str	r1, [r7, #8]
 8006fec:	4613      	mov	r3, r2
 8006fee:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2203      	movs	r2, #3
 8006ff4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006ff8:	88fa      	ldrh	r2, [r7, #6]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007000:	88fa      	ldrh	r2, [r7, #6]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007008:	88fb      	ldrh	r3, [r7, #6]
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	2100      	movs	r1, #0
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f000 fc58 	bl	80078c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b084      	sub	sp, #16
 8007022:	af00      	add	r7, sp, #0
 8007024:	60f8      	str	r0, [r7, #12]
 8007026:	60b9      	str	r1, [r7, #8]
 8007028:	4613      	mov	r3, r2
 800702a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800702c:	88fb      	ldrh	r3, [r7, #6]
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	2100      	movs	r1, #0
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f000 fc46 	bl	80078c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b082      	sub	sp, #8
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2204      	movs	r2, #4
 800704e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007052:	2300      	movs	r3, #0
 8007054:	2200      	movs	r2, #0
 8007056:	2100      	movs	r1, #0
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fc10 	bl	800787e <USBD_LL_Transmit>

  return USBD_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2205      	movs	r2, #5
 8007074:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007078:	2300      	movs	r3, #0
 800707a:	2200      	movs	r2, #0
 800707c:	2100      	movs	r1, #0
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 fc20 	bl	80078c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3708      	adds	r7, #8
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
	...

08007090 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007094:	2200      	movs	r2, #0
 8007096:	4912      	ldr	r1, [pc, #72]	; (80070e0 <MX_USB_DEVICE_Init+0x50>)
 8007098:	4812      	ldr	r0, [pc, #72]	; (80070e4 <MX_USB_DEVICE_Init+0x54>)
 800709a:	f7fe ff5e 	bl	8005f5a <USBD_Init>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d001      	beq.n	80070a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80070a4:	f7f9 f9a8 	bl	80003f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80070a8:	490f      	ldr	r1, [pc, #60]	; (80070e8 <MX_USB_DEVICE_Init+0x58>)
 80070aa:	480e      	ldr	r0, [pc, #56]	; (80070e4 <MX_USB_DEVICE_Init+0x54>)
 80070ac:	f7fe ff80 	bl	8005fb0 <USBD_RegisterClass>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d001      	beq.n	80070ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80070b6:	f7f9 f99f 	bl	80003f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80070ba:	490c      	ldr	r1, [pc, #48]	; (80070ec <MX_USB_DEVICE_Init+0x5c>)
 80070bc:	4809      	ldr	r0, [pc, #36]	; (80070e4 <MX_USB_DEVICE_Init+0x54>)
 80070be:	f7fe feb1 	bl	8005e24 <USBD_CDC_RegisterInterface>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d001      	beq.n	80070cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80070c8:	f7f9 f996 	bl	80003f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80070cc:	4805      	ldr	r0, [pc, #20]	; (80070e4 <MX_USB_DEVICE_Init+0x54>)
 80070ce:	f7fe ff88 	bl	8005fe2 <USBD_Start>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d001      	beq.n	80070dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80070d8:	f7f9 f98e 	bl	80003f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80070dc:	bf00      	nop
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	2000012c 	.word	0x2000012c
 80070e4:	200004b4 	.word	0x200004b4
 80070e8:	20000018 	.word	0x20000018
 80070ec:	2000011c 	.word	0x2000011c

080070f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80070f4:	2200      	movs	r2, #0
 80070f6:	4905      	ldr	r1, [pc, #20]	; (800710c <CDC_Init_FS+0x1c>)
 80070f8:	4805      	ldr	r0, [pc, #20]	; (8007110 <CDC_Init_FS+0x20>)
 80070fa:	f7fe fea9 	bl	8005e50 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80070fe:	4905      	ldr	r1, [pc, #20]	; (8007114 <CDC_Init_FS+0x24>)
 8007100:	4803      	ldr	r0, [pc, #12]	; (8007110 <CDC_Init_FS+0x20>)
 8007102:	f7fe febe 	bl	8005e82 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007106:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007108:	4618      	mov	r0, r3
 800710a:	bd80      	pop	{r7, pc}
 800710c:	20000b60 	.word	0x20000b60
 8007110:	200004b4 	.word	0x200004b4
 8007114:	20000778 	.word	0x20000778

08007118 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007118:	b480      	push	{r7}
 800711a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800711c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800711e:	4618      	mov	r0, r3
 8007120:	46bd      	mov	sp, r7
 8007122:	bc80      	pop	{r7}
 8007124:	4770      	bx	lr
	...

08007128 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	4603      	mov	r3, r0
 8007130:	6039      	str	r1, [r7, #0]
 8007132:	71fb      	strb	r3, [r7, #7]
 8007134:	4613      	mov	r3, r2
 8007136:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007138:	79fb      	ldrb	r3, [r7, #7]
 800713a:	2b23      	cmp	r3, #35	; 0x23
 800713c:	d84a      	bhi.n	80071d4 <CDC_Control_FS+0xac>
 800713e:	a201      	add	r2, pc, #4	; (adr r2, 8007144 <CDC_Control_FS+0x1c>)
 8007140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007144:	080071d5 	.word	0x080071d5
 8007148:	080071d5 	.word	0x080071d5
 800714c:	080071d5 	.word	0x080071d5
 8007150:	080071d5 	.word	0x080071d5
 8007154:	080071d5 	.word	0x080071d5
 8007158:	080071d5 	.word	0x080071d5
 800715c:	080071d5 	.word	0x080071d5
 8007160:	080071d5 	.word	0x080071d5
 8007164:	080071d5 	.word	0x080071d5
 8007168:	080071d5 	.word	0x080071d5
 800716c:	080071d5 	.word	0x080071d5
 8007170:	080071d5 	.word	0x080071d5
 8007174:	080071d5 	.word	0x080071d5
 8007178:	080071d5 	.word	0x080071d5
 800717c:	080071d5 	.word	0x080071d5
 8007180:	080071d5 	.word	0x080071d5
 8007184:	080071d5 	.word	0x080071d5
 8007188:	080071d5 	.word	0x080071d5
 800718c:	080071d5 	.word	0x080071d5
 8007190:	080071d5 	.word	0x080071d5
 8007194:	080071d5 	.word	0x080071d5
 8007198:	080071d5 	.word	0x080071d5
 800719c:	080071d5 	.word	0x080071d5
 80071a0:	080071d5 	.word	0x080071d5
 80071a4:	080071d5 	.word	0x080071d5
 80071a8:	080071d5 	.word	0x080071d5
 80071ac:	080071d5 	.word	0x080071d5
 80071b0:	080071d5 	.word	0x080071d5
 80071b4:	080071d5 	.word	0x080071d5
 80071b8:	080071d5 	.word	0x080071d5
 80071bc:	080071d5 	.word	0x080071d5
 80071c0:	080071d5 	.word	0x080071d5
 80071c4:	080071d5 	.word	0x080071d5
 80071c8:	080071d5 	.word	0x080071d5
 80071cc:	080071d5 	.word	0x080071d5
 80071d0:	080071d5 	.word	0x080071d5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80071d4:	bf00      	nop
  }

  return (USBD_OK);
 80071d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80071d8:	4618      	mov	r0, r3
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	bc80      	pop	{r7}
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop

080071e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80071ee:	6879      	ldr	r1, [r7, #4]
 80071f0:	4805      	ldr	r0, [pc, #20]	; (8007208 <CDC_Receive_FS+0x24>)
 80071f2:	f7fe fe46 	bl	8005e82 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80071f6:	4804      	ldr	r0, [pc, #16]	; (8007208 <CDC_Receive_FS+0x24>)
 80071f8:	f7fe fe85 	bl	8005f06 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80071fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	200004b4 	.word	0x200004b4

0800720c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	460b      	mov	r3, r1
 8007216:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007218:	2300      	movs	r3, #0
 800721a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800721c:	4b0d      	ldr	r3, [pc, #52]	; (8007254 <CDC_Transmit_FS+0x48>)
 800721e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007222:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800722a:	2b00      	cmp	r3, #0
 800722c:	d001      	beq.n	8007232 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800722e:	2301      	movs	r3, #1
 8007230:	e00b      	b.n	800724a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007232:	887b      	ldrh	r3, [r7, #2]
 8007234:	461a      	mov	r2, r3
 8007236:	6879      	ldr	r1, [r7, #4]
 8007238:	4806      	ldr	r0, [pc, #24]	; (8007254 <CDC_Transmit_FS+0x48>)
 800723a:	f7fe fe09 	bl	8005e50 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800723e:	4805      	ldr	r0, [pc, #20]	; (8007254 <CDC_Transmit_FS+0x48>)
 8007240:	f7fe fe32 	bl	8005ea8 <USBD_CDC_TransmitPacket>
 8007244:	4603      	mov	r3, r0
 8007246:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007248:	7bfb      	ldrb	r3, [r7, #15]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	200004b4 	.word	0x200004b4

08007258 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	4603      	mov	r3, r0
 8007260:	6039      	str	r1, [r7, #0]
 8007262:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	2212      	movs	r2, #18
 8007268:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800726a:	4b03      	ldr	r3, [pc, #12]	; (8007278 <USBD_FS_DeviceDescriptor+0x20>)
}
 800726c:	4618      	mov	r0, r3
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	bc80      	pop	{r7}
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	20000148 	.word	0x20000148

0800727c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	4603      	mov	r3, r0
 8007284:	6039      	str	r1, [r7, #0]
 8007286:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	2204      	movs	r2, #4
 800728c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800728e:	4b03      	ldr	r3, [pc, #12]	; (800729c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007290:	4618      	mov	r0, r3
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	bc80      	pop	{r7}
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	2000015c 	.word	0x2000015c

080072a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	4603      	mov	r3, r0
 80072a8:	6039      	str	r1, [r7, #0]
 80072aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80072ac:	79fb      	ldrb	r3, [r7, #7]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d105      	bne.n	80072be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	4907      	ldr	r1, [pc, #28]	; (80072d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80072b6:	4808      	ldr	r0, [pc, #32]	; (80072d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80072b8:	f7ff fe0c 	bl	8006ed4 <USBD_GetString>
 80072bc:	e004      	b.n	80072c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80072be:	683a      	ldr	r2, [r7, #0]
 80072c0:	4904      	ldr	r1, [pc, #16]	; (80072d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80072c2:	4805      	ldr	r0, [pc, #20]	; (80072d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80072c4:	f7ff fe06 	bl	8006ed4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80072c8:	4b02      	ldr	r3, [pc, #8]	; (80072d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3708      	adds	r7, #8
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	20000f48 	.word	0x20000f48
 80072d8:	080082dc 	.word	0x080082dc

080072dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	4603      	mov	r3, r0
 80072e4:	6039      	str	r1, [r7, #0]
 80072e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80072e8:	683a      	ldr	r2, [r7, #0]
 80072ea:	4904      	ldr	r1, [pc, #16]	; (80072fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80072ec:	4804      	ldr	r0, [pc, #16]	; (8007300 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80072ee:	f7ff fdf1 	bl	8006ed4 <USBD_GetString>
  return USBD_StrDesc;
 80072f2:	4b02      	ldr	r3, [pc, #8]	; (80072fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3708      	adds	r7, #8
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	20000f48 	.word	0x20000f48
 8007300:	080082f4 	.word	0x080082f4

08007304 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	4603      	mov	r3, r0
 800730c:	6039      	str	r1, [r7, #0]
 800730e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	221a      	movs	r2, #26
 8007314:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007316:	f000 f843 	bl	80073a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800731a:	4b02      	ldr	r3, [pc, #8]	; (8007324 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800731c:	4618      	mov	r0, r3
 800731e:	3708      	adds	r7, #8
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	20000160 	.word	0x20000160

08007328 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	4603      	mov	r3, r0
 8007330:	6039      	str	r1, [r7, #0]
 8007332:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007334:	79fb      	ldrb	r3, [r7, #7]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d105      	bne.n	8007346 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800733a:	683a      	ldr	r2, [r7, #0]
 800733c:	4907      	ldr	r1, [pc, #28]	; (800735c <USBD_FS_ConfigStrDescriptor+0x34>)
 800733e:	4808      	ldr	r0, [pc, #32]	; (8007360 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007340:	f7ff fdc8 	bl	8006ed4 <USBD_GetString>
 8007344:	e004      	b.n	8007350 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	4904      	ldr	r1, [pc, #16]	; (800735c <USBD_FS_ConfigStrDescriptor+0x34>)
 800734a:	4805      	ldr	r0, [pc, #20]	; (8007360 <USBD_FS_ConfigStrDescriptor+0x38>)
 800734c:	f7ff fdc2 	bl	8006ed4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007350:	4b02      	ldr	r3, [pc, #8]	; (800735c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007352:	4618      	mov	r0, r3
 8007354:	3708      	adds	r7, #8
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	20000f48 	.word	0x20000f48
 8007360:	08008308 	.word	0x08008308

08007364 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	4603      	mov	r3, r0
 800736c:	6039      	str	r1, [r7, #0]
 800736e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007370:	79fb      	ldrb	r3, [r7, #7]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d105      	bne.n	8007382 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007376:	683a      	ldr	r2, [r7, #0]
 8007378:	4907      	ldr	r1, [pc, #28]	; (8007398 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800737a:	4808      	ldr	r0, [pc, #32]	; (800739c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800737c:	f7ff fdaa 	bl	8006ed4 <USBD_GetString>
 8007380:	e004      	b.n	800738c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007382:	683a      	ldr	r2, [r7, #0]
 8007384:	4904      	ldr	r1, [pc, #16]	; (8007398 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007386:	4805      	ldr	r0, [pc, #20]	; (800739c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007388:	f7ff fda4 	bl	8006ed4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800738c:	4b02      	ldr	r3, [pc, #8]	; (8007398 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800738e:	4618      	mov	r0, r3
 8007390:	3708      	adds	r7, #8
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	20000f48 	.word	0x20000f48
 800739c:	08008314 	.word	0x08008314

080073a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80073a6:	4b0f      	ldr	r3, [pc, #60]	; (80073e4 <Get_SerialNum+0x44>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80073ac:	4b0e      	ldr	r3, [pc, #56]	; (80073e8 <Get_SerialNum+0x48>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80073b2:	4b0e      	ldr	r3, [pc, #56]	; (80073ec <Get_SerialNum+0x4c>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4413      	add	r3, r2
 80073be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d009      	beq.n	80073da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80073c6:	2208      	movs	r2, #8
 80073c8:	4909      	ldr	r1, [pc, #36]	; (80073f0 <Get_SerialNum+0x50>)
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f000 f814 	bl	80073f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80073d0:	2204      	movs	r2, #4
 80073d2:	4908      	ldr	r1, [pc, #32]	; (80073f4 <Get_SerialNum+0x54>)
 80073d4:	68b8      	ldr	r0, [r7, #8]
 80073d6:	f000 f80f 	bl	80073f8 <IntToUnicode>
  }
}
 80073da:	bf00      	nop
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	1ffff7e8 	.word	0x1ffff7e8
 80073e8:	1ffff7ec 	.word	0x1ffff7ec
 80073ec:	1ffff7f0 	.word	0x1ffff7f0
 80073f0:	20000162 	.word	0x20000162
 80073f4:	20000172 	.word	0x20000172

080073f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b087      	sub	sp, #28
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	4613      	mov	r3, r2
 8007404:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007406:	2300      	movs	r3, #0
 8007408:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800740a:	2300      	movs	r3, #0
 800740c:	75fb      	strb	r3, [r7, #23]
 800740e:	e027      	b.n	8007460 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	0f1b      	lsrs	r3, r3, #28
 8007414:	2b09      	cmp	r3, #9
 8007416:	d80b      	bhi.n	8007430 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	0f1b      	lsrs	r3, r3, #28
 800741c:	b2da      	uxtb	r2, r3
 800741e:	7dfb      	ldrb	r3, [r7, #23]
 8007420:	005b      	lsls	r3, r3, #1
 8007422:	4619      	mov	r1, r3
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	440b      	add	r3, r1
 8007428:	3230      	adds	r2, #48	; 0x30
 800742a:	b2d2      	uxtb	r2, r2
 800742c:	701a      	strb	r2, [r3, #0]
 800742e:	e00a      	b.n	8007446 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	0f1b      	lsrs	r3, r3, #28
 8007434:	b2da      	uxtb	r2, r3
 8007436:	7dfb      	ldrb	r3, [r7, #23]
 8007438:	005b      	lsls	r3, r3, #1
 800743a:	4619      	mov	r1, r3
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	440b      	add	r3, r1
 8007440:	3237      	adds	r2, #55	; 0x37
 8007442:	b2d2      	uxtb	r2, r2
 8007444:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	011b      	lsls	r3, r3, #4
 800744a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800744c:	7dfb      	ldrb	r3, [r7, #23]
 800744e:	005b      	lsls	r3, r3, #1
 8007450:	3301      	adds	r3, #1
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	4413      	add	r3, r2
 8007456:	2200      	movs	r2, #0
 8007458:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800745a:	7dfb      	ldrb	r3, [r7, #23]
 800745c:	3301      	adds	r3, #1
 800745e:	75fb      	strb	r3, [r7, #23]
 8007460:	7dfa      	ldrb	r2, [r7, #23]
 8007462:	79fb      	ldrb	r3, [r7, #7]
 8007464:	429a      	cmp	r2, r3
 8007466:	d3d3      	bcc.n	8007410 <IntToUnicode+0x18>
  }
}
 8007468:	bf00      	nop
 800746a:	bf00      	nop
 800746c:	371c      	adds	r7, #28
 800746e:	46bd      	mov	sp, r7
 8007470:	bc80      	pop	{r7}
 8007472:	4770      	bx	lr

08007474 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a0d      	ldr	r2, [pc, #52]	; (80074b8 <HAL_PCD_MspInit+0x44>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d113      	bne.n	80074ae <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007486:	4b0d      	ldr	r3, [pc, #52]	; (80074bc <HAL_PCD_MspInit+0x48>)
 8007488:	69db      	ldr	r3, [r3, #28]
 800748a:	4a0c      	ldr	r2, [pc, #48]	; (80074bc <HAL_PCD_MspInit+0x48>)
 800748c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007490:	61d3      	str	r3, [r2, #28]
 8007492:	4b0a      	ldr	r3, [pc, #40]	; (80074bc <HAL_PCD_MspInit+0x48>)
 8007494:	69db      	ldr	r3, [r3, #28]
 8007496:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800749a:	60fb      	str	r3, [r7, #12]
 800749c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800749e:	2200      	movs	r2, #0
 80074a0:	2100      	movs	r1, #0
 80074a2:	2014      	movs	r0, #20
 80074a4:	f7f9 fdf7 	bl	8001096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80074a8:	2014      	movs	r0, #20
 80074aa:	f7f9 fe10 	bl	80010ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80074ae:	bf00      	nop
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	40005c00 	.word	0x40005c00
 80074bc:	40021000 	.word	0x40021000

080074c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80074d4:	4619      	mov	r1, r3
 80074d6:	4610      	mov	r0, r2
 80074d8:	f7fe fdcb 	bl	8006072 <USBD_LL_SetupStage>
}
 80074dc:	bf00      	nop
 80074de:	3708      	adds	r7, #8
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	460b      	mov	r3, r1
 80074ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80074f6:	78fa      	ldrb	r2, [r7, #3]
 80074f8:	6879      	ldr	r1, [r7, #4]
 80074fa:	4613      	mov	r3, r2
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	4413      	add	r3, r2
 8007500:	00db      	lsls	r3, r3, #3
 8007502:	440b      	add	r3, r1
 8007504:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	78fb      	ldrb	r3, [r7, #3]
 800750c:	4619      	mov	r1, r3
 800750e:	f7fe fdfd 	bl	800610c <USBD_LL_DataOutStage>
}
 8007512:	bf00      	nop
 8007514:	3708      	adds	r7, #8
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b082      	sub	sp, #8
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
 8007522:	460b      	mov	r3, r1
 8007524:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800752c:	78fa      	ldrb	r2, [r7, #3]
 800752e:	6879      	ldr	r1, [r7, #4]
 8007530:	4613      	mov	r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	4413      	add	r3, r2
 8007536:	00db      	lsls	r3, r3, #3
 8007538:	440b      	add	r3, r1
 800753a:	333c      	adds	r3, #60	; 0x3c
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	78fb      	ldrb	r3, [r7, #3]
 8007540:	4619      	mov	r1, r3
 8007542:	f7fe fe54 	bl	80061ee <USBD_LL_DataInStage>
}
 8007546:	bf00      	nop
 8007548:	3708      	adds	r7, #8
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b082      	sub	sp, #8
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800755c:	4618      	mov	r0, r3
 800755e:	f7fe ff64 	bl	800642a <USBD_LL_SOF>
}
 8007562:	bf00      	nop
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b084      	sub	sp, #16
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007572:	2301      	movs	r3, #1
 8007574:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	2b02      	cmp	r3, #2
 800757c:	d001      	beq.n	8007582 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800757e:	f7f8 ff3b 	bl	80003f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007588:	7bfa      	ldrb	r2, [r7, #15]
 800758a:	4611      	mov	r1, r2
 800758c:	4618      	mov	r0, r3
 800758e:	f7fe ff14 	bl	80063ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007598:	4618      	mov	r0, r3
 800759a:	f7fe fecd 	bl	8006338 <USBD_LL_Reset>
}
 800759e:	bf00      	nop
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
	...

080075a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fe ff0e 	bl	80063d8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d005      	beq.n	80075d0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80075c4:	4b04      	ldr	r3, [pc, #16]	; (80075d8 <HAL_PCD_SuspendCallback+0x30>)
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	4a03      	ldr	r2, [pc, #12]	; (80075d8 <HAL_PCD_SuspendCallback+0x30>)
 80075ca:	f043 0306 	orr.w	r3, r3, #6
 80075ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80075d0:	bf00      	nop
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	e000ed00 	.word	0xe000ed00

080075dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7fe ff08 	bl	8006400 <USBD_LL_Resume>
}
 80075f0:	bf00      	nop
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007600:	4a28      	ldr	r2, [pc, #160]	; (80076a4 <USBD_LL_Init+0xac>)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a26      	ldr	r2, [pc, #152]	; (80076a4 <USBD_LL_Init+0xac>)
 800760c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007610:	4b24      	ldr	r3, [pc, #144]	; (80076a4 <USBD_LL_Init+0xac>)
 8007612:	4a25      	ldr	r2, [pc, #148]	; (80076a8 <USBD_LL_Init+0xb0>)
 8007614:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007616:	4b23      	ldr	r3, [pc, #140]	; (80076a4 <USBD_LL_Init+0xac>)
 8007618:	2208      	movs	r2, #8
 800761a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800761c:	4b21      	ldr	r3, [pc, #132]	; (80076a4 <USBD_LL_Init+0xac>)
 800761e:	2202      	movs	r2, #2
 8007620:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007622:	4b20      	ldr	r3, [pc, #128]	; (80076a4 <USBD_LL_Init+0xac>)
 8007624:	2200      	movs	r2, #0
 8007626:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007628:	4b1e      	ldr	r3, [pc, #120]	; (80076a4 <USBD_LL_Init+0xac>)
 800762a:	2200      	movs	r2, #0
 800762c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800762e:	4b1d      	ldr	r3, [pc, #116]	; (80076a4 <USBD_LL_Init+0xac>)
 8007630:	2200      	movs	r2, #0
 8007632:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007634:	481b      	ldr	r0, [pc, #108]	; (80076a4 <USBD_LL_Init+0xac>)
 8007636:	f7fa f8d7 	bl	80017e8 <HAL_PCD_Init>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d001      	beq.n	8007644 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007640:	f7f8 feda 	bl	80003f8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800764a:	2318      	movs	r3, #24
 800764c:	2200      	movs	r2, #0
 800764e:	2100      	movs	r1, #0
 8007650:	f7fb fc19 	bl	8002e86 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800765a:	2358      	movs	r3, #88	; 0x58
 800765c:	2200      	movs	r2, #0
 800765e:	2180      	movs	r1, #128	; 0x80
 8007660:	f7fb fc11 	bl	8002e86 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800766a:	23c0      	movs	r3, #192	; 0xc0
 800766c:	2200      	movs	r2, #0
 800766e:	2181      	movs	r1, #129	; 0x81
 8007670:	f7fb fc09 	bl	8002e86 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800767a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800767e:	2200      	movs	r2, #0
 8007680:	2101      	movs	r1, #1
 8007682:	f7fb fc00 	bl	8002e86 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800768c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007690:	2200      	movs	r2, #0
 8007692:	2182      	movs	r1, #130	; 0x82
 8007694:	f7fb fbf7 	bl	8002e86 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3708      	adds	r7, #8
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	20001148 	.word	0x20001148
 80076a8:	40005c00 	.word	0x40005c00

080076ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076b4:	2300      	movs	r3, #0
 80076b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076b8:	2300      	movs	r3, #0
 80076ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7fa f99b 	bl	80019fe <HAL_PCD_Start>
 80076c8:	4603      	mov	r3, r0
 80076ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076cc:	7bfb      	ldrb	r3, [r7, #15]
 80076ce:	4618      	mov	r0, r3
 80076d0:	f000 f94e 	bl	8007970 <USBD_Get_USB_Status>
 80076d4:	4603      	mov	r3, r0
 80076d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b084      	sub	sp, #16
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
 80076ea:	4608      	mov	r0, r1
 80076ec:	4611      	mov	r1, r2
 80076ee:	461a      	mov	r2, r3
 80076f0:	4603      	mov	r3, r0
 80076f2:	70fb      	strb	r3, [r7, #3]
 80076f4:	460b      	mov	r3, r1
 80076f6:	70bb      	strb	r3, [r7, #2]
 80076f8:	4613      	mov	r3, r2
 80076fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076fc:	2300      	movs	r3, #0
 80076fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007700:	2300      	movs	r3, #0
 8007702:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800770a:	78bb      	ldrb	r3, [r7, #2]
 800770c:	883a      	ldrh	r2, [r7, #0]
 800770e:	78f9      	ldrb	r1, [r7, #3]
 8007710:	f7fa fb15 	bl	8001d3e <HAL_PCD_EP_Open>
 8007714:	4603      	mov	r3, r0
 8007716:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007718:	7bfb      	ldrb	r3, [r7, #15]
 800771a:	4618      	mov	r0, r3
 800771c:	f000 f928 	bl	8007970 <USBD_Get_USB_Status>
 8007720:	4603      	mov	r3, r0
 8007722:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007724:	7bbb      	ldrb	r3, [r7, #14]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b084      	sub	sp, #16
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
 8007736:	460b      	mov	r3, r1
 8007738:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800773a:	2300      	movs	r3, #0
 800773c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800773e:	2300      	movs	r3, #0
 8007740:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007748:	78fa      	ldrb	r2, [r7, #3]
 800774a:	4611      	mov	r1, r2
 800774c:	4618      	mov	r0, r3
 800774e:	f7fa fb5c 	bl	8001e0a <HAL_PCD_EP_Close>
 8007752:	4603      	mov	r3, r0
 8007754:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007756:	7bfb      	ldrb	r3, [r7, #15]
 8007758:	4618      	mov	r0, r3
 800775a:	f000 f909 	bl	8007970 <USBD_Get_USB_Status>
 800775e:	4603      	mov	r3, r0
 8007760:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007762:	7bbb      	ldrb	r3, [r7, #14]
}
 8007764:	4618      	mov	r0, r3
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	460b      	mov	r3, r1
 8007776:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007778:	2300      	movs	r3, #0
 800777a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800777c:	2300      	movs	r3, #0
 800777e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007786:	78fa      	ldrb	r2, [r7, #3]
 8007788:	4611      	mov	r1, r2
 800778a:	4618      	mov	r0, r3
 800778c:	f7fa fc1c 	bl	8001fc8 <HAL_PCD_EP_SetStall>
 8007790:	4603      	mov	r3, r0
 8007792:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007794:	7bfb      	ldrb	r3, [r7, #15]
 8007796:	4618      	mov	r0, r3
 8007798:	f000 f8ea 	bl	8007970 <USBD_Get_USB_Status>
 800779c:	4603      	mov	r3, r0
 800779e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b084      	sub	sp, #16
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
 80077b2:	460b      	mov	r3, r1
 80077b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077ba:	2300      	movs	r3, #0
 80077bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077c4:	78fa      	ldrb	r2, [r7, #3]
 80077c6:	4611      	mov	r1, r2
 80077c8:	4618      	mov	r0, r3
 80077ca:	f7fa fc5d 	bl	8002088 <HAL_PCD_EP_ClrStall>
 80077ce:	4603      	mov	r3, r0
 80077d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077d2:	7bfb      	ldrb	r3, [r7, #15]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f000 f8cb 	bl	8007970 <USBD_Get_USB_Status>
 80077da:	4603      	mov	r3, r0
 80077dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077de:	7bbb      	ldrb	r3, [r7, #14]
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3710      	adds	r7, #16
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	460b      	mov	r3, r1
 80077f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80077fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007800:	2b00      	cmp	r3, #0
 8007802:	da0c      	bge.n	800781e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007804:	78fb      	ldrb	r3, [r7, #3]
 8007806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800780a:	68f9      	ldr	r1, [r7, #12]
 800780c:	1c5a      	adds	r2, r3, #1
 800780e:	4613      	mov	r3, r2
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	4413      	add	r3, r2
 8007814:	00db      	lsls	r3, r3, #3
 8007816:	440b      	add	r3, r1
 8007818:	3302      	adds	r3, #2
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	e00b      	b.n	8007836 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800781e:	78fb      	ldrb	r3, [r7, #3]
 8007820:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007824:	68f9      	ldr	r1, [r7, #12]
 8007826:	4613      	mov	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4413      	add	r3, r2
 800782c:	00db      	lsls	r3, r3, #3
 800782e:	440b      	add	r3, r1
 8007830:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007834:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007836:	4618      	mov	r0, r3
 8007838:	3714      	adds	r7, #20
 800783a:	46bd      	mov	sp, r7
 800783c:	bc80      	pop	{r7}
 800783e:	4770      	bx	lr

08007840 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	460b      	mov	r3, r1
 800784a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800784c:	2300      	movs	r3, #0
 800784e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007850:	2300      	movs	r3, #0
 8007852:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800785a:	78fa      	ldrb	r2, [r7, #3]
 800785c:	4611      	mov	r1, r2
 800785e:	4618      	mov	r0, r3
 8007860:	f7fa fa48 	bl	8001cf4 <HAL_PCD_SetAddress>
 8007864:	4603      	mov	r3, r0
 8007866:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007868:	7bfb      	ldrb	r3, [r7, #15]
 800786a:	4618      	mov	r0, r3
 800786c:	f000 f880 	bl	8007970 <USBD_Get_USB_Status>
 8007870:	4603      	mov	r3, r0
 8007872:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007874:	7bbb      	ldrb	r3, [r7, #14]
}
 8007876:	4618      	mov	r0, r3
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b086      	sub	sp, #24
 8007882:	af00      	add	r7, sp, #0
 8007884:	60f8      	str	r0, [r7, #12]
 8007886:	607a      	str	r2, [r7, #4]
 8007888:	461a      	mov	r2, r3
 800788a:	460b      	mov	r3, r1
 800788c:	72fb      	strb	r3, [r7, #11]
 800788e:	4613      	mov	r3, r2
 8007890:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007896:	2300      	movs	r3, #0
 8007898:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80078a0:	893b      	ldrh	r3, [r7, #8]
 80078a2:	7af9      	ldrb	r1, [r7, #11]
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	f7fa fb4c 	bl	8001f42 <HAL_PCD_EP_Transmit>
 80078aa:	4603      	mov	r3, r0
 80078ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078ae:	7dfb      	ldrb	r3, [r7, #23]
 80078b0:	4618      	mov	r0, r3
 80078b2:	f000 f85d 	bl	8007970 <USBD_Get_USB_Status>
 80078b6:	4603      	mov	r3, r0
 80078b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80078ba:	7dbb      	ldrb	r3, [r7, #22]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3718      	adds	r7, #24
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b086      	sub	sp, #24
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	607a      	str	r2, [r7, #4]
 80078ce:	461a      	mov	r2, r3
 80078d0:	460b      	mov	r3, r1
 80078d2:	72fb      	strb	r3, [r7, #11]
 80078d4:	4613      	mov	r3, r2
 80078d6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078d8:	2300      	movs	r3, #0
 80078da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078dc:	2300      	movs	r3, #0
 80078de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80078e6:	893b      	ldrh	r3, [r7, #8]
 80078e8:	7af9      	ldrb	r1, [r7, #11]
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	f7fa fad5 	bl	8001e9a <HAL_PCD_EP_Receive>
 80078f0:	4603      	mov	r3, r0
 80078f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078f4:	7dfb      	ldrb	r3, [r7, #23]
 80078f6:	4618      	mov	r0, r3
 80078f8:	f000 f83a 	bl	8007970 <USBD_Get_USB_Status>
 80078fc:	4603      	mov	r3, r0
 80078fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007900:	7dbb      	ldrb	r3, [r7, #22]
}
 8007902:	4618      	mov	r0, r3
 8007904:	3718      	adds	r7, #24
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b082      	sub	sp, #8
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
 8007912:	460b      	mov	r3, r1
 8007914:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800791c:	78fa      	ldrb	r2, [r7, #3]
 800791e:	4611      	mov	r1, r2
 8007920:	4618      	mov	r0, r3
 8007922:	f7fa faf7 	bl	8001f14 <HAL_PCD_EP_GetRxCount>
 8007926:	4603      	mov	r3, r0
}
 8007928:	4618      	mov	r0, r3
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007938:	4b02      	ldr	r3, [pc, #8]	; (8007944 <USBD_static_malloc+0x14>)
}
 800793a:	4618      	mov	r0, r3
 800793c:	370c      	adds	r7, #12
 800793e:	46bd      	mov	sp, r7
 8007940:	bc80      	pop	{r7}
 8007942:	4770      	bx	lr
 8007944:	20000214 	.word	0x20000214

08007948 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]

}
 8007950:	bf00      	nop
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	bc80      	pop	{r7}
 8007958:	4770      	bx	lr

0800795a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800795a:	b480      	push	{r7}
 800795c:	b083      	sub	sp, #12
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
 8007962:	460b      	mov	r3, r1
 8007964:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007966:	bf00      	nop
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	bc80      	pop	{r7}
 800796e:	4770      	bx	lr

08007970 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	4603      	mov	r3, r0
 8007978:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800797a:	2300      	movs	r3, #0
 800797c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800797e:	79fb      	ldrb	r3, [r7, #7]
 8007980:	2b03      	cmp	r3, #3
 8007982:	d817      	bhi.n	80079b4 <USBD_Get_USB_Status+0x44>
 8007984:	a201      	add	r2, pc, #4	; (adr r2, 800798c <USBD_Get_USB_Status+0x1c>)
 8007986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800798a:	bf00      	nop
 800798c:	0800799d 	.word	0x0800799d
 8007990:	080079a3 	.word	0x080079a3
 8007994:	080079a9 	.word	0x080079a9
 8007998:	080079af 	.word	0x080079af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800799c:	2300      	movs	r3, #0
 800799e:	73fb      	strb	r3, [r7, #15]
    break;
 80079a0:	e00b      	b.n	80079ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80079a2:	2302      	movs	r3, #2
 80079a4:	73fb      	strb	r3, [r7, #15]
    break;
 80079a6:	e008      	b.n	80079ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80079a8:	2301      	movs	r3, #1
 80079aa:	73fb      	strb	r3, [r7, #15]
    break;
 80079ac:	e005      	b.n	80079ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80079ae:	2302      	movs	r3, #2
 80079b0:	73fb      	strb	r3, [r7, #15]
    break;
 80079b2:	e002      	b.n	80079ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80079b4:	2302      	movs	r3, #2
 80079b6:	73fb      	strb	r3, [r7, #15]
    break;
 80079b8:	bf00      	nop
  }
  return usb_status;
 80079ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3714      	adds	r7, #20
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bc80      	pop	{r7}
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop

080079c8 <__errno>:
 80079c8:	4b01      	ldr	r3, [pc, #4]	; (80079d0 <__errno+0x8>)
 80079ca:	6818      	ldr	r0, [r3, #0]
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	2000017c 	.word	0x2000017c

080079d4 <__libc_init_array>:
 80079d4:	b570      	push	{r4, r5, r6, lr}
 80079d6:	2600      	movs	r6, #0
 80079d8:	4d0c      	ldr	r5, [pc, #48]	; (8007a0c <__libc_init_array+0x38>)
 80079da:	4c0d      	ldr	r4, [pc, #52]	; (8007a10 <__libc_init_array+0x3c>)
 80079dc:	1b64      	subs	r4, r4, r5
 80079de:	10a4      	asrs	r4, r4, #2
 80079e0:	42a6      	cmp	r6, r4
 80079e2:	d109      	bne.n	80079f8 <__libc_init_array+0x24>
 80079e4:	f000 fc5c 	bl	80082a0 <_init>
 80079e8:	2600      	movs	r6, #0
 80079ea:	4d0a      	ldr	r5, [pc, #40]	; (8007a14 <__libc_init_array+0x40>)
 80079ec:	4c0a      	ldr	r4, [pc, #40]	; (8007a18 <__libc_init_array+0x44>)
 80079ee:	1b64      	subs	r4, r4, r5
 80079f0:	10a4      	asrs	r4, r4, #2
 80079f2:	42a6      	cmp	r6, r4
 80079f4:	d105      	bne.n	8007a02 <__libc_init_array+0x2e>
 80079f6:	bd70      	pop	{r4, r5, r6, pc}
 80079f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80079fc:	4798      	blx	r3
 80079fe:	3601      	adds	r6, #1
 8007a00:	e7ee      	b.n	80079e0 <__libc_init_array+0xc>
 8007a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a06:	4798      	blx	r3
 8007a08:	3601      	adds	r6, #1
 8007a0a:	e7f2      	b.n	80079f2 <__libc_init_array+0x1e>
 8007a0c:	08008368 	.word	0x08008368
 8007a10:	08008368 	.word	0x08008368
 8007a14:	08008368 	.word	0x08008368
 8007a18:	0800836c 	.word	0x0800836c

08007a1c <memset>:
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	4402      	add	r2, r0
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d100      	bne.n	8007a26 <memset+0xa>
 8007a24:	4770      	bx	lr
 8007a26:	f803 1b01 	strb.w	r1, [r3], #1
 8007a2a:	e7f9      	b.n	8007a20 <memset+0x4>

08007a2c <siprintf>:
 8007a2c:	b40e      	push	{r1, r2, r3}
 8007a2e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a32:	b500      	push	{lr}
 8007a34:	b09c      	sub	sp, #112	; 0x70
 8007a36:	ab1d      	add	r3, sp, #116	; 0x74
 8007a38:	9002      	str	r0, [sp, #8]
 8007a3a:	9006      	str	r0, [sp, #24]
 8007a3c:	9107      	str	r1, [sp, #28]
 8007a3e:	9104      	str	r1, [sp, #16]
 8007a40:	4808      	ldr	r0, [pc, #32]	; (8007a64 <siprintf+0x38>)
 8007a42:	4909      	ldr	r1, [pc, #36]	; (8007a68 <siprintf+0x3c>)
 8007a44:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a48:	9105      	str	r1, [sp, #20]
 8007a4a:	6800      	ldr	r0, [r0, #0]
 8007a4c:	a902      	add	r1, sp, #8
 8007a4e:	9301      	str	r3, [sp, #4]
 8007a50:	f000 f868 	bl	8007b24 <_svfiprintf_r>
 8007a54:	2200      	movs	r2, #0
 8007a56:	9b02      	ldr	r3, [sp, #8]
 8007a58:	701a      	strb	r2, [r3, #0]
 8007a5a:	b01c      	add	sp, #112	; 0x70
 8007a5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a60:	b003      	add	sp, #12
 8007a62:	4770      	bx	lr
 8007a64:	2000017c 	.word	0x2000017c
 8007a68:	ffff0208 	.word	0xffff0208

08007a6c <__ssputs_r>:
 8007a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a70:	688e      	ldr	r6, [r1, #8]
 8007a72:	4682      	mov	sl, r0
 8007a74:	429e      	cmp	r6, r3
 8007a76:	460c      	mov	r4, r1
 8007a78:	4690      	mov	r8, r2
 8007a7a:	461f      	mov	r7, r3
 8007a7c:	d838      	bhi.n	8007af0 <__ssputs_r+0x84>
 8007a7e:	898a      	ldrh	r2, [r1, #12]
 8007a80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a84:	d032      	beq.n	8007aec <__ssputs_r+0x80>
 8007a86:	6825      	ldr	r5, [r4, #0]
 8007a88:	6909      	ldr	r1, [r1, #16]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	eba5 0901 	sub.w	r9, r5, r1
 8007a90:	6965      	ldr	r5, [r4, #20]
 8007a92:	444b      	add	r3, r9
 8007a94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a9c:	106d      	asrs	r5, r5, #1
 8007a9e:	429d      	cmp	r5, r3
 8007aa0:	bf38      	it	cc
 8007aa2:	461d      	movcc	r5, r3
 8007aa4:	0553      	lsls	r3, r2, #21
 8007aa6:	d531      	bpl.n	8007b0c <__ssputs_r+0xa0>
 8007aa8:	4629      	mov	r1, r5
 8007aaa:	f000 fb53 	bl	8008154 <_malloc_r>
 8007aae:	4606      	mov	r6, r0
 8007ab0:	b950      	cbnz	r0, 8007ac8 <__ssputs_r+0x5c>
 8007ab2:	230c      	movs	r3, #12
 8007ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ab8:	f8ca 3000 	str.w	r3, [sl]
 8007abc:	89a3      	ldrh	r3, [r4, #12]
 8007abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ac2:	81a3      	strh	r3, [r4, #12]
 8007ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ac8:	464a      	mov	r2, r9
 8007aca:	6921      	ldr	r1, [r4, #16]
 8007acc:	f000 face 	bl	800806c <memcpy>
 8007ad0:	89a3      	ldrh	r3, [r4, #12]
 8007ad2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ada:	81a3      	strh	r3, [r4, #12]
 8007adc:	6126      	str	r6, [r4, #16]
 8007ade:	444e      	add	r6, r9
 8007ae0:	6026      	str	r6, [r4, #0]
 8007ae2:	463e      	mov	r6, r7
 8007ae4:	6165      	str	r5, [r4, #20]
 8007ae6:	eba5 0509 	sub.w	r5, r5, r9
 8007aea:	60a5      	str	r5, [r4, #8]
 8007aec:	42be      	cmp	r6, r7
 8007aee:	d900      	bls.n	8007af2 <__ssputs_r+0x86>
 8007af0:	463e      	mov	r6, r7
 8007af2:	4632      	mov	r2, r6
 8007af4:	4641      	mov	r1, r8
 8007af6:	6820      	ldr	r0, [r4, #0]
 8007af8:	f000 fac6 	bl	8008088 <memmove>
 8007afc:	68a3      	ldr	r3, [r4, #8]
 8007afe:	6822      	ldr	r2, [r4, #0]
 8007b00:	1b9b      	subs	r3, r3, r6
 8007b02:	4432      	add	r2, r6
 8007b04:	2000      	movs	r0, #0
 8007b06:	60a3      	str	r3, [r4, #8]
 8007b08:	6022      	str	r2, [r4, #0]
 8007b0a:	e7db      	b.n	8007ac4 <__ssputs_r+0x58>
 8007b0c:	462a      	mov	r2, r5
 8007b0e:	f000 fb7b 	bl	8008208 <_realloc_r>
 8007b12:	4606      	mov	r6, r0
 8007b14:	2800      	cmp	r0, #0
 8007b16:	d1e1      	bne.n	8007adc <__ssputs_r+0x70>
 8007b18:	4650      	mov	r0, sl
 8007b1a:	6921      	ldr	r1, [r4, #16]
 8007b1c:	f000 face 	bl	80080bc <_free_r>
 8007b20:	e7c7      	b.n	8007ab2 <__ssputs_r+0x46>
	...

08007b24 <_svfiprintf_r>:
 8007b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b28:	4698      	mov	r8, r3
 8007b2a:	898b      	ldrh	r3, [r1, #12]
 8007b2c:	4607      	mov	r7, r0
 8007b2e:	061b      	lsls	r3, r3, #24
 8007b30:	460d      	mov	r5, r1
 8007b32:	4614      	mov	r4, r2
 8007b34:	b09d      	sub	sp, #116	; 0x74
 8007b36:	d50e      	bpl.n	8007b56 <_svfiprintf_r+0x32>
 8007b38:	690b      	ldr	r3, [r1, #16]
 8007b3a:	b963      	cbnz	r3, 8007b56 <_svfiprintf_r+0x32>
 8007b3c:	2140      	movs	r1, #64	; 0x40
 8007b3e:	f000 fb09 	bl	8008154 <_malloc_r>
 8007b42:	6028      	str	r0, [r5, #0]
 8007b44:	6128      	str	r0, [r5, #16]
 8007b46:	b920      	cbnz	r0, 8007b52 <_svfiprintf_r+0x2e>
 8007b48:	230c      	movs	r3, #12
 8007b4a:	603b      	str	r3, [r7, #0]
 8007b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b50:	e0d1      	b.n	8007cf6 <_svfiprintf_r+0x1d2>
 8007b52:	2340      	movs	r3, #64	; 0x40
 8007b54:	616b      	str	r3, [r5, #20]
 8007b56:	2300      	movs	r3, #0
 8007b58:	9309      	str	r3, [sp, #36]	; 0x24
 8007b5a:	2320      	movs	r3, #32
 8007b5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b60:	2330      	movs	r3, #48	; 0x30
 8007b62:	f04f 0901 	mov.w	r9, #1
 8007b66:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b6a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007d10 <_svfiprintf_r+0x1ec>
 8007b6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b72:	4623      	mov	r3, r4
 8007b74:	469a      	mov	sl, r3
 8007b76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b7a:	b10a      	cbz	r2, 8007b80 <_svfiprintf_r+0x5c>
 8007b7c:	2a25      	cmp	r2, #37	; 0x25
 8007b7e:	d1f9      	bne.n	8007b74 <_svfiprintf_r+0x50>
 8007b80:	ebba 0b04 	subs.w	fp, sl, r4
 8007b84:	d00b      	beq.n	8007b9e <_svfiprintf_r+0x7a>
 8007b86:	465b      	mov	r3, fp
 8007b88:	4622      	mov	r2, r4
 8007b8a:	4629      	mov	r1, r5
 8007b8c:	4638      	mov	r0, r7
 8007b8e:	f7ff ff6d 	bl	8007a6c <__ssputs_r>
 8007b92:	3001      	adds	r0, #1
 8007b94:	f000 80aa 	beq.w	8007cec <_svfiprintf_r+0x1c8>
 8007b98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b9a:	445a      	add	r2, fp
 8007b9c:	9209      	str	r2, [sp, #36]	; 0x24
 8007b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f000 80a2 	beq.w	8007cec <_svfiprintf_r+0x1c8>
 8007ba8:	2300      	movs	r3, #0
 8007baa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bb2:	f10a 0a01 	add.w	sl, sl, #1
 8007bb6:	9304      	str	r3, [sp, #16]
 8007bb8:	9307      	str	r3, [sp, #28]
 8007bba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bbe:	931a      	str	r3, [sp, #104]	; 0x68
 8007bc0:	4654      	mov	r4, sl
 8007bc2:	2205      	movs	r2, #5
 8007bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bc8:	4851      	ldr	r0, [pc, #324]	; (8007d10 <_svfiprintf_r+0x1ec>)
 8007bca:	f000 fa41 	bl	8008050 <memchr>
 8007bce:	9a04      	ldr	r2, [sp, #16]
 8007bd0:	b9d8      	cbnz	r0, 8007c0a <_svfiprintf_r+0xe6>
 8007bd2:	06d0      	lsls	r0, r2, #27
 8007bd4:	bf44      	itt	mi
 8007bd6:	2320      	movmi	r3, #32
 8007bd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bdc:	0711      	lsls	r1, r2, #28
 8007bde:	bf44      	itt	mi
 8007be0:	232b      	movmi	r3, #43	; 0x2b
 8007be2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007be6:	f89a 3000 	ldrb.w	r3, [sl]
 8007bea:	2b2a      	cmp	r3, #42	; 0x2a
 8007bec:	d015      	beq.n	8007c1a <_svfiprintf_r+0xf6>
 8007bee:	4654      	mov	r4, sl
 8007bf0:	2000      	movs	r0, #0
 8007bf2:	f04f 0c0a 	mov.w	ip, #10
 8007bf6:	9a07      	ldr	r2, [sp, #28]
 8007bf8:	4621      	mov	r1, r4
 8007bfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bfe:	3b30      	subs	r3, #48	; 0x30
 8007c00:	2b09      	cmp	r3, #9
 8007c02:	d94e      	bls.n	8007ca2 <_svfiprintf_r+0x17e>
 8007c04:	b1b0      	cbz	r0, 8007c34 <_svfiprintf_r+0x110>
 8007c06:	9207      	str	r2, [sp, #28]
 8007c08:	e014      	b.n	8007c34 <_svfiprintf_r+0x110>
 8007c0a:	eba0 0308 	sub.w	r3, r0, r8
 8007c0e:	fa09 f303 	lsl.w	r3, r9, r3
 8007c12:	4313      	orrs	r3, r2
 8007c14:	46a2      	mov	sl, r4
 8007c16:	9304      	str	r3, [sp, #16]
 8007c18:	e7d2      	b.n	8007bc0 <_svfiprintf_r+0x9c>
 8007c1a:	9b03      	ldr	r3, [sp, #12]
 8007c1c:	1d19      	adds	r1, r3, #4
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	9103      	str	r1, [sp, #12]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	bfbb      	ittet	lt
 8007c26:	425b      	neglt	r3, r3
 8007c28:	f042 0202 	orrlt.w	r2, r2, #2
 8007c2c:	9307      	strge	r3, [sp, #28]
 8007c2e:	9307      	strlt	r3, [sp, #28]
 8007c30:	bfb8      	it	lt
 8007c32:	9204      	strlt	r2, [sp, #16]
 8007c34:	7823      	ldrb	r3, [r4, #0]
 8007c36:	2b2e      	cmp	r3, #46	; 0x2e
 8007c38:	d10c      	bne.n	8007c54 <_svfiprintf_r+0x130>
 8007c3a:	7863      	ldrb	r3, [r4, #1]
 8007c3c:	2b2a      	cmp	r3, #42	; 0x2a
 8007c3e:	d135      	bne.n	8007cac <_svfiprintf_r+0x188>
 8007c40:	9b03      	ldr	r3, [sp, #12]
 8007c42:	3402      	adds	r4, #2
 8007c44:	1d1a      	adds	r2, r3, #4
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	9203      	str	r2, [sp, #12]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	bfb8      	it	lt
 8007c4e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007c52:	9305      	str	r3, [sp, #20]
 8007c54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007d20 <_svfiprintf_r+0x1fc>
 8007c58:	2203      	movs	r2, #3
 8007c5a:	4650      	mov	r0, sl
 8007c5c:	7821      	ldrb	r1, [r4, #0]
 8007c5e:	f000 f9f7 	bl	8008050 <memchr>
 8007c62:	b140      	cbz	r0, 8007c76 <_svfiprintf_r+0x152>
 8007c64:	2340      	movs	r3, #64	; 0x40
 8007c66:	eba0 000a 	sub.w	r0, r0, sl
 8007c6a:	fa03 f000 	lsl.w	r0, r3, r0
 8007c6e:	9b04      	ldr	r3, [sp, #16]
 8007c70:	3401      	adds	r4, #1
 8007c72:	4303      	orrs	r3, r0
 8007c74:	9304      	str	r3, [sp, #16]
 8007c76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c7a:	2206      	movs	r2, #6
 8007c7c:	4825      	ldr	r0, [pc, #148]	; (8007d14 <_svfiprintf_r+0x1f0>)
 8007c7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c82:	f000 f9e5 	bl	8008050 <memchr>
 8007c86:	2800      	cmp	r0, #0
 8007c88:	d038      	beq.n	8007cfc <_svfiprintf_r+0x1d8>
 8007c8a:	4b23      	ldr	r3, [pc, #140]	; (8007d18 <_svfiprintf_r+0x1f4>)
 8007c8c:	bb1b      	cbnz	r3, 8007cd6 <_svfiprintf_r+0x1b2>
 8007c8e:	9b03      	ldr	r3, [sp, #12]
 8007c90:	3307      	adds	r3, #7
 8007c92:	f023 0307 	bic.w	r3, r3, #7
 8007c96:	3308      	adds	r3, #8
 8007c98:	9303      	str	r3, [sp, #12]
 8007c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c9c:	4433      	add	r3, r6
 8007c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8007ca0:	e767      	b.n	8007b72 <_svfiprintf_r+0x4e>
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	2001      	movs	r0, #1
 8007ca6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007caa:	e7a5      	b.n	8007bf8 <_svfiprintf_r+0xd4>
 8007cac:	2300      	movs	r3, #0
 8007cae:	f04f 0c0a 	mov.w	ip, #10
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	3401      	adds	r4, #1
 8007cb6:	9305      	str	r3, [sp, #20]
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cbe:	3a30      	subs	r2, #48	; 0x30
 8007cc0:	2a09      	cmp	r2, #9
 8007cc2:	d903      	bls.n	8007ccc <_svfiprintf_r+0x1a8>
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d0c5      	beq.n	8007c54 <_svfiprintf_r+0x130>
 8007cc8:	9105      	str	r1, [sp, #20]
 8007cca:	e7c3      	b.n	8007c54 <_svfiprintf_r+0x130>
 8007ccc:	4604      	mov	r4, r0
 8007cce:	2301      	movs	r3, #1
 8007cd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cd4:	e7f0      	b.n	8007cb8 <_svfiprintf_r+0x194>
 8007cd6:	ab03      	add	r3, sp, #12
 8007cd8:	9300      	str	r3, [sp, #0]
 8007cda:	462a      	mov	r2, r5
 8007cdc:	4638      	mov	r0, r7
 8007cde:	4b0f      	ldr	r3, [pc, #60]	; (8007d1c <_svfiprintf_r+0x1f8>)
 8007ce0:	a904      	add	r1, sp, #16
 8007ce2:	f3af 8000 	nop.w
 8007ce6:	1c42      	adds	r2, r0, #1
 8007ce8:	4606      	mov	r6, r0
 8007cea:	d1d6      	bne.n	8007c9a <_svfiprintf_r+0x176>
 8007cec:	89ab      	ldrh	r3, [r5, #12]
 8007cee:	065b      	lsls	r3, r3, #25
 8007cf0:	f53f af2c 	bmi.w	8007b4c <_svfiprintf_r+0x28>
 8007cf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cf6:	b01d      	add	sp, #116	; 0x74
 8007cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cfc:	ab03      	add	r3, sp, #12
 8007cfe:	9300      	str	r3, [sp, #0]
 8007d00:	462a      	mov	r2, r5
 8007d02:	4638      	mov	r0, r7
 8007d04:	4b05      	ldr	r3, [pc, #20]	; (8007d1c <_svfiprintf_r+0x1f8>)
 8007d06:	a904      	add	r1, sp, #16
 8007d08:	f000 f87c 	bl	8007e04 <_printf_i>
 8007d0c:	e7eb      	b.n	8007ce6 <_svfiprintf_r+0x1c2>
 8007d0e:	bf00      	nop
 8007d10:	08008334 	.word	0x08008334
 8007d14:	0800833e 	.word	0x0800833e
 8007d18:	00000000 	.word	0x00000000
 8007d1c:	08007a6d 	.word	0x08007a6d
 8007d20:	0800833a 	.word	0x0800833a

08007d24 <_printf_common>:
 8007d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d28:	4616      	mov	r6, r2
 8007d2a:	4699      	mov	r9, r3
 8007d2c:	688a      	ldr	r2, [r1, #8]
 8007d2e:	690b      	ldr	r3, [r1, #16]
 8007d30:	4607      	mov	r7, r0
 8007d32:	4293      	cmp	r3, r2
 8007d34:	bfb8      	it	lt
 8007d36:	4613      	movlt	r3, r2
 8007d38:	6033      	str	r3, [r6, #0]
 8007d3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d3e:	460c      	mov	r4, r1
 8007d40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d44:	b10a      	cbz	r2, 8007d4a <_printf_common+0x26>
 8007d46:	3301      	adds	r3, #1
 8007d48:	6033      	str	r3, [r6, #0]
 8007d4a:	6823      	ldr	r3, [r4, #0]
 8007d4c:	0699      	lsls	r1, r3, #26
 8007d4e:	bf42      	ittt	mi
 8007d50:	6833      	ldrmi	r3, [r6, #0]
 8007d52:	3302      	addmi	r3, #2
 8007d54:	6033      	strmi	r3, [r6, #0]
 8007d56:	6825      	ldr	r5, [r4, #0]
 8007d58:	f015 0506 	ands.w	r5, r5, #6
 8007d5c:	d106      	bne.n	8007d6c <_printf_common+0x48>
 8007d5e:	f104 0a19 	add.w	sl, r4, #25
 8007d62:	68e3      	ldr	r3, [r4, #12]
 8007d64:	6832      	ldr	r2, [r6, #0]
 8007d66:	1a9b      	subs	r3, r3, r2
 8007d68:	42ab      	cmp	r3, r5
 8007d6a:	dc28      	bgt.n	8007dbe <_printf_common+0x9a>
 8007d6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d70:	1e13      	subs	r3, r2, #0
 8007d72:	6822      	ldr	r2, [r4, #0]
 8007d74:	bf18      	it	ne
 8007d76:	2301      	movne	r3, #1
 8007d78:	0692      	lsls	r2, r2, #26
 8007d7a:	d42d      	bmi.n	8007dd8 <_printf_common+0xb4>
 8007d7c:	4649      	mov	r1, r9
 8007d7e:	4638      	mov	r0, r7
 8007d80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d84:	47c0      	blx	r8
 8007d86:	3001      	adds	r0, #1
 8007d88:	d020      	beq.n	8007dcc <_printf_common+0xa8>
 8007d8a:	6823      	ldr	r3, [r4, #0]
 8007d8c:	68e5      	ldr	r5, [r4, #12]
 8007d8e:	f003 0306 	and.w	r3, r3, #6
 8007d92:	2b04      	cmp	r3, #4
 8007d94:	bf18      	it	ne
 8007d96:	2500      	movne	r5, #0
 8007d98:	6832      	ldr	r2, [r6, #0]
 8007d9a:	f04f 0600 	mov.w	r6, #0
 8007d9e:	68a3      	ldr	r3, [r4, #8]
 8007da0:	bf08      	it	eq
 8007da2:	1aad      	subeq	r5, r5, r2
 8007da4:	6922      	ldr	r2, [r4, #16]
 8007da6:	bf08      	it	eq
 8007da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007dac:	4293      	cmp	r3, r2
 8007dae:	bfc4      	itt	gt
 8007db0:	1a9b      	subgt	r3, r3, r2
 8007db2:	18ed      	addgt	r5, r5, r3
 8007db4:	341a      	adds	r4, #26
 8007db6:	42b5      	cmp	r5, r6
 8007db8:	d11a      	bne.n	8007df0 <_printf_common+0xcc>
 8007dba:	2000      	movs	r0, #0
 8007dbc:	e008      	b.n	8007dd0 <_printf_common+0xac>
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	4652      	mov	r2, sl
 8007dc2:	4649      	mov	r1, r9
 8007dc4:	4638      	mov	r0, r7
 8007dc6:	47c0      	blx	r8
 8007dc8:	3001      	adds	r0, #1
 8007dca:	d103      	bne.n	8007dd4 <_printf_common+0xb0>
 8007dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dd4:	3501      	adds	r5, #1
 8007dd6:	e7c4      	b.n	8007d62 <_printf_common+0x3e>
 8007dd8:	2030      	movs	r0, #48	; 0x30
 8007dda:	18e1      	adds	r1, r4, r3
 8007ddc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007de0:	1c5a      	adds	r2, r3, #1
 8007de2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007de6:	4422      	add	r2, r4
 8007de8:	3302      	adds	r3, #2
 8007dea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007dee:	e7c5      	b.n	8007d7c <_printf_common+0x58>
 8007df0:	2301      	movs	r3, #1
 8007df2:	4622      	mov	r2, r4
 8007df4:	4649      	mov	r1, r9
 8007df6:	4638      	mov	r0, r7
 8007df8:	47c0      	blx	r8
 8007dfa:	3001      	adds	r0, #1
 8007dfc:	d0e6      	beq.n	8007dcc <_printf_common+0xa8>
 8007dfe:	3601      	adds	r6, #1
 8007e00:	e7d9      	b.n	8007db6 <_printf_common+0x92>
	...

08007e04 <_printf_i>:
 8007e04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e08:	460c      	mov	r4, r1
 8007e0a:	7e27      	ldrb	r7, [r4, #24]
 8007e0c:	4691      	mov	r9, r2
 8007e0e:	2f78      	cmp	r7, #120	; 0x78
 8007e10:	4680      	mov	r8, r0
 8007e12:	469a      	mov	sl, r3
 8007e14:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007e16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e1a:	d807      	bhi.n	8007e2c <_printf_i+0x28>
 8007e1c:	2f62      	cmp	r7, #98	; 0x62
 8007e1e:	d80a      	bhi.n	8007e36 <_printf_i+0x32>
 8007e20:	2f00      	cmp	r7, #0
 8007e22:	f000 80d9 	beq.w	8007fd8 <_printf_i+0x1d4>
 8007e26:	2f58      	cmp	r7, #88	; 0x58
 8007e28:	f000 80a4 	beq.w	8007f74 <_printf_i+0x170>
 8007e2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007e30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e34:	e03a      	b.n	8007eac <_printf_i+0xa8>
 8007e36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e3a:	2b15      	cmp	r3, #21
 8007e3c:	d8f6      	bhi.n	8007e2c <_printf_i+0x28>
 8007e3e:	a001      	add	r0, pc, #4	; (adr r0, 8007e44 <_printf_i+0x40>)
 8007e40:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007e44:	08007e9d 	.word	0x08007e9d
 8007e48:	08007eb1 	.word	0x08007eb1
 8007e4c:	08007e2d 	.word	0x08007e2d
 8007e50:	08007e2d 	.word	0x08007e2d
 8007e54:	08007e2d 	.word	0x08007e2d
 8007e58:	08007e2d 	.word	0x08007e2d
 8007e5c:	08007eb1 	.word	0x08007eb1
 8007e60:	08007e2d 	.word	0x08007e2d
 8007e64:	08007e2d 	.word	0x08007e2d
 8007e68:	08007e2d 	.word	0x08007e2d
 8007e6c:	08007e2d 	.word	0x08007e2d
 8007e70:	08007fbf 	.word	0x08007fbf
 8007e74:	08007ee1 	.word	0x08007ee1
 8007e78:	08007fa1 	.word	0x08007fa1
 8007e7c:	08007e2d 	.word	0x08007e2d
 8007e80:	08007e2d 	.word	0x08007e2d
 8007e84:	08007fe1 	.word	0x08007fe1
 8007e88:	08007e2d 	.word	0x08007e2d
 8007e8c:	08007ee1 	.word	0x08007ee1
 8007e90:	08007e2d 	.word	0x08007e2d
 8007e94:	08007e2d 	.word	0x08007e2d
 8007e98:	08007fa9 	.word	0x08007fa9
 8007e9c:	680b      	ldr	r3, [r1, #0]
 8007e9e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007ea2:	1d1a      	adds	r2, r3, #4
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	600a      	str	r2, [r1, #0]
 8007ea8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007eac:	2301      	movs	r3, #1
 8007eae:	e0a4      	b.n	8007ffa <_printf_i+0x1f6>
 8007eb0:	6825      	ldr	r5, [r4, #0]
 8007eb2:	6808      	ldr	r0, [r1, #0]
 8007eb4:	062e      	lsls	r6, r5, #24
 8007eb6:	f100 0304 	add.w	r3, r0, #4
 8007eba:	d50a      	bpl.n	8007ed2 <_printf_i+0xce>
 8007ebc:	6805      	ldr	r5, [r0, #0]
 8007ebe:	600b      	str	r3, [r1, #0]
 8007ec0:	2d00      	cmp	r5, #0
 8007ec2:	da03      	bge.n	8007ecc <_printf_i+0xc8>
 8007ec4:	232d      	movs	r3, #45	; 0x2d
 8007ec6:	426d      	negs	r5, r5
 8007ec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ecc:	230a      	movs	r3, #10
 8007ece:	485e      	ldr	r0, [pc, #376]	; (8008048 <_printf_i+0x244>)
 8007ed0:	e019      	b.n	8007f06 <_printf_i+0x102>
 8007ed2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007ed6:	6805      	ldr	r5, [r0, #0]
 8007ed8:	600b      	str	r3, [r1, #0]
 8007eda:	bf18      	it	ne
 8007edc:	b22d      	sxthne	r5, r5
 8007ede:	e7ef      	b.n	8007ec0 <_printf_i+0xbc>
 8007ee0:	680b      	ldr	r3, [r1, #0]
 8007ee2:	6825      	ldr	r5, [r4, #0]
 8007ee4:	1d18      	adds	r0, r3, #4
 8007ee6:	6008      	str	r0, [r1, #0]
 8007ee8:	0628      	lsls	r0, r5, #24
 8007eea:	d501      	bpl.n	8007ef0 <_printf_i+0xec>
 8007eec:	681d      	ldr	r5, [r3, #0]
 8007eee:	e002      	b.n	8007ef6 <_printf_i+0xf2>
 8007ef0:	0669      	lsls	r1, r5, #25
 8007ef2:	d5fb      	bpl.n	8007eec <_printf_i+0xe8>
 8007ef4:	881d      	ldrh	r5, [r3, #0]
 8007ef6:	2f6f      	cmp	r7, #111	; 0x6f
 8007ef8:	bf0c      	ite	eq
 8007efa:	2308      	moveq	r3, #8
 8007efc:	230a      	movne	r3, #10
 8007efe:	4852      	ldr	r0, [pc, #328]	; (8008048 <_printf_i+0x244>)
 8007f00:	2100      	movs	r1, #0
 8007f02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f06:	6866      	ldr	r6, [r4, #4]
 8007f08:	2e00      	cmp	r6, #0
 8007f0a:	bfa8      	it	ge
 8007f0c:	6821      	ldrge	r1, [r4, #0]
 8007f0e:	60a6      	str	r6, [r4, #8]
 8007f10:	bfa4      	itt	ge
 8007f12:	f021 0104 	bicge.w	r1, r1, #4
 8007f16:	6021      	strge	r1, [r4, #0]
 8007f18:	b90d      	cbnz	r5, 8007f1e <_printf_i+0x11a>
 8007f1a:	2e00      	cmp	r6, #0
 8007f1c:	d04d      	beq.n	8007fba <_printf_i+0x1b6>
 8007f1e:	4616      	mov	r6, r2
 8007f20:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f24:	fb03 5711 	mls	r7, r3, r1, r5
 8007f28:	5dc7      	ldrb	r7, [r0, r7]
 8007f2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f2e:	462f      	mov	r7, r5
 8007f30:	42bb      	cmp	r3, r7
 8007f32:	460d      	mov	r5, r1
 8007f34:	d9f4      	bls.n	8007f20 <_printf_i+0x11c>
 8007f36:	2b08      	cmp	r3, #8
 8007f38:	d10b      	bne.n	8007f52 <_printf_i+0x14e>
 8007f3a:	6823      	ldr	r3, [r4, #0]
 8007f3c:	07df      	lsls	r7, r3, #31
 8007f3e:	d508      	bpl.n	8007f52 <_printf_i+0x14e>
 8007f40:	6923      	ldr	r3, [r4, #16]
 8007f42:	6861      	ldr	r1, [r4, #4]
 8007f44:	4299      	cmp	r1, r3
 8007f46:	bfde      	ittt	le
 8007f48:	2330      	movle	r3, #48	; 0x30
 8007f4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f4e:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8007f52:	1b92      	subs	r2, r2, r6
 8007f54:	6122      	str	r2, [r4, #16]
 8007f56:	464b      	mov	r3, r9
 8007f58:	4621      	mov	r1, r4
 8007f5a:	4640      	mov	r0, r8
 8007f5c:	f8cd a000 	str.w	sl, [sp]
 8007f60:	aa03      	add	r2, sp, #12
 8007f62:	f7ff fedf 	bl	8007d24 <_printf_common>
 8007f66:	3001      	adds	r0, #1
 8007f68:	d14c      	bne.n	8008004 <_printf_i+0x200>
 8007f6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f6e:	b004      	add	sp, #16
 8007f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f74:	4834      	ldr	r0, [pc, #208]	; (8008048 <_printf_i+0x244>)
 8007f76:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007f7a:	680e      	ldr	r6, [r1, #0]
 8007f7c:	6823      	ldr	r3, [r4, #0]
 8007f7e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007f82:	061f      	lsls	r7, r3, #24
 8007f84:	600e      	str	r6, [r1, #0]
 8007f86:	d514      	bpl.n	8007fb2 <_printf_i+0x1ae>
 8007f88:	07d9      	lsls	r1, r3, #31
 8007f8a:	bf44      	itt	mi
 8007f8c:	f043 0320 	orrmi.w	r3, r3, #32
 8007f90:	6023      	strmi	r3, [r4, #0]
 8007f92:	b91d      	cbnz	r5, 8007f9c <_printf_i+0x198>
 8007f94:	6823      	ldr	r3, [r4, #0]
 8007f96:	f023 0320 	bic.w	r3, r3, #32
 8007f9a:	6023      	str	r3, [r4, #0]
 8007f9c:	2310      	movs	r3, #16
 8007f9e:	e7af      	b.n	8007f00 <_printf_i+0xfc>
 8007fa0:	6823      	ldr	r3, [r4, #0]
 8007fa2:	f043 0320 	orr.w	r3, r3, #32
 8007fa6:	6023      	str	r3, [r4, #0]
 8007fa8:	2378      	movs	r3, #120	; 0x78
 8007faa:	4828      	ldr	r0, [pc, #160]	; (800804c <_printf_i+0x248>)
 8007fac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007fb0:	e7e3      	b.n	8007f7a <_printf_i+0x176>
 8007fb2:	065e      	lsls	r6, r3, #25
 8007fb4:	bf48      	it	mi
 8007fb6:	b2ad      	uxthmi	r5, r5
 8007fb8:	e7e6      	b.n	8007f88 <_printf_i+0x184>
 8007fba:	4616      	mov	r6, r2
 8007fbc:	e7bb      	b.n	8007f36 <_printf_i+0x132>
 8007fbe:	680b      	ldr	r3, [r1, #0]
 8007fc0:	6826      	ldr	r6, [r4, #0]
 8007fc2:	1d1d      	adds	r5, r3, #4
 8007fc4:	6960      	ldr	r0, [r4, #20]
 8007fc6:	600d      	str	r5, [r1, #0]
 8007fc8:	0635      	lsls	r5, r6, #24
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	d501      	bpl.n	8007fd2 <_printf_i+0x1ce>
 8007fce:	6018      	str	r0, [r3, #0]
 8007fd0:	e002      	b.n	8007fd8 <_printf_i+0x1d4>
 8007fd2:	0671      	lsls	r1, r6, #25
 8007fd4:	d5fb      	bpl.n	8007fce <_printf_i+0x1ca>
 8007fd6:	8018      	strh	r0, [r3, #0]
 8007fd8:	2300      	movs	r3, #0
 8007fda:	4616      	mov	r6, r2
 8007fdc:	6123      	str	r3, [r4, #16]
 8007fde:	e7ba      	b.n	8007f56 <_printf_i+0x152>
 8007fe0:	680b      	ldr	r3, [r1, #0]
 8007fe2:	1d1a      	adds	r2, r3, #4
 8007fe4:	600a      	str	r2, [r1, #0]
 8007fe6:	681e      	ldr	r6, [r3, #0]
 8007fe8:	2100      	movs	r1, #0
 8007fea:	4630      	mov	r0, r6
 8007fec:	6862      	ldr	r2, [r4, #4]
 8007fee:	f000 f82f 	bl	8008050 <memchr>
 8007ff2:	b108      	cbz	r0, 8007ff8 <_printf_i+0x1f4>
 8007ff4:	1b80      	subs	r0, r0, r6
 8007ff6:	6060      	str	r0, [r4, #4]
 8007ff8:	6863      	ldr	r3, [r4, #4]
 8007ffa:	6123      	str	r3, [r4, #16]
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008002:	e7a8      	b.n	8007f56 <_printf_i+0x152>
 8008004:	4632      	mov	r2, r6
 8008006:	4649      	mov	r1, r9
 8008008:	4640      	mov	r0, r8
 800800a:	6923      	ldr	r3, [r4, #16]
 800800c:	47d0      	blx	sl
 800800e:	3001      	adds	r0, #1
 8008010:	d0ab      	beq.n	8007f6a <_printf_i+0x166>
 8008012:	6823      	ldr	r3, [r4, #0]
 8008014:	079b      	lsls	r3, r3, #30
 8008016:	d413      	bmi.n	8008040 <_printf_i+0x23c>
 8008018:	68e0      	ldr	r0, [r4, #12]
 800801a:	9b03      	ldr	r3, [sp, #12]
 800801c:	4298      	cmp	r0, r3
 800801e:	bfb8      	it	lt
 8008020:	4618      	movlt	r0, r3
 8008022:	e7a4      	b.n	8007f6e <_printf_i+0x16a>
 8008024:	2301      	movs	r3, #1
 8008026:	4632      	mov	r2, r6
 8008028:	4649      	mov	r1, r9
 800802a:	4640      	mov	r0, r8
 800802c:	47d0      	blx	sl
 800802e:	3001      	adds	r0, #1
 8008030:	d09b      	beq.n	8007f6a <_printf_i+0x166>
 8008032:	3501      	adds	r5, #1
 8008034:	68e3      	ldr	r3, [r4, #12]
 8008036:	9903      	ldr	r1, [sp, #12]
 8008038:	1a5b      	subs	r3, r3, r1
 800803a:	42ab      	cmp	r3, r5
 800803c:	dcf2      	bgt.n	8008024 <_printf_i+0x220>
 800803e:	e7eb      	b.n	8008018 <_printf_i+0x214>
 8008040:	2500      	movs	r5, #0
 8008042:	f104 0619 	add.w	r6, r4, #25
 8008046:	e7f5      	b.n	8008034 <_printf_i+0x230>
 8008048:	08008345 	.word	0x08008345
 800804c:	08008356 	.word	0x08008356

08008050 <memchr>:
 8008050:	4603      	mov	r3, r0
 8008052:	b510      	push	{r4, lr}
 8008054:	b2c9      	uxtb	r1, r1
 8008056:	4402      	add	r2, r0
 8008058:	4293      	cmp	r3, r2
 800805a:	4618      	mov	r0, r3
 800805c:	d101      	bne.n	8008062 <memchr+0x12>
 800805e:	2000      	movs	r0, #0
 8008060:	e003      	b.n	800806a <memchr+0x1a>
 8008062:	7804      	ldrb	r4, [r0, #0]
 8008064:	3301      	adds	r3, #1
 8008066:	428c      	cmp	r4, r1
 8008068:	d1f6      	bne.n	8008058 <memchr+0x8>
 800806a:	bd10      	pop	{r4, pc}

0800806c <memcpy>:
 800806c:	440a      	add	r2, r1
 800806e:	4291      	cmp	r1, r2
 8008070:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008074:	d100      	bne.n	8008078 <memcpy+0xc>
 8008076:	4770      	bx	lr
 8008078:	b510      	push	{r4, lr}
 800807a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800807e:	4291      	cmp	r1, r2
 8008080:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008084:	d1f9      	bne.n	800807a <memcpy+0xe>
 8008086:	bd10      	pop	{r4, pc}

08008088 <memmove>:
 8008088:	4288      	cmp	r0, r1
 800808a:	b510      	push	{r4, lr}
 800808c:	eb01 0402 	add.w	r4, r1, r2
 8008090:	d902      	bls.n	8008098 <memmove+0x10>
 8008092:	4284      	cmp	r4, r0
 8008094:	4623      	mov	r3, r4
 8008096:	d807      	bhi.n	80080a8 <memmove+0x20>
 8008098:	1e43      	subs	r3, r0, #1
 800809a:	42a1      	cmp	r1, r4
 800809c:	d008      	beq.n	80080b0 <memmove+0x28>
 800809e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80080a6:	e7f8      	b.n	800809a <memmove+0x12>
 80080a8:	4601      	mov	r1, r0
 80080aa:	4402      	add	r2, r0
 80080ac:	428a      	cmp	r2, r1
 80080ae:	d100      	bne.n	80080b2 <memmove+0x2a>
 80080b0:	bd10      	pop	{r4, pc}
 80080b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80080b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80080ba:	e7f7      	b.n	80080ac <memmove+0x24>

080080bc <_free_r>:
 80080bc:	b538      	push	{r3, r4, r5, lr}
 80080be:	4605      	mov	r5, r0
 80080c0:	2900      	cmp	r1, #0
 80080c2:	d043      	beq.n	800814c <_free_r+0x90>
 80080c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080c8:	1f0c      	subs	r4, r1, #4
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	bfb8      	it	lt
 80080ce:	18e4      	addlt	r4, r4, r3
 80080d0:	f000 f8d0 	bl	8008274 <__malloc_lock>
 80080d4:	4a1e      	ldr	r2, [pc, #120]	; (8008150 <_free_r+0x94>)
 80080d6:	6813      	ldr	r3, [r2, #0]
 80080d8:	4610      	mov	r0, r2
 80080da:	b933      	cbnz	r3, 80080ea <_free_r+0x2e>
 80080dc:	6063      	str	r3, [r4, #4]
 80080de:	6014      	str	r4, [r2, #0]
 80080e0:	4628      	mov	r0, r5
 80080e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080e6:	f000 b8cb 	b.w	8008280 <__malloc_unlock>
 80080ea:	42a3      	cmp	r3, r4
 80080ec:	d90a      	bls.n	8008104 <_free_r+0x48>
 80080ee:	6821      	ldr	r1, [r4, #0]
 80080f0:	1862      	adds	r2, r4, r1
 80080f2:	4293      	cmp	r3, r2
 80080f4:	bf01      	itttt	eq
 80080f6:	681a      	ldreq	r2, [r3, #0]
 80080f8:	685b      	ldreq	r3, [r3, #4]
 80080fa:	1852      	addeq	r2, r2, r1
 80080fc:	6022      	streq	r2, [r4, #0]
 80080fe:	6063      	str	r3, [r4, #4]
 8008100:	6004      	str	r4, [r0, #0]
 8008102:	e7ed      	b.n	80080e0 <_free_r+0x24>
 8008104:	461a      	mov	r2, r3
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	b10b      	cbz	r3, 800810e <_free_r+0x52>
 800810a:	42a3      	cmp	r3, r4
 800810c:	d9fa      	bls.n	8008104 <_free_r+0x48>
 800810e:	6811      	ldr	r1, [r2, #0]
 8008110:	1850      	adds	r0, r2, r1
 8008112:	42a0      	cmp	r0, r4
 8008114:	d10b      	bne.n	800812e <_free_r+0x72>
 8008116:	6820      	ldr	r0, [r4, #0]
 8008118:	4401      	add	r1, r0
 800811a:	1850      	adds	r0, r2, r1
 800811c:	4283      	cmp	r3, r0
 800811e:	6011      	str	r1, [r2, #0]
 8008120:	d1de      	bne.n	80080e0 <_free_r+0x24>
 8008122:	6818      	ldr	r0, [r3, #0]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	4401      	add	r1, r0
 8008128:	6011      	str	r1, [r2, #0]
 800812a:	6053      	str	r3, [r2, #4]
 800812c:	e7d8      	b.n	80080e0 <_free_r+0x24>
 800812e:	d902      	bls.n	8008136 <_free_r+0x7a>
 8008130:	230c      	movs	r3, #12
 8008132:	602b      	str	r3, [r5, #0]
 8008134:	e7d4      	b.n	80080e0 <_free_r+0x24>
 8008136:	6820      	ldr	r0, [r4, #0]
 8008138:	1821      	adds	r1, r4, r0
 800813a:	428b      	cmp	r3, r1
 800813c:	bf01      	itttt	eq
 800813e:	6819      	ldreq	r1, [r3, #0]
 8008140:	685b      	ldreq	r3, [r3, #4]
 8008142:	1809      	addeq	r1, r1, r0
 8008144:	6021      	streq	r1, [r4, #0]
 8008146:	6063      	str	r3, [r4, #4]
 8008148:	6054      	str	r4, [r2, #4]
 800814a:	e7c9      	b.n	80080e0 <_free_r+0x24>
 800814c:	bd38      	pop	{r3, r4, r5, pc}
 800814e:	bf00      	nop
 8008150:	20000434 	.word	0x20000434

08008154 <_malloc_r>:
 8008154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008156:	1ccd      	adds	r5, r1, #3
 8008158:	f025 0503 	bic.w	r5, r5, #3
 800815c:	3508      	adds	r5, #8
 800815e:	2d0c      	cmp	r5, #12
 8008160:	bf38      	it	cc
 8008162:	250c      	movcc	r5, #12
 8008164:	2d00      	cmp	r5, #0
 8008166:	4606      	mov	r6, r0
 8008168:	db01      	blt.n	800816e <_malloc_r+0x1a>
 800816a:	42a9      	cmp	r1, r5
 800816c:	d903      	bls.n	8008176 <_malloc_r+0x22>
 800816e:	230c      	movs	r3, #12
 8008170:	6033      	str	r3, [r6, #0]
 8008172:	2000      	movs	r0, #0
 8008174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008176:	f000 f87d 	bl	8008274 <__malloc_lock>
 800817a:	4921      	ldr	r1, [pc, #132]	; (8008200 <_malloc_r+0xac>)
 800817c:	680a      	ldr	r2, [r1, #0]
 800817e:	4614      	mov	r4, r2
 8008180:	b99c      	cbnz	r4, 80081aa <_malloc_r+0x56>
 8008182:	4f20      	ldr	r7, [pc, #128]	; (8008204 <_malloc_r+0xb0>)
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	b923      	cbnz	r3, 8008192 <_malloc_r+0x3e>
 8008188:	4621      	mov	r1, r4
 800818a:	4630      	mov	r0, r6
 800818c:	f000 f862 	bl	8008254 <_sbrk_r>
 8008190:	6038      	str	r0, [r7, #0]
 8008192:	4629      	mov	r1, r5
 8008194:	4630      	mov	r0, r6
 8008196:	f000 f85d 	bl	8008254 <_sbrk_r>
 800819a:	1c43      	adds	r3, r0, #1
 800819c:	d123      	bne.n	80081e6 <_malloc_r+0x92>
 800819e:	230c      	movs	r3, #12
 80081a0:	4630      	mov	r0, r6
 80081a2:	6033      	str	r3, [r6, #0]
 80081a4:	f000 f86c 	bl	8008280 <__malloc_unlock>
 80081a8:	e7e3      	b.n	8008172 <_malloc_r+0x1e>
 80081aa:	6823      	ldr	r3, [r4, #0]
 80081ac:	1b5b      	subs	r3, r3, r5
 80081ae:	d417      	bmi.n	80081e0 <_malloc_r+0x8c>
 80081b0:	2b0b      	cmp	r3, #11
 80081b2:	d903      	bls.n	80081bc <_malloc_r+0x68>
 80081b4:	6023      	str	r3, [r4, #0]
 80081b6:	441c      	add	r4, r3
 80081b8:	6025      	str	r5, [r4, #0]
 80081ba:	e004      	b.n	80081c6 <_malloc_r+0x72>
 80081bc:	6863      	ldr	r3, [r4, #4]
 80081be:	42a2      	cmp	r2, r4
 80081c0:	bf0c      	ite	eq
 80081c2:	600b      	streq	r3, [r1, #0]
 80081c4:	6053      	strne	r3, [r2, #4]
 80081c6:	4630      	mov	r0, r6
 80081c8:	f000 f85a 	bl	8008280 <__malloc_unlock>
 80081cc:	f104 000b 	add.w	r0, r4, #11
 80081d0:	1d23      	adds	r3, r4, #4
 80081d2:	f020 0007 	bic.w	r0, r0, #7
 80081d6:	1ac2      	subs	r2, r0, r3
 80081d8:	d0cc      	beq.n	8008174 <_malloc_r+0x20>
 80081da:	1a1b      	subs	r3, r3, r0
 80081dc:	50a3      	str	r3, [r4, r2]
 80081de:	e7c9      	b.n	8008174 <_malloc_r+0x20>
 80081e0:	4622      	mov	r2, r4
 80081e2:	6864      	ldr	r4, [r4, #4]
 80081e4:	e7cc      	b.n	8008180 <_malloc_r+0x2c>
 80081e6:	1cc4      	adds	r4, r0, #3
 80081e8:	f024 0403 	bic.w	r4, r4, #3
 80081ec:	42a0      	cmp	r0, r4
 80081ee:	d0e3      	beq.n	80081b8 <_malloc_r+0x64>
 80081f0:	1a21      	subs	r1, r4, r0
 80081f2:	4630      	mov	r0, r6
 80081f4:	f000 f82e 	bl	8008254 <_sbrk_r>
 80081f8:	3001      	adds	r0, #1
 80081fa:	d1dd      	bne.n	80081b8 <_malloc_r+0x64>
 80081fc:	e7cf      	b.n	800819e <_malloc_r+0x4a>
 80081fe:	bf00      	nop
 8008200:	20000434 	.word	0x20000434
 8008204:	20000438 	.word	0x20000438

08008208 <_realloc_r>:
 8008208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800820a:	4607      	mov	r7, r0
 800820c:	4614      	mov	r4, r2
 800820e:	460e      	mov	r6, r1
 8008210:	b921      	cbnz	r1, 800821c <_realloc_r+0x14>
 8008212:	4611      	mov	r1, r2
 8008214:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008218:	f7ff bf9c 	b.w	8008154 <_malloc_r>
 800821c:	b922      	cbnz	r2, 8008228 <_realloc_r+0x20>
 800821e:	f7ff ff4d 	bl	80080bc <_free_r>
 8008222:	4625      	mov	r5, r4
 8008224:	4628      	mov	r0, r5
 8008226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008228:	f000 f830 	bl	800828c <_malloc_usable_size_r>
 800822c:	42a0      	cmp	r0, r4
 800822e:	d20f      	bcs.n	8008250 <_realloc_r+0x48>
 8008230:	4621      	mov	r1, r4
 8008232:	4638      	mov	r0, r7
 8008234:	f7ff ff8e 	bl	8008154 <_malloc_r>
 8008238:	4605      	mov	r5, r0
 800823a:	2800      	cmp	r0, #0
 800823c:	d0f2      	beq.n	8008224 <_realloc_r+0x1c>
 800823e:	4631      	mov	r1, r6
 8008240:	4622      	mov	r2, r4
 8008242:	f7ff ff13 	bl	800806c <memcpy>
 8008246:	4631      	mov	r1, r6
 8008248:	4638      	mov	r0, r7
 800824a:	f7ff ff37 	bl	80080bc <_free_r>
 800824e:	e7e9      	b.n	8008224 <_realloc_r+0x1c>
 8008250:	4635      	mov	r5, r6
 8008252:	e7e7      	b.n	8008224 <_realloc_r+0x1c>

08008254 <_sbrk_r>:
 8008254:	b538      	push	{r3, r4, r5, lr}
 8008256:	2300      	movs	r3, #0
 8008258:	4d05      	ldr	r5, [pc, #20]	; (8008270 <_sbrk_r+0x1c>)
 800825a:	4604      	mov	r4, r0
 800825c:	4608      	mov	r0, r1
 800825e:	602b      	str	r3, [r5, #0]
 8008260:	f7f8 f9a8 	bl	80005b4 <_sbrk>
 8008264:	1c43      	adds	r3, r0, #1
 8008266:	d102      	bne.n	800826e <_sbrk_r+0x1a>
 8008268:	682b      	ldr	r3, [r5, #0]
 800826a:	b103      	cbz	r3, 800826e <_sbrk_r+0x1a>
 800826c:	6023      	str	r3, [r4, #0]
 800826e:	bd38      	pop	{r3, r4, r5, pc}
 8008270:	20001434 	.word	0x20001434

08008274 <__malloc_lock>:
 8008274:	4801      	ldr	r0, [pc, #4]	; (800827c <__malloc_lock+0x8>)
 8008276:	f000 b811 	b.w	800829c <__retarget_lock_acquire_recursive>
 800827a:	bf00      	nop
 800827c:	2000143c 	.word	0x2000143c

08008280 <__malloc_unlock>:
 8008280:	4801      	ldr	r0, [pc, #4]	; (8008288 <__malloc_unlock+0x8>)
 8008282:	f000 b80c 	b.w	800829e <__retarget_lock_release_recursive>
 8008286:	bf00      	nop
 8008288:	2000143c 	.word	0x2000143c

0800828c <_malloc_usable_size_r>:
 800828c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008290:	1f18      	subs	r0, r3, #4
 8008292:	2b00      	cmp	r3, #0
 8008294:	bfbc      	itt	lt
 8008296:	580b      	ldrlt	r3, [r1, r0]
 8008298:	18c0      	addlt	r0, r0, r3
 800829a:	4770      	bx	lr

0800829c <__retarget_lock_acquire_recursive>:
 800829c:	4770      	bx	lr

0800829e <__retarget_lock_release_recursive>:
 800829e:	4770      	bx	lr

080082a0 <_init>:
 80082a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a2:	bf00      	nop
 80082a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082a6:	bc08      	pop	{r3}
 80082a8:	469e      	mov	lr, r3
 80082aa:	4770      	bx	lr

080082ac <_fini>:
 80082ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ae:	bf00      	nop
 80082b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082b2:	bc08      	pop	{r3}
 80082b4:	469e      	mov	lr, r3
 80082b6:	4770      	bx	lr
