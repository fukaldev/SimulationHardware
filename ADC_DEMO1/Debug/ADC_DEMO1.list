
ADC_DEMO1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007908  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08007a14  08007a14  00017a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a7c  08007a7c  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08007a7c  08007a7c  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a7c  08007a7c  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a7c  08007a7c  00017a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a80  08007a80  00017a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08007a84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001250  2000017c  08007c00  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013cc  08007c00  000213cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013782  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031fd  00000000  00000000  00033927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  00036b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a98  00000000  00000000  00037728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a17d  00000000  00000000  000381c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103b3  00000000  00000000  0005233d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089aca  00000000  00000000  000626f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ec1ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e90  00000000  00000000  000ec210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	080079fc 	.word	0x080079fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	080079fc 	.word	0x080079fc

0800014c <HAL_ADC_ConvCpltCallback>:
ts_user_input user_data;
uint32_t adc_buffer[3] = {0};
char buffer[160] = {0};

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a0b      	ldr	r2, [pc, #44]	; (8000188 <HAL_ADC_ConvCpltCallback+0x3c>)
 800015a:	4293      	cmp	r3, r2
 800015c:	d10e      	bne.n	800017c <HAL_ADC_ConvCpltCallback+0x30>
	{
		user_data.ileri = adc_buffer[0];
 800015e:	4b0b      	ldr	r3, [pc, #44]	; (800018c <HAL_ADC_ConvCpltCallback+0x40>)
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	461a      	mov	r2, r3
 8000164:	4b0a      	ldr	r3, [pc, #40]	; (8000190 <HAL_ADC_ConvCpltCallback+0x44>)
 8000166:	601a      	str	r2, [r3, #0]
		user_data.geri = adc_buffer[1];
 8000168:	4b08      	ldr	r3, [pc, #32]	; (800018c <HAL_ADC_ConvCpltCallback+0x40>)
 800016a:	685b      	ldr	r3, [r3, #4]
 800016c:	461a      	mov	r2, r3
 800016e:	4b08      	ldr	r3, [pc, #32]	; (8000190 <HAL_ADC_ConvCpltCallback+0x44>)
 8000170:	605a      	str	r2, [r3, #4]
		user_data.direksiyon = adc_buffer[2];
 8000172:	4b06      	ldr	r3, [pc, #24]	; (800018c <HAL_ADC_ConvCpltCallback+0x40>)
 8000174:	689b      	ldr	r3, [r3, #8]
 8000176:	461a      	mov	r2, r3
 8000178:	4b05      	ldr	r3, [pc, #20]	; (8000190 <HAL_ADC_ConvCpltCallback+0x44>)
 800017a:	609a      	str	r2, [r3, #8]
	}
}
 800017c:	bf00      	nop
 800017e:	370c      	adds	r7, #12
 8000180:	46bd      	mov	sp, r7
 8000182:	bc80      	pop	{r7}
 8000184:	4770      	bx	lr
 8000186:	bf00      	nop
 8000188:	40012400 	.word	0x40012400
 800018c:	20000198 	.word	0x20000198
 8000190:	2000043c 	.word	0x2000043c

08000194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 800019a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char buffer_send[512] = {0};
 800019c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]
 80001a4:	3304      	adds	r3, #4
 80001a6:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 80001aa:	2100      	movs	r1, #0
 80001ac:	4618      	mov	r0, r3
 80001ae:	f007 fc1d 	bl	80079ec <memset>
	char temp[64] = {0};
 80001b2:	463b      	mov	r3, r7
 80001b4:	2200      	movs	r2, #0
 80001b6:	601a      	str	r2, [r3, #0]
 80001b8:	3304      	adds	r3, #4
 80001ba:	223c      	movs	r2, #60	; 0x3c
 80001bc:	2100      	movs	r1, #0
 80001be:	4618      	mov	r0, r3
 80001c0:	f007 fc14 	bl	80079ec <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001c4:	f000 fa46 	bl	8000654 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001c8:	f000 f81c 	bl	8000204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001cc:	f000 f8f2 	bl	80003b4 <MX_GPIO_Init>
  MX_DMA_Init();
 80001d0:	f000 f8d2 	bl	8000378 <MX_DMA_Init>
  MX_ADC1_Init();
 80001d4:	f000 f874 	bl	80002c0 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80001d8:	f006 ff48 	bl	800706c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, adc_buffer, 3);
 80001dc:	2203      	movs	r2, #3
 80001de:	4906      	ldr	r1, [pc, #24]	; (80001f8 <main+0x64>)
 80001e0:	4806      	ldr	r0, [pc, #24]	; (80001fc <main+0x68>)
 80001e2:	f000 fb95 	bl	8000910 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  CDC_Transmit_FS(&user_data, sizeof(ts_user_input));
 80001e6:	210c      	movs	r1, #12
 80001e8:	4805      	ldr	r0, [pc, #20]	; (8000200 <main+0x6c>)
 80001ea:	f006 fffd 	bl	80071e8 <CDC_Transmit_FS>

	  HAL_Delay(500);
 80001ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001f2:	f000 fa91 	bl	8000718 <HAL_Delay>
  {
 80001f6:	e7f6      	b.n	80001e6 <main+0x52>
 80001f8:	20000198 	.word	0x20000198
 80001fc:	200003c8 	.word	0x200003c8
 8000200:	2000043c 	.word	0x2000043c

08000204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b094      	sub	sp, #80	; 0x50
 8000208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800020e:	2228      	movs	r2, #40	; 0x28
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f007 fbea 	bl	80079ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000218:	f107 0314 	add.w	r3, r7, #20
 800021c:	2200      	movs	r2, #0
 800021e:	601a      	str	r2, [r3, #0]
 8000220:	605a      	str	r2, [r3, #4]
 8000222:	609a      	str	r2, [r3, #8]
 8000224:	60da      	str	r2, [r3, #12]
 8000226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
 800022e:	605a      	str	r2, [r3, #4]
 8000230:	609a      	str	r2, [r3, #8]
 8000232:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000234:	2301      	movs	r3, #1
 8000236:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000238:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800023c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000242:	2301      	movs	r3, #1
 8000244:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000246:	2302      	movs	r3, #2
 8000248:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800024a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800024e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000250:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000254:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000256:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800025a:	4618      	mov	r0, r3
 800025c:	f002 fe44 	bl	8002ee8 <HAL_RCC_OscConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000266:	f000 f8d3 	bl	8000410 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026a:	230f      	movs	r3, #15
 800026c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026e:	2302      	movs	r3, #2
 8000270:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800027a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000280:	f107 0314 	add.w	r3, r7, #20
 8000284:	2101      	movs	r1, #1
 8000286:	4618      	mov	r0, r3
 8000288:	f003 f8ae 	bl	80033e8 <HAL_RCC_ClockConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000292:	f000 f8bd 	bl	8000410 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000296:	2312      	movs	r3, #18
 8000298:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800029a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800029e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80002a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80002a4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	4618      	mov	r0, r3
 80002aa:	f003 fa05 	bl	80036b8 <HAL_RCCEx_PeriphCLKConfig>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002b4:	f000 f8ac 	bl	8000410 <Error_Handler>
  }
}
 80002b8:	bf00      	nop
 80002ba:	3750      	adds	r7, #80	; 0x50
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}

080002c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
 80002cc:	605a      	str	r2, [r3, #4]
 80002ce:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002d0:	4b27      	ldr	r3, [pc, #156]	; (8000370 <MX_ADC1_Init+0xb0>)
 80002d2:	4a28      	ldr	r2, [pc, #160]	; (8000374 <MX_ADC1_Init+0xb4>)
 80002d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002d6:	4b26      	ldr	r3, [pc, #152]	; (8000370 <MX_ADC1_Init+0xb0>)
 80002d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002de:	4b24      	ldr	r3, [pc, #144]	; (8000370 <MX_ADC1_Init+0xb0>)
 80002e0:	2201      	movs	r2, #1
 80002e2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002e4:	4b22      	ldr	r3, [pc, #136]	; (8000370 <MX_ADC1_Init+0xb0>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002ea:	4b21      	ldr	r3, [pc, #132]	; (8000370 <MX_ADC1_Init+0xb0>)
 80002ec:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002f2:	4b1f      	ldr	r3, [pc, #124]	; (8000370 <MX_ADC1_Init+0xb0>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80002f8:	4b1d      	ldr	r3, [pc, #116]	; (8000370 <MX_ADC1_Init+0xb0>)
 80002fa:	2203      	movs	r2, #3
 80002fc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002fe:	481c      	ldr	r0, [pc, #112]	; (8000370 <MX_ADC1_Init+0xb0>)
 8000300:	f000 fa2e 	bl	8000760 <HAL_ADC_Init>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800030a:	f000 f881 	bl	8000410 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800030e:	2308      	movs	r3, #8
 8000310:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000312:	2301      	movs	r3, #1
 8000314:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000316:	2305      	movs	r3, #5
 8000318:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	4619      	mov	r1, r3
 800031e:	4814      	ldr	r0, [pc, #80]	; (8000370 <MX_ADC1_Init+0xb0>)
 8000320:	f000 fbe6 	bl	8000af0 <HAL_ADC_ConfigChannel>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800032a:	f000 f871 	bl	8000410 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800032e:	2309      	movs	r3, #9
 8000330:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000332:	2302      	movs	r3, #2
 8000334:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	4619      	mov	r1, r3
 800033a:	480d      	ldr	r0, [pc, #52]	; (8000370 <MX_ADC1_Init+0xb0>)
 800033c:	f000 fbd8 	bl	8000af0 <HAL_ADC_ConfigChannel>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000346:	f000 f863 	bl	8000410 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800034a:	2307      	movs	r3, #7
 800034c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800034e:	2303      	movs	r3, #3
 8000350:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	4619      	mov	r1, r3
 8000356:	4806      	ldr	r0, [pc, #24]	; (8000370 <MX_ADC1_Init+0xb0>)
 8000358:	f000 fbca 	bl	8000af0 <HAL_ADC_ConfigChannel>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000362:	f000 f855 	bl	8000410 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000366:	bf00      	nop
 8000368:	3710      	adds	r7, #16
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	200003c8 	.word	0x200003c8
 8000374:	40012400 	.word	0x40012400

08000378 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800037e:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <MX_DMA_Init+0x38>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	4a0b      	ldr	r2, [pc, #44]	; (80003b0 <MX_DMA_Init+0x38>)
 8000384:	f043 0301 	orr.w	r3, r3, #1
 8000388:	6153      	str	r3, [r2, #20]
 800038a:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <MX_DMA_Init+0x38>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	f003 0301 	and.w	r3, r3, #1
 8000392:	607b      	str	r3, [r7, #4]
 8000394:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000396:	2200      	movs	r2, #0
 8000398:	2100      	movs	r1, #0
 800039a:	200b      	movs	r0, #11
 800039c:	f000 fe69 	bl	8001072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80003a0:	200b      	movs	r0, #11
 80003a2:	f000 fe82 	bl	80010aa <HAL_NVIC_EnableIRQ>

}
 80003a6:	bf00      	nop
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40021000 	.word	0x40021000

080003b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b085      	sub	sp, #20
 80003b8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ba:	4b14      	ldr	r3, [pc, #80]	; (800040c <MX_GPIO_Init+0x58>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	4a13      	ldr	r2, [pc, #76]	; (800040c <MX_GPIO_Init+0x58>)
 80003c0:	f043 0320 	orr.w	r3, r3, #32
 80003c4:	6193      	str	r3, [r2, #24]
 80003c6:	4b11      	ldr	r3, [pc, #68]	; (800040c <MX_GPIO_Init+0x58>)
 80003c8:	699b      	ldr	r3, [r3, #24]
 80003ca:	f003 0320 	and.w	r3, r3, #32
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d2:	4b0e      	ldr	r3, [pc, #56]	; (800040c <MX_GPIO_Init+0x58>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	4a0d      	ldr	r2, [pc, #52]	; (800040c <MX_GPIO_Init+0x58>)
 80003d8:	f043 0304 	orr.w	r3, r3, #4
 80003dc:	6193      	str	r3, [r2, #24]
 80003de:	4b0b      	ldr	r3, [pc, #44]	; (800040c <MX_GPIO_Init+0x58>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	f003 0304 	and.w	r3, r3, #4
 80003e6:	60bb      	str	r3, [r7, #8]
 80003e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ea:	4b08      	ldr	r3, [pc, #32]	; (800040c <MX_GPIO_Init+0x58>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	4a07      	ldr	r2, [pc, #28]	; (800040c <MX_GPIO_Init+0x58>)
 80003f0:	f043 0308 	orr.w	r3, r3, #8
 80003f4:	6193      	str	r3, [r2, #24]
 80003f6:	4b05      	ldr	r3, [pc, #20]	; (800040c <MX_GPIO_Init+0x58>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	f003 0308 	and.w	r3, r3, #8
 80003fe:	607b      	str	r3, [r7, #4]
 8000400:	687b      	ldr	r3, [r7, #4]

}
 8000402:	bf00      	nop
 8000404:	3714      	adds	r7, #20
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr
 800040c:	40021000 	.word	0x40021000

08000410 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000414:	b672      	cpsid	i
}
 8000416:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000418:	e7fe      	b.n	8000418 <Error_Handler+0x8>
	...

0800041c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000422:	4b15      	ldr	r3, [pc, #84]	; (8000478 <HAL_MspInit+0x5c>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	4a14      	ldr	r2, [pc, #80]	; (8000478 <HAL_MspInit+0x5c>)
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	6193      	str	r3, [r2, #24]
 800042e:	4b12      	ldr	r3, [pc, #72]	; (8000478 <HAL_MspInit+0x5c>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	60bb      	str	r3, [r7, #8]
 8000438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800043a:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <HAL_MspInit+0x5c>)
 800043c:	69db      	ldr	r3, [r3, #28]
 800043e:	4a0e      	ldr	r2, [pc, #56]	; (8000478 <HAL_MspInit+0x5c>)
 8000440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000444:	61d3      	str	r3, [r2, #28]
 8000446:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <HAL_MspInit+0x5c>)
 8000448:	69db      	ldr	r3, [r3, #28]
 800044a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000452:	4b0a      	ldr	r3, [pc, #40]	; (800047c <HAL_MspInit+0x60>)
 8000454:	685b      	ldr	r3, [r3, #4]
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	4a04      	ldr	r2, [pc, #16]	; (800047c <HAL_MspInit+0x60>)
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046e:	bf00      	nop
 8000470:	3714      	adds	r7, #20
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr
 8000478:	40021000 	.word	0x40021000
 800047c:	40010000 	.word	0x40010000

08000480 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b08a      	sub	sp, #40	; 0x28
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000488:	f107 0318 	add.w	r3, r7, #24
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]
 8000494:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a34      	ldr	r2, [pc, #208]	; (800056c <HAL_ADC_MspInit+0xec>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d160      	bne.n	8000562 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004a0:	4b33      	ldr	r3, [pc, #204]	; (8000570 <HAL_ADC_MspInit+0xf0>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a32      	ldr	r2, [pc, #200]	; (8000570 <HAL_ADC_MspInit+0xf0>)
 80004a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	4b30      	ldr	r3, [pc, #192]	; (8000570 <HAL_ADC_MspInit+0xf0>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80004b4:	617b      	str	r3, [r7, #20]
 80004b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b8:	4b2d      	ldr	r3, [pc, #180]	; (8000570 <HAL_ADC_MspInit+0xf0>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a2c      	ldr	r2, [pc, #176]	; (8000570 <HAL_ADC_MspInit+0xf0>)
 80004be:	f043 0304 	orr.w	r3, r3, #4
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b2a      	ldr	r3, [pc, #168]	; (8000570 <HAL_ADC_MspInit+0xf0>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f003 0304 	and.w	r3, r3, #4
 80004cc:	613b      	str	r3, [r7, #16]
 80004ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d0:	4b27      	ldr	r3, [pc, #156]	; (8000570 <HAL_ADC_MspInit+0xf0>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	4a26      	ldr	r2, [pc, #152]	; (8000570 <HAL_ADC_MspInit+0xf0>)
 80004d6:	f043 0308 	orr.w	r3, r3, #8
 80004da:	6193      	str	r3, [r2, #24]
 80004dc:	4b24      	ldr	r3, [pc, #144]	; (8000570 <HAL_ADC_MspInit+0xf0>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f003 0308 	and.w	r3, r3, #8
 80004e4:	60fb      	str	r3, [r7, #12]
 80004e6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004ec:	2303      	movs	r3, #3
 80004ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f0:	f107 0318 	add.w	r3, r7, #24
 80004f4:	4619      	mov	r1, r3
 80004f6:	481f      	ldr	r0, [pc, #124]	; (8000574 <HAL_ADC_MspInit+0xf4>)
 80004f8:	f000 ffe0 	bl	80014bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80004fc:	2303      	movs	r3, #3
 80004fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000500:	2303      	movs	r3, #3
 8000502:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000504:	f107 0318 	add.w	r3, r7, #24
 8000508:	4619      	mov	r1, r3
 800050a:	481b      	ldr	r0, [pc, #108]	; (8000578 <HAL_ADC_MspInit+0xf8>)
 800050c:	f000 ffd6 	bl	80014bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000510:	4b1a      	ldr	r3, [pc, #104]	; (800057c <HAL_ADC_MspInit+0xfc>)
 8000512:	4a1b      	ldr	r2, [pc, #108]	; (8000580 <HAL_ADC_MspInit+0x100>)
 8000514:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000516:	4b19      	ldr	r3, [pc, #100]	; (800057c <HAL_ADC_MspInit+0xfc>)
 8000518:	2200      	movs	r2, #0
 800051a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800051c:	4b17      	ldr	r3, [pc, #92]	; (800057c <HAL_ADC_MspInit+0xfc>)
 800051e:	2200      	movs	r2, #0
 8000520:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000522:	4b16      	ldr	r3, [pc, #88]	; (800057c <HAL_ADC_MspInit+0xfc>)
 8000524:	2280      	movs	r2, #128	; 0x80
 8000526:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000528:	4b14      	ldr	r3, [pc, #80]	; (800057c <HAL_ADC_MspInit+0xfc>)
 800052a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800052e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <HAL_ADC_MspInit+0xfc>)
 8000532:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000536:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000538:	4b10      	ldr	r3, [pc, #64]	; (800057c <HAL_ADC_MspInit+0xfc>)
 800053a:	2220      	movs	r2, #32
 800053c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800053e:	4b0f      	ldr	r3, [pc, #60]	; (800057c <HAL_ADC_MspInit+0xfc>)
 8000540:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000544:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000546:	480d      	ldr	r0, [pc, #52]	; (800057c <HAL_ADC_MspInit+0xfc>)
 8000548:	f000 fdca 	bl	80010e0 <HAL_DMA_Init>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 8000552:	f7ff ff5d 	bl	8000410 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4a08      	ldr	r2, [pc, #32]	; (800057c <HAL_ADC_MspInit+0xfc>)
 800055a:	621a      	str	r2, [r3, #32]
 800055c:	4a07      	ldr	r2, [pc, #28]	; (800057c <HAL_ADC_MspInit+0xfc>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000562:	bf00      	nop
 8000564:	3728      	adds	r7, #40	; 0x28
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	40012400 	.word	0x40012400
 8000570:	40021000 	.word	0x40021000
 8000574:	40010800 	.word	0x40010800
 8000578:	40010c00 	.word	0x40010c00
 800057c:	200003f8 	.word	0x200003f8
 8000580:	40020008 	.word	0x40020008

08000584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000588:	e7fe      	b.n	8000588 <NMI_Handler+0x4>

0800058a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800058e:	e7fe      	b.n	800058e <HardFault_Handler+0x4>

08000590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000594:	e7fe      	b.n	8000594 <MemManage_Handler+0x4>

08000596 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800059a:	e7fe      	b.n	800059a <BusFault_Handler+0x4>

0800059c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <UsageFault_Handler+0x4>

080005a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr

080005ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr

080005ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005be:	bf00      	nop
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr

080005c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ca:	f000 f889 	bl	80006e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80005d8:	4802      	ldr	r0, [pc, #8]	; (80005e4 <DMA1_Channel1_IRQHandler+0x10>)
 80005da:	f000 fe3b 	bl	8001254 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	200003f8 	.word	0x200003f8

080005e8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80005ec:	4802      	ldr	r0, [pc, #8]	; (80005f8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80005ee:	f001 fa1a 	bl	8001a26 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	200010e0 	.word	0x200010e0

080005fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr

08000608 <Reset_Handler>:
 8000608:	2100      	movs	r1, #0
 800060a:	e003      	b.n	8000614 <LoopCopyDataInit>

0800060c <CopyDataInit>:
 800060c:	4b0b      	ldr	r3, [pc, #44]	; (800063c <LoopFillZerobss+0x14>)
 800060e:	585b      	ldr	r3, [r3, r1]
 8000610:	5043      	str	r3, [r0, r1]
 8000612:	3104      	adds	r1, #4

08000614 <LoopCopyDataInit>:
 8000614:	480a      	ldr	r0, [pc, #40]	; (8000640 <LoopFillZerobss+0x18>)
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <LoopFillZerobss+0x1c>)
 8000618:	1842      	adds	r2, r0, r1
 800061a:	429a      	cmp	r2, r3
 800061c:	d3f6      	bcc.n	800060c <CopyDataInit>
 800061e:	4a0a      	ldr	r2, [pc, #40]	; (8000648 <LoopFillZerobss+0x20>)
 8000620:	e002      	b.n	8000628 <LoopFillZerobss>

08000622 <FillZerobss>:
 8000622:	2300      	movs	r3, #0
 8000624:	f842 3b04 	str.w	r3, [r2], #4

08000628 <LoopFillZerobss>:
 8000628:	4b08      	ldr	r3, [pc, #32]	; (800064c <LoopFillZerobss+0x24>)
 800062a:	429a      	cmp	r2, r3
 800062c:	d3f9      	bcc.n	8000622 <FillZerobss>
 800062e:	f7ff ffe5 	bl	80005fc <SystemInit>
 8000632:	f007 f9b7 	bl	80079a4 <__libc_init_array>
 8000636:	f7ff fdad 	bl	8000194 <main>
 800063a:	4770      	bx	lr
 800063c:	08007a84 	.word	0x08007a84
 8000640:	20000000 	.word	0x20000000
 8000644:	2000017c 	.word	0x2000017c
 8000648:	2000017c 	.word	0x2000017c
 800064c:	200013cc 	.word	0x200013cc

08000650 <ADC1_2_IRQHandler>:
 8000650:	e7fe      	b.n	8000650 <ADC1_2_IRQHandler>
	...

08000654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <HAL_Init+0x28>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a07      	ldr	r2, [pc, #28]	; (800067c <HAL_Init+0x28>)
 800065e:	f043 0310 	orr.w	r3, r3, #16
 8000662:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000664:	2003      	movs	r0, #3
 8000666:	f000 fcf9 	bl	800105c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800066a:	2000      	movs	r0, #0
 800066c:	f000 f808 	bl	8000680 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000670:	f7ff fed4 	bl	800041c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000674:	2300      	movs	r3, #0
}
 8000676:	4618      	mov	r0, r3
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40022000 	.word	0x40022000

08000680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <HAL_InitTick+0x54>)
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <HAL_InitTick+0x58>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	4619      	mov	r1, r3
 8000692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000696:	fbb3 f3f1 	udiv	r3, r3, r1
 800069a:	fbb2 f3f3 	udiv	r3, r2, r3
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 fd11 	bl	80010c6 <HAL_SYSTICK_Config>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006aa:	2301      	movs	r3, #1
 80006ac:	e00e      	b.n	80006cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2b0f      	cmp	r3, #15
 80006b2:	d80a      	bhi.n	80006ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b4:	2200      	movs	r2, #0
 80006b6:	6879      	ldr	r1, [r7, #4]
 80006b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006bc:	f000 fcd9 	bl	8001072 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006c0:	4a06      	ldr	r2, [pc, #24]	; (80006dc <HAL_InitTick+0x5c>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006c6:	2300      	movs	r3, #0
 80006c8:	e000      	b.n	80006cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006ca:	2301      	movs	r3, #1
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000000 	.word	0x20000000
 80006d8:	20000008 	.word	0x20000008
 80006dc:	20000004 	.word	0x20000004

080006e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <HAL_IncTick+0x1c>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b05      	ldr	r3, [pc, #20]	; (8000700 <HAL_IncTick+0x20>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4413      	add	r3, r2
 80006f0:	4a03      	ldr	r2, [pc, #12]	; (8000700 <HAL_IncTick+0x20>)
 80006f2:	6013      	str	r3, [r2, #0]
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr
 80006fc:	20000008 	.word	0x20000008
 8000700:	20000448 	.word	0x20000448

08000704 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  return uwTick;
 8000708:	4b02      	ldr	r3, [pc, #8]	; (8000714 <HAL_GetTick+0x10>)
 800070a:	681b      	ldr	r3, [r3, #0]
}
 800070c:	4618      	mov	r0, r3
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr
 8000714:	20000448 	.word	0x20000448

08000718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000720:	f7ff fff0 	bl	8000704 <HAL_GetTick>
 8000724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000730:	d005      	beq.n	800073e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000732:	4b0a      	ldr	r3, [pc, #40]	; (800075c <HAL_Delay+0x44>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	461a      	mov	r2, r3
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	4413      	add	r3, r2
 800073c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800073e:	bf00      	nop
 8000740:	f7ff ffe0 	bl	8000704 <HAL_GetTick>
 8000744:	4602      	mov	r2, r0
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	68fa      	ldr	r2, [r7, #12]
 800074c:	429a      	cmp	r2, r3
 800074e:	d8f7      	bhi.n	8000740 <HAL_Delay+0x28>
  {
  }
}
 8000750:	bf00      	nop
 8000752:	bf00      	nop
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000008 	.word	0x20000008

08000760 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000768:	2300      	movs	r3, #0
 800076a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800076c:	2300      	movs	r3, #0
 800076e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000770:	2300      	movs	r3, #0
 8000772:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000774:	2300      	movs	r3, #0
 8000776:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d101      	bne.n	8000782 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800077e:	2301      	movs	r3, #1
 8000780:	e0be      	b.n	8000900 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	689b      	ldr	r3, [r3, #8]
 8000786:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800078c:	2b00      	cmp	r3, #0
 800078e:	d109      	bne.n	80007a4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2200      	movs	r2, #0
 8000794:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2200      	movs	r2, #0
 800079a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f7ff fe6e 	bl	8000480 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f000 faed 	bl	8000d84 <ADC_ConversionStop_Disable>
 80007aa:	4603      	mov	r3, r0
 80007ac:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007b2:	f003 0310 	and.w	r3, r3, #16
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	f040 8099 	bne.w	80008ee <HAL_ADC_Init+0x18e>
 80007bc:	7dfb      	ldrb	r3, [r7, #23]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	f040 8095 	bne.w	80008ee <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80007cc:	f023 0302 	bic.w	r3, r3, #2
 80007d0:	f043 0202 	orr.w	r2, r3, #2
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007e0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	7b1b      	ldrb	r3, [r3, #12]
 80007e6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80007e8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007ea:	68ba      	ldr	r2, [r7, #8]
 80007ec:	4313      	orrs	r3, r2
 80007ee:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	689b      	ldr	r3, [r3, #8]
 80007f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007f8:	d003      	beq.n	8000802 <HAL_ADC_Init+0xa2>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	689b      	ldr	r3, [r3, #8]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d102      	bne.n	8000808 <HAL_ADC_Init+0xa8>
 8000802:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000806:	e000      	b.n	800080a <HAL_ADC_Init+0xaa>
 8000808:	2300      	movs	r3, #0
 800080a:	693a      	ldr	r2, [r7, #16]
 800080c:	4313      	orrs	r3, r2
 800080e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	7d1b      	ldrb	r3, [r3, #20]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d119      	bne.n	800084c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	7b1b      	ldrb	r3, [r3, #12]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d109      	bne.n	8000834 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	3b01      	subs	r3, #1
 8000826:	035a      	lsls	r2, r3, #13
 8000828:	693b      	ldr	r3, [r7, #16]
 800082a:	4313      	orrs	r3, r2
 800082c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	e00b      	b.n	800084c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000838:	f043 0220 	orr.w	r2, r3, #32
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000844:	f043 0201 	orr.w	r2, r3, #1
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	693a      	ldr	r2, [r7, #16]
 800085c:	430a      	orrs	r2, r1
 800085e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	689a      	ldr	r2, [r3, #8]
 8000866:	4b28      	ldr	r3, [pc, #160]	; (8000908 <HAL_ADC_Init+0x1a8>)
 8000868:	4013      	ands	r3, r2
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	6812      	ldr	r2, [r2, #0]
 800086e:	68b9      	ldr	r1, [r7, #8]
 8000870:	430b      	orrs	r3, r1
 8000872:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	689b      	ldr	r3, [r3, #8]
 8000878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800087c:	d003      	beq.n	8000886 <HAL_ADC_Init+0x126>
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	689b      	ldr	r3, [r3, #8]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d104      	bne.n	8000890 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	691b      	ldr	r3, [r3, #16]
 800088a:	3b01      	subs	r3, #1
 800088c:	051b      	lsls	r3, r3, #20
 800088e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000896:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	68fa      	ldr	r2, [r7, #12]
 80008a0:	430a      	orrs	r2, r1
 80008a2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	689a      	ldr	r2, [r3, #8]
 80008aa:	4b18      	ldr	r3, [pc, #96]	; (800090c <HAL_ADC_Init+0x1ac>)
 80008ac:	4013      	ands	r3, r2
 80008ae:	68ba      	ldr	r2, [r7, #8]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d10b      	bne.n	80008cc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2200      	movs	r2, #0
 80008b8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008be:	f023 0303 	bic.w	r3, r3, #3
 80008c2:	f043 0201 	orr.w	r2, r3, #1
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008ca:	e018      	b.n	80008fe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008d0:	f023 0312 	bic.w	r3, r3, #18
 80008d4:	f043 0210 	orr.w	r2, r3, #16
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e0:	f043 0201 	orr.w	r2, r3, #1
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80008e8:	2301      	movs	r3, #1
 80008ea:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008ec:	e007      	b.n	80008fe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008f2:	f043 0210 	orr.w	r2, r3, #16
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
 80008fc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80008fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000900:	4618      	mov	r0, r3
 8000902:	3718      	adds	r7, #24
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	ffe1f7fd 	.word	0xffe1f7fd
 800090c:	ff1f0efe 	.word	0xff1f0efe

08000910 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800091c:	2300      	movs	r3, #0
 800091e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a64      	ldr	r2, [pc, #400]	; (8000ab8 <HAL_ADC_Start_DMA+0x1a8>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d004      	beq.n	8000934 <HAL_ADC_Start_DMA+0x24>
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a63      	ldr	r2, [pc, #396]	; (8000abc <HAL_ADC_Start_DMA+0x1ac>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d106      	bne.n	8000942 <HAL_ADC_Start_DMA+0x32>
 8000934:	4b60      	ldr	r3, [pc, #384]	; (8000ab8 <HAL_ADC_Start_DMA+0x1a8>)
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800093c:	2b00      	cmp	r3, #0
 800093e:	f040 80b3 	bne.w	8000aa8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000948:	2b01      	cmp	r3, #1
 800094a:	d101      	bne.n	8000950 <HAL_ADC_Start_DMA+0x40>
 800094c:	2302      	movs	r3, #2
 800094e:	e0ae      	b.n	8000aae <HAL_ADC_Start_DMA+0x19e>
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	2201      	movs	r2, #1
 8000954:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000958:	68f8      	ldr	r0, [r7, #12]
 800095a:	f000 f9c1 	bl	8000ce0 <ADC_Enable>
 800095e:	4603      	mov	r3, r0
 8000960:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000962:	7dfb      	ldrb	r3, [r7, #23]
 8000964:	2b00      	cmp	r3, #0
 8000966:	f040 809a 	bne.w	8000a9e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800096e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000972:	f023 0301 	bic.w	r3, r3, #1
 8000976:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a4e      	ldr	r2, [pc, #312]	; (8000abc <HAL_ADC_Start_DMA+0x1ac>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d105      	bne.n	8000994 <HAL_ADC_Start_DMA+0x84>
 8000988:	4b4b      	ldr	r3, [pc, #300]	; (8000ab8 <HAL_ADC_Start_DMA+0x1a8>)
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000990:	2b00      	cmp	r3, #0
 8000992:	d115      	bne.n	80009c0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000998:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d026      	beq.n	80009fc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80009be:	e01d      	b.n	80009fc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a39      	ldr	r2, [pc, #228]	; (8000ab8 <HAL_ADC_Start_DMA+0x1a8>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d004      	beq.n	80009e0 <HAL_ADC_Start_DMA+0xd0>
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a38      	ldr	r2, [pc, #224]	; (8000abc <HAL_ADC_Start_DMA+0x1ac>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d10d      	bne.n	80009fc <HAL_ADC_Start_DMA+0xec>
 80009e0:	4b35      	ldr	r3, [pc, #212]	; (8000ab8 <HAL_ADC_Start_DMA+0x1a8>)
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d007      	beq.n	80009fc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d006      	beq.n	8000a16 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a0c:	f023 0206 	bic.w	r2, r3, #6
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a14:	e002      	b.n	8000a1c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	6a1b      	ldr	r3, [r3, #32]
 8000a28:	4a25      	ldr	r2, [pc, #148]	; (8000ac0 <HAL_ADC_Start_DMA+0x1b0>)
 8000a2a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	6a1b      	ldr	r3, [r3, #32]
 8000a30:	4a24      	ldr	r2, [pc, #144]	; (8000ac4 <HAL_ADC_Start_DMA+0x1b4>)
 8000a32:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	6a1b      	ldr	r3, [r3, #32]
 8000a38:	4a23      	ldr	r2, [pc, #140]	; (8000ac8 <HAL_ADC_Start_DMA+0x1b8>)
 8000a3a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f06f 0202 	mvn.w	r2, #2
 8000a44:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	689a      	ldr	r2, [r3, #8]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a54:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	6a18      	ldr	r0, [r3, #32]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	334c      	adds	r3, #76	; 0x4c
 8000a60:	4619      	mov	r1, r3
 8000a62:	68ba      	ldr	r2, [r7, #8]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f000 fb95 	bl	8001194 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000a74:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000a78:	d108      	bne.n	8000a8c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	689a      	ldr	r2, [r3, #8]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000a88:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000a8a:	e00f      	b.n	8000aac <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	689a      	ldr	r2, [r3, #8]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000a9a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000a9c:	e006      	b.n	8000aac <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000aa6:	e001      	b.n	8000aac <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3718      	adds	r7, #24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40012400 	.word	0x40012400
 8000abc:	40012800 	.word	0x40012800
 8000ac0:	08000df9 	.word	0x08000df9
 8000ac4:	08000e75 	.word	0x08000e75
 8000ac8:	08000e91 	.word	0x08000e91

08000acc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr

08000ade <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	b083      	sub	sp, #12
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000afa:	2300      	movs	r3, #0
 8000afc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000afe:	2300      	movs	r3, #0
 8000b00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d101      	bne.n	8000b10 <HAL_ADC_ConfigChannel+0x20>
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	e0dc      	b.n	8000cca <HAL_ADC_ConfigChannel+0x1da>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2201      	movs	r2, #1
 8000b14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	2b06      	cmp	r3, #6
 8000b1e:	d81c      	bhi.n	8000b5a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685a      	ldr	r2, [r3, #4]
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	4413      	add	r3, r2
 8000b30:	3b05      	subs	r3, #5
 8000b32:	221f      	movs	r2, #31
 8000b34:	fa02 f303 	lsl.w	r3, r2, r3
 8000b38:	43db      	mvns	r3, r3
 8000b3a:	4019      	ands	r1, r3
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	6818      	ldr	r0, [r3, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	685a      	ldr	r2, [r3, #4]
 8000b44:	4613      	mov	r3, r2
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	4413      	add	r3, r2
 8000b4a:	3b05      	subs	r3, #5
 8000b4c:	fa00 f203 	lsl.w	r2, r0, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	430a      	orrs	r2, r1
 8000b56:	635a      	str	r2, [r3, #52]	; 0x34
 8000b58:	e03c      	b.n	8000bd4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	2b0c      	cmp	r3, #12
 8000b60:	d81c      	bhi.n	8000b9c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685a      	ldr	r2, [r3, #4]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	4413      	add	r3, r2
 8000b72:	3b23      	subs	r3, #35	; 0x23
 8000b74:	221f      	movs	r2, #31
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	4019      	ands	r1, r3
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	6818      	ldr	r0, [r3, #0]
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685a      	ldr	r2, [r3, #4]
 8000b86:	4613      	mov	r3, r2
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	4413      	add	r3, r2
 8000b8c:	3b23      	subs	r3, #35	; 0x23
 8000b8e:	fa00 f203 	lsl.w	r2, r0, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	430a      	orrs	r2, r1
 8000b98:	631a      	str	r2, [r3, #48]	; 0x30
 8000b9a:	e01b      	b.n	8000bd4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685a      	ldr	r2, [r3, #4]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	4413      	add	r3, r2
 8000bac:	3b41      	subs	r3, #65	; 0x41
 8000bae:	221f      	movs	r2, #31
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	4019      	ands	r1, r3
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	6818      	ldr	r0, [r3, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685a      	ldr	r2, [r3, #4]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	4413      	add	r3, r2
 8000bc6:	3b41      	subs	r3, #65	; 0x41
 8000bc8:	fa00 f203 	lsl.w	r2, r0, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b09      	cmp	r3, #9
 8000bda:	d91c      	bls.n	8000c16 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	68d9      	ldr	r1, [r3, #12]
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	4613      	mov	r3, r2
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	4413      	add	r3, r2
 8000bec:	3b1e      	subs	r3, #30
 8000bee:	2207      	movs	r2, #7
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	4019      	ands	r1, r3
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	6898      	ldr	r0, [r3, #8]
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4613      	mov	r3, r2
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	4413      	add	r3, r2
 8000c06:	3b1e      	subs	r3, #30
 8000c08:	fa00 f203 	lsl.w	r2, r0, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	430a      	orrs	r2, r1
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	e019      	b.n	8000c4a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	6919      	ldr	r1, [r3, #16]
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4613      	mov	r3, r2
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	4413      	add	r3, r2
 8000c26:	2207      	movs	r2, #7
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	4019      	ands	r1, r3
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	6898      	ldr	r0, [r3, #8]
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	4413      	add	r3, r2
 8000c3e:	fa00 f203 	lsl.w	r2, r0, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	430a      	orrs	r2, r1
 8000c48:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2b10      	cmp	r3, #16
 8000c50:	d003      	beq.n	8000c5a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000c56:	2b11      	cmp	r3, #17
 8000c58:	d132      	bne.n	8000cc0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a1d      	ldr	r2, [pc, #116]	; (8000cd4 <HAL_ADC_ConfigChannel+0x1e4>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d125      	bne.n	8000cb0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d126      	bne.n	8000cc0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	689a      	ldr	r2, [r3, #8]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000c80:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2b10      	cmp	r3, #16
 8000c88:	d11a      	bne.n	8000cc0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000c8a:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <HAL_ADC_ConfigChannel+0x1e8>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a13      	ldr	r2, [pc, #76]	; (8000cdc <HAL_ADC_ConfigChannel+0x1ec>)
 8000c90:	fba2 2303 	umull	r2, r3, r2, r3
 8000c94:	0c9a      	lsrs	r2, r3, #18
 8000c96:	4613      	mov	r3, r2
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	4413      	add	r3, r2
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ca0:	e002      	b.n	8000ca8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d1f9      	bne.n	8000ca2 <HAL_ADC_ConfigChannel+0x1b2>
 8000cae:	e007      	b.n	8000cc0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb4:	f043 0220 	orr.w	r2, r3, #32
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr
 8000cd4:	40012400 	.word	0x40012400
 8000cd8:	20000000 	.word	0x20000000
 8000cdc:	431bde83 	.word	0x431bde83

08000ce0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d039      	beq.n	8000d72 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	689a      	ldr	r2, [r3, #8]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f042 0201 	orr.w	r2, r2, #1
 8000d0c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000d0e:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <ADC_Enable+0x9c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a1b      	ldr	r2, [pc, #108]	; (8000d80 <ADC_Enable+0xa0>)
 8000d14:	fba2 2303 	umull	r2, r3, r2, r3
 8000d18:	0c9b      	lsrs	r3, r3, #18
 8000d1a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000d1c:	e002      	b.n	8000d24 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d1f9      	bne.n	8000d1e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000d2a:	f7ff fceb 	bl	8000704 <HAL_GetTick>
 8000d2e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000d30:	e018      	b.n	8000d64 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000d32:	f7ff fce7 	bl	8000704 <HAL_GetTick>
 8000d36:	4602      	mov	r2, r0
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d911      	bls.n	8000d64 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d44:	f043 0210 	orr.w	r2, r3, #16
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d50:	f043 0201 	orr.w	r2, r3, #1
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	e007      	b.n	8000d74 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d1df      	bne.n	8000d32 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000d72:	2300      	movs	r3, #0
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3710      	adds	r7, #16
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	431bde83 	.word	0x431bde83

08000d84 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d127      	bne.n	8000dee <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	689a      	ldr	r2, [r3, #8]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f022 0201 	bic.w	r2, r2, #1
 8000dac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000dae:	f7ff fca9 	bl	8000704 <HAL_GetTick>
 8000db2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000db4:	e014      	b.n	8000de0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000db6:	f7ff fca5 	bl	8000704 <HAL_GetTick>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d90d      	bls.n	8000de0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc8:	f043 0210 	orr.w	r2, r3, #16
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd4:	f043 0201 	orr.w	r2, r3, #1
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e007      	b.n	8000df0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d0e3      	beq.n	8000db6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000dee:	2300      	movs	r3, #0
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e04:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e0a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d127      	bne.n	8000e62 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e16:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000e28:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e2c:	d115      	bne.n	8000e5a <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d111      	bne.n	8000e5a <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d105      	bne.n	8000e5a <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e52:	f043 0201 	orr.w	r2, r3, #1
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000e5a:	68f8      	ldr	r0, [r7, #12]
 8000e5c:	f7ff f976 	bl	800014c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000e60:	e004      	b.n	8000e6c <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	6a1b      	ldr	r3, [r3, #32]
 8000e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	4798      	blx	r3
}
 8000e6c:	bf00      	nop
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e80:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000e82:	68f8      	ldr	r0, [r7, #12]
 8000e84:	f7ff fe22 	bl	8000acc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000e88:	bf00      	nop
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eae:	f043 0204 	orr.w	r2, r3, #4
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000eb6:	68f8      	ldr	r0, [r7, #12]
 8000eb8:	f7ff fe11 	bl	8000ade <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000ebc:	bf00      	nop
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef6:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	60d3      	str	r3, [r2, #12]
}
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f10:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <__NVIC_GetPriorityGrouping+0x18>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	0a1b      	lsrs	r3, r3, #8
 8000f16:	f003 0307 	and.w	r3, r3, #7
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	db0b      	blt.n	8000f52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	f003 021f 	and.w	r2, r3, #31
 8000f40:	4906      	ldr	r1, [pc, #24]	; (8000f5c <__NVIC_EnableIRQ+0x34>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	095b      	lsrs	r3, r3, #5
 8000f48:	2001      	movs	r0, #1
 8000f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr
 8000f5c:	e000e100 	.word	0xe000e100

08000f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	6039      	str	r1, [r7, #0]
 8000f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	db0a      	blt.n	8000f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	490c      	ldr	r1, [pc, #48]	; (8000fac <__NVIC_SetPriority+0x4c>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	0112      	lsls	r2, r2, #4
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	440b      	add	r3, r1
 8000f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f88:	e00a      	b.n	8000fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	4908      	ldr	r1, [pc, #32]	; (8000fb0 <__NVIC_SetPriority+0x50>)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	3b04      	subs	r3, #4
 8000f98:	0112      	lsls	r2, r2, #4
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	761a      	strb	r2, [r3, #24]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000e100 	.word	0xe000e100
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	; 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f1c3 0307 	rsb	r3, r3, #7
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	bf28      	it	cs
 8000fd2:	2304      	movcs	r3, #4
 8000fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	2b06      	cmp	r3, #6
 8000fdc:	d902      	bls.n	8000fe4 <NVIC_EncodePriority+0x30>
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3b03      	subs	r3, #3
 8000fe2:	e000      	b.n	8000fe6 <NVIC_EncodePriority+0x32>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ffc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	fa01 f303 	lsl.w	r3, r1, r3
 8001006:	43d9      	mvns	r1, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	4313      	orrs	r3, r2
         );
}
 800100e:	4618      	mov	r0, r3
 8001010:	3724      	adds	r7, #36	; 0x24
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3b01      	subs	r3, #1
 8001024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001028:	d301      	bcc.n	800102e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800102a:	2301      	movs	r3, #1
 800102c:	e00f      	b.n	800104e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800102e:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <SysTick_Config+0x40>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3b01      	subs	r3, #1
 8001034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001036:	210f      	movs	r1, #15
 8001038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800103c:	f7ff ff90 	bl	8000f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <SysTick_Config+0x40>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001046:	4b04      	ldr	r3, [pc, #16]	; (8001058 <SysTick_Config+0x40>)
 8001048:	2207      	movs	r2, #7
 800104a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	e000e010 	.word	0xe000e010

0800105c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff ff2d 	bl	8000ec4 <__NVIC_SetPriorityGrouping>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001072:	b580      	push	{r7, lr}
 8001074:	b086      	sub	sp, #24
 8001076:	af00      	add	r7, sp, #0
 8001078:	4603      	mov	r3, r0
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001084:	f7ff ff42 	bl	8000f0c <__NVIC_GetPriorityGrouping>
 8001088:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	68b9      	ldr	r1, [r7, #8]
 800108e:	6978      	ldr	r0, [r7, #20]
 8001090:	f7ff ff90 	bl	8000fb4 <NVIC_EncodePriority>
 8001094:	4602      	mov	r2, r0
 8001096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff5f 	bl	8000f60 <__NVIC_SetPriority>
}
 80010a2:	bf00      	nop
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff35 	bl	8000f28 <__NVIC_EnableIRQ>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff ffa2 	bl	8001018 <SysTick_Config>
 80010d4:	4603      	mov	r3, r0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d101      	bne.n	80010f6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e043      	b.n	800117e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	4b22      	ldr	r3, [pc, #136]	; (8001188 <HAL_DMA_Init+0xa8>)
 80010fe:	4413      	add	r3, r2
 8001100:	4a22      	ldr	r2, [pc, #136]	; (800118c <HAL_DMA_Init+0xac>)
 8001102:	fba2 2303 	umull	r2, r3, r2, r3
 8001106:	091b      	lsrs	r3, r3, #4
 8001108:	009a      	lsls	r2, r3, #2
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a1f      	ldr	r2, [pc, #124]	; (8001190 <HAL_DMA_Init+0xb0>)
 8001112:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2202      	movs	r2, #2
 8001118:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800112a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800112e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001138:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001144:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001150:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001158:	68fa      	ldr	r2, [r7, #12]
 800115a:	4313      	orrs	r3, r2
 800115c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2201      	movs	r2, #1
 8001170:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3714      	adds	r7, #20
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr
 8001188:	bffdfff8 	.word	0xbffdfff8
 800118c:	cccccccd 	.word	0xcccccccd
 8001190:	40020000 	.word	0x40020000

08001194 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
 80011a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d101      	bne.n	80011b4 <HAL_DMA_Start_IT+0x20>
 80011b0:	2302      	movs	r3, #2
 80011b2:	e04a      	b.n	800124a <HAL_DMA_Start_IT+0xb6>
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2201      	movs	r2, #1
 80011b8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d13a      	bne.n	800123c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2202      	movs	r2, #2
 80011ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2200      	movs	r2, #0
 80011d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f022 0201 	bic.w	r2, r2, #1
 80011e2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	68b9      	ldr	r1, [r7, #8]
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	f000 f938 	bl	8001460 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d008      	beq.n	800120a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f042 020e 	orr.w	r2, r2, #14
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	e00f      	b.n	800122a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0204 	bic.w	r2, r2, #4
 8001218:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f042 020a 	orr.w	r2, r2, #10
 8001228:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f042 0201 	orr.w	r2, r2, #1
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	e005      	b.n	8001248 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001244:	2302      	movs	r3, #2
 8001246:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001248:	7dfb      	ldrb	r3, [r7, #23]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	2204      	movs	r2, #4
 8001272:	409a      	lsls	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4013      	ands	r3, r2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d04f      	beq.n	800131c <HAL_DMA_IRQHandler+0xc8>
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	f003 0304 	and.w	r3, r3, #4
 8001282:	2b00      	cmp	r3, #0
 8001284:	d04a      	beq.n	800131c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0320 	and.w	r3, r3, #32
 8001290:	2b00      	cmp	r3, #0
 8001292:	d107      	bne.n	80012a4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f022 0204 	bic.w	r2, r2, #4
 80012a2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a66      	ldr	r2, [pc, #408]	; (8001444 <HAL_DMA_IRQHandler+0x1f0>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d029      	beq.n	8001302 <HAL_DMA_IRQHandler+0xae>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a65      	ldr	r2, [pc, #404]	; (8001448 <HAL_DMA_IRQHandler+0x1f4>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d022      	beq.n	80012fe <HAL_DMA_IRQHandler+0xaa>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a63      	ldr	r2, [pc, #396]	; (800144c <HAL_DMA_IRQHandler+0x1f8>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d01a      	beq.n	80012f8 <HAL_DMA_IRQHandler+0xa4>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a62      	ldr	r2, [pc, #392]	; (8001450 <HAL_DMA_IRQHandler+0x1fc>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d012      	beq.n	80012f2 <HAL_DMA_IRQHandler+0x9e>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a60      	ldr	r2, [pc, #384]	; (8001454 <HAL_DMA_IRQHandler+0x200>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d00a      	beq.n	80012ec <HAL_DMA_IRQHandler+0x98>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a5f      	ldr	r2, [pc, #380]	; (8001458 <HAL_DMA_IRQHandler+0x204>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d102      	bne.n	80012e6 <HAL_DMA_IRQHandler+0x92>
 80012e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012e4:	e00e      	b.n	8001304 <HAL_DMA_IRQHandler+0xb0>
 80012e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80012ea:	e00b      	b.n	8001304 <HAL_DMA_IRQHandler+0xb0>
 80012ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80012f0:	e008      	b.n	8001304 <HAL_DMA_IRQHandler+0xb0>
 80012f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012f6:	e005      	b.n	8001304 <HAL_DMA_IRQHandler+0xb0>
 80012f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012fc:	e002      	b.n	8001304 <HAL_DMA_IRQHandler+0xb0>
 80012fe:	2340      	movs	r3, #64	; 0x40
 8001300:	e000      	b.n	8001304 <HAL_DMA_IRQHandler+0xb0>
 8001302:	2304      	movs	r3, #4
 8001304:	4a55      	ldr	r2, [pc, #340]	; (800145c <HAL_DMA_IRQHandler+0x208>)
 8001306:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 8094 	beq.w	800143a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800131a:	e08e      	b.n	800143a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	2202      	movs	r2, #2
 8001322:	409a      	lsls	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4013      	ands	r3, r2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d056      	beq.n	80013da <HAL_DMA_IRQHandler+0x186>
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d051      	beq.n	80013da <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0320 	and.w	r3, r3, #32
 8001340:	2b00      	cmp	r3, #0
 8001342:	d10b      	bne.n	800135c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 020a 	bic.w	r2, r2, #10
 8001352:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2201      	movs	r2, #1
 8001358:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a38      	ldr	r2, [pc, #224]	; (8001444 <HAL_DMA_IRQHandler+0x1f0>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d029      	beq.n	80013ba <HAL_DMA_IRQHandler+0x166>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a37      	ldr	r2, [pc, #220]	; (8001448 <HAL_DMA_IRQHandler+0x1f4>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d022      	beq.n	80013b6 <HAL_DMA_IRQHandler+0x162>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a35      	ldr	r2, [pc, #212]	; (800144c <HAL_DMA_IRQHandler+0x1f8>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d01a      	beq.n	80013b0 <HAL_DMA_IRQHandler+0x15c>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a34      	ldr	r2, [pc, #208]	; (8001450 <HAL_DMA_IRQHandler+0x1fc>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d012      	beq.n	80013aa <HAL_DMA_IRQHandler+0x156>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a32      	ldr	r2, [pc, #200]	; (8001454 <HAL_DMA_IRQHandler+0x200>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d00a      	beq.n	80013a4 <HAL_DMA_IRQHandler+0x150>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a31      	ldr	r2, [pc, #196]	; (8001458 <HAL_DMA_IRQHandler+0x204>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d102      	bne.n	800139e <HAL_DMA_IRQHandler+0x14a>
 8001398:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800139c:	e00e      	b.n	80013bc <HAL_DMA_IRQHandler+0x168>
 800139e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013a2:	e00b      	b.n	80013bc <HAL_DMA_IRQHandler+0x168>
 80013a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013a8:	e008      	b.n	80013bc <HAL_DMA_IRQHandler+0x168>
 80013aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ae:	e005      	b.n	80013bc <HAL_DMA_IRQHandler+0x168>
 80013b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013b4:	e002      	b.n	80013bc <HAL_DMA_IRQHandler+0x168>
 80013b6:	2320      	movs	r3, #32
 80013b8:	e000      	b.n	80013bc <HAL_DMA_IRQHandler+0x168>
 80013ba:	2302      	movs	r3, #2
 80013bc:	4a27      	ldr	r2, [pc, #156]	; (800145c <HAL_DMA_IRQHandler+0x208>)
 80013be:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d034      	beq.n	800143a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80013d8:	e02f      	b.n	800143a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	2208      	movs	r2, #8
 80013e0:	409a      	lsls	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4013      	ands	r3, r2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d028      	beq.n	800143c <HAL_DMA_IRQHandler+0x1e8>
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	f003 0308 	and.w	r3, r3, #8
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d023      	beq.n	800143c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 020e 	bic.w	r2, r2, #14
 8001402:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800140c:	2101      	movs	r1, #1
 800140e:	fa01 f202 	lsl.w	r2, r1, r2
 8001412:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2201      	movs	r2, #1
 800141e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	2b00      	cmp	r3, #0
 8001430:	d004      	beq.n	800143c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	4798      	blx	r3
    }
  }
  return;
 800143a:	bf00      	nop
 800143c:	bf00      	nop
}
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40020008 	.word	0x40020008
 8001448:	4002001c 	.word	0x4002001c
 800144c:	40020030 	.word	0x40020030
 8001450:	40020044 	.word	0x40020044
 8001454:	40020058 	.word	0x40020058
 8001458:	4002006c 	.word	0x4002006c
 800145c:	40020000 	.word	0x40020000

08001460 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
 800146c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001476:	2101      	movs	r1, #1
 8001478:	fa01 f202 	lsl.w	r2, r1, r2
 800147c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b10      	cmp	r3, #16
 800148c:	d108      	bne.n	80014a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800149e:	e007      	b.n	80014b0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68ba      	ldr	r2, [r7, #8]
 80014a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	60da      	str	r2, [r3, #12]
}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
	...

080014bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014bc:	b480      	push	{r7}
 80014be:	b08b      	sub	sp, #44	; 0x2c
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014ca:	2300      	movs	r3, #0
 80014cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ce:	e169      	b.n	80017a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014d0:	2201      	movs	r2, #1
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	69fa      	ldr	r2, [r7, #28]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	f040 8158 	bne.w	800179e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	4a9a      	ldr	r2, [pc, #616]	; (800175c <HAL_GPIO_Init+0x2a0>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d05e      	beq.n	80015b6 <HAL_GPIO_Init+0xfa>
 80014f8:	4a98      	ldr	r2, [pc, #608]	; (800175c <HAL_GPIO_Init+0x2a0>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d875      	bhi.n	80015ea <HAL_GPIO_Init+0x12e>
 80014fe:	4a98      	ldr	r2, [pc, #608]	; (8001760 <HAL_GPIO_Init+0x2a4>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d058      	beq.n	80015b6 <HAL_GPIO_Init+0xfa>
 8001504:	4a96      	ldr	r2, [pc, #600]	; (8001760 <HAL_GPIO_Init+0x2a4>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d86f      	bhi.n	80015ea <HAL_GPIO_Init+0x12e>
 800150a:	4a96      	ldr	r2, [pc, #600]	; (8001764 <HAL_GPIO_Init+0x2a8>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d052      	beq.n	80015b6 <HAL_GPIO_Init+0xfa>
 8001510:	4a94      	ldr	r2, [pc, #592]	; (8001764 <HAL_GPIO_Init+0x2a8>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d869      	bhi.n	80015ea <HAL_GPIO_Init+0x12e>
 8001516:	4a94      	ldr	r2, [pc, #592]	; (8001768 <HAL_GPIO_Init+0x2ac>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d04c      	beq.n	80015b6 <HAL_GPIO_Init+0xfa>
 800151c:	4a92      	ldr	r2, [pc, #584]	; (8001768 <HAL_GPIO_Init+0x2ac>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d863      	bhi.n	80015ea <HAL_GPIO_Init+0x12e>
 8001522:	4a92      	ldr	r2, [pc, #584]	; (800176c <HAL_GPIO_Init+0x2b0>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d046      	beq.n	80015b6 <HAL_GPIO_Init+0xfa>
 8001528:	4a90      	ldr	r2, [pc, #576]	; (800176c <HAL_GPIO_Init+0x2b0>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d85d      	bhi.n	80015ea <HAL_GPIO_Init+0x12e>
 800152e:	2b12      	cmp	r3, #18
 8001530:	d82a      	bhi.n	8001588 <HAL_GPIO_Init+0xcc>
 8001532:	2b12      	cmp	r3, #18
 8001534:	d859      	bhi.n	80015ea <HAL_GPIO_Init+0x12e>
 8001536:	a201      	add	r2, pc, #4	; (adr r2, 800153c <HAL_GPIO_Init+0x80>)
 8001538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800153c:	080015b7 	.word	0x080015b7
 8001540:	08001591 	.word	0x08001591
 8001544:	080015a3 	.word	0x080015a3
 8001548:	080015e5 	.word	0x080015e5
 800154c:	080015eb 	.word	0x080015eb
 8001550:	080015eb 	.word	0x080015eb
 8001554:	080015eb 	.word	0x080015eb
 8001558:	080015eb 	.word	0x080015eb
 800155c:	080015eb 	.word	0x080015eb
 8001560:	080015eb 	.word	0x080015eb
 8001564:	080015eb 	.word	0x080015eb
 8001568:	080015eb 	.word	0x080015eb
 800156c:	080015eb 	.word	0x080015eb
 8001570:	080015eb 	.word	0x080015eb
 8001574:	080015eb 	.word	0x080015eb
 8001578:	080015eb 	.word	0x080015eb
 800157c:	080015eb 	.word	0x080015eb
 8001580:	08001599 	.word	0x08001599
 8001584:	080015ad 	.word	0x080015ad
 8001588:	4a79      	ldr	r2, [pc, #484]	; (8001770 <HAL_GPIO_Init+0x2b4>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d013      	beq.n	80015b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800158e:	e02c      	b.n	80015ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	623b      	str	r3, [r7, #32]
          break;
 8001596:	e029      	b.n	80015ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	3304      	adds	r3, #4
 800159e:	623b      	str	r3, [r7, #32]
          break;
 80015a0:	e024      	b.n	80015ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	3308      	adds	r3, #8
 80015a8:	623b      	str	r3, [r7, #32]
          break;
 80015aa:	e01f      	b.n	80015ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	330c      	adds	r3, #12
 80015b2:	623b      	str	r3, [r7, #32]
          break;
 80015b4:	e01a      	b.n	80015ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d102      	bne.n	80015c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015be:	2304      	movs	r3, #4
 80015c0:	623b      	str	r3, [r7, #32]
          break;
 80015c2:	e013      	b.n	80015ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d105      	bne.n	80015d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015cc:	2308      	movs	r3, #8
 80015ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69fa      	ldr	r2, [r7, #28]
 80015d4:	611a      	str	r2, [r3, #16]
          break;
 80015d6:	e009      	b.n	80015ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015d8:	2308      	movs	r3, #8
 80015da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69fa      	ldr	r2, [r7, #28]
 80015e0:	615a      	str	r2, [r3, #20]
          break;
 80015e2:	e003      	b.n	80015ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015e4:	2300      	movs	r3, #0
 80015e6:	623b      	str	r3, [r7, #32]
          break;
 80015e8:	e000      	b.n	80015ec <HAL_GPIO_Init+0x130>
          break;
 80015ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	2bff      	cmp	r3, #255	; 0xff
 80015f0:	d801      	bhi.n	80015f6 <HAL_GPIO_Init+0x13a>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	e001      	b.n	80015fa <HAL_GPIO_Init+0x13e>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3304      	adds	r3, #4
 80015fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	2bff      	cmp	r3, #255	; 0xff
 8001600:	d802      	bhi.n	8001608 <HAL_GPIO_Init+0x14c>
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	e002      	b.n	800160e <HAL_GPIO_Init+0x152>
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	3b08      	subs	r3, #8
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	210f      	movs	r1, #15
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	fa01 f303 	lsl.w	r3, r1, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	401a      	ands	r2, r3
 8001620:	6a39      	ldr	r1, [r7, #32]
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	fa01 f303 	lsl.w	r3, r1, r3
 8001628:	431a      	orrs	r2, r3
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	f000 80b1 	beq.w	800179e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800163c:	4b4d      	ldr	r3, [pc, #308]	; (8001774 <HAL_GPIO_Init+0x2b8>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	4a4c      	ldr	r2, [pc, #304]	; (8001774 <HAL_GPIO_Init+0x2b8>)
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	6193      	str	r3, [r2, #24]
 8001648:	4b4a      	ldr	r3, [pc, #296]	; (8001774 <HAL_GPIO_Init+0x2b8>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001654:	4a48      	ldr	r2, [pc, #288]	; (8001778 <HAL_GPIO_Init+0x2bc>)
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	089b      	lsrs	r3, r3, #2
 800165a:	3302      	adds	r3, #2
 800165c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001660:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	220f      	movs	r2, #15
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	4013      	ands	r3, r2
 8001676:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a40      	ldr	r2, [pc, #256]	; (800177c <HAL_GPIO_Init+0x2c0>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d013      	beq.n	80016a8 <HAL_GPIO_Init+0x1ec>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a3f      	ldr	r2, [pc, #252]	; (8001780 <HAL_GPIO_Init+0x2c4>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d00d      	beq.n	80016a4 <HAL_GPIO_Init+0x1e8>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a3e      	ldr	r2, [pc, #248]	; (8001784 <HAL_GPIO_Init+0x2c8>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d007      	beq.n	80016a0 <HAL_GPIO_Init+0x1e4>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a3d      	ldr	r2, [pc, #244]	; (8001788 <HAL_GPIO_Init+0x2cc>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d101      	bne.n	800169c <HAL_GPIO_Init+0x1e0>
 8001698:	2303      	movs	r3, #3
 800169a:	e006      	b.n	80016aa <HAL_GPIO_Init+0x1ee>
 800169c:	2304      	movs	r3, #4
 800169e:	e004      	b.n	80016aa <HAL_GPIO_Init+0x1ee>
 80016a0:	2302      	movs	r3, #2
 80016a2:	e002      	b.n	80016aa <HAL_GPIO_Init+0x1ee>
 80016a4:	2301      	movs	r3, #1
 80016a6:	e000      	b.n	80016aa <HAL_GPIO_Init+0x1ee>
 80016a8:	2300      	movs	r3, #0
 80016aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ac:	f002 0203 	and.w	r2, r2, #3
 80016b0:	0092      	lsls	r2, r2, #2
 80016b2:	4093      	lsls	r3, r2
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016ba:	492f      	ldr	r1, [pc, #188]	; (8001778 <HAL_GPIO_Init+0x2bc>)
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	089b      	lsrs	r3, r3, #2
 80016c0:	3302      	adds	r3, #2
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d006      	beq.n	80016e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016d4:	4b2d      	ldr	r3, [pc, #180]	; (800178c <HAL_GPIO_Init+0x2d0>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	492c      	ldr	r1, [pc, #176]	; (800178c <HAL_GPIO_Init+0x2d0>)
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	4313      	orrs	r3, r2
 80016de:	600b      	str	r3, [r1, #0]
 80016e0:	e006      	b.n	80016f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016e2:	4b2a      	ldr	r3, [pc, #168]	; (800178c <HAL_GPIO_Init+0x2d0>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	43db      	mvns	r3, r3
 80016ea:	4928      	ldr	r1, [pc, #160]	; (800178c <HAL_GPIO_Init+0x2d0>)
 80016ec:	4013      	ands	r3, r2
 80016ee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d006      	beq.n	800170a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016fc:	4b23      	ldr	r3, [pc, #140]	; (800178c <HAL_GPIO_Init+0x2d0>)
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	4922      	ldr	r1, [pc, #136]	; (800178c <HAL_GPIO_Init+0x2d0>)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	4313      	orrs	r3, r2
 8001706:	604b      	str	r3, [r1, #4]
 8001708:	e006      	b.n	8001718 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800170a:	4b20      	ldr	r3, [pc, #128]	; (800178c <HAL_GPIO_Init+0x2d0>)
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	43db      	mvns	r3, r3
 8001712:	491e      	ldr	r1, [pc, #120]	; (800178c <HAL_GPIO_Init+0x2d0>)
 8001714:	4013      	ands	r3, r2
 8001716:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d006      	beq.n	8001732 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001724:	4b19      	ldr	r3, [pc, #100]	; (800178c <HAL_GPIO_Init+0x2d0>)
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	4918      	ldr	r1, [pc, #96]	; (800178c <HAL_GPIO_Init+0x2d0>)
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	4313      	orrs	r3, r2
 800172e:	608b      	str	r3, [r1, #8]
 8001730:	e006      	b.n	8001740 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001732:	4b16      	ldr	r3, [pc, #88]	; (800178c <HAL_GPIO_Init+0x2d0>)
 8001734:	689a      	ldr	r2, [r3, #8]
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	43db      	mvns	r3, r3
 800173a:	4914      	ldr	r1, [pc, #80]	; (800178c <HAL_GPIO_Init+0x2d0>)
 800173c:	4013      	ands	r3, r2
 800173e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d021      	beq.n	8001790 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800174c:	4b0f      	ldr	r3, [pc, #60]	; (800178c <HAL_GPIO_Init+0x2d0>)
 800174e:	68da      	ldr	r2, [r3, #12]
 8001750:	490e      	ldr	r1, [pc, #56]	; (800178c <HAL_GPIO_Init+0x2d0>)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	4313      	orrs	r3, r2
 8001756:	60cb      	str	r3, [r1, #12]
 8001758:	e021      	b.n	800179e <HAL_GPIO_Init+0x2e2>
 800175a:	bf00      	nop
 800175c:	10320000 	.word	0x10320000
 8001760:	10310000 	.word	0x10310000
 8001764:	10220000 	.word	0x10220000
 8001768:	10210000 	.word	0x10210000
 800176c:	10120000 	.word	0x10120000
 8001770:	10110000 	.word	0x10110000
 8001774:	40021000 	.word	0x40021000
 8001778:	40010000 	.word	0x40010000
 800177c:	40010800 	.word	0x40010800
 8001780:	40010c00 	.word	0x40010c00
 8001784:	40011000 	.word	0x40011000
 8001788:	40011400 	.word	0x40011400
 800178c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001790:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <HAL_GPIO_Init+0x304>)
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	43db      	mvns	r3, r3
 8001798:	4909      	ldr	r1, [pc, #36]	; (80017c0 <HAL_GPIO_Init+0x304>)
 800179a:	4013      	ands	r3, r2
 800179c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	3301      	adds	r3, #1
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	fa22 f303 	lsr.w	r3, r2, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f47f ae8e 	bne.w	80014d0 <HAL_GPIO_Init+0x14>
  }
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	372c      	adds	r7, #44	; 0x2c
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr
 80017c0:	40010400 	.word	0x40010400

080017c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017c6:	b08b      	sub	sp, #44	; 0x2c
 80017c8:	af06      	add	r7, sp, #24
 80017ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e0fd      	b.n	80019d2 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d106      	bne.n	80017f0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f005 fe30 	bl	8007450 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2203      	movs	r2, #3
 80017f4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f002 f837 	bl	8003870 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	603b      	str	r3, [r7, #0]
 8001808:	687e      	ldr	r6, [r7, #4]
 800180a:	466d      	mov	r5, sp
 800180c:	f106 0410 	add.w	r4, r6, #16
 8001810:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001812:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001814:	6823      	ldr	r3, [r4, #0]
 8001816:	602b      	str	r3, [r5, #0]
 8001818:	1d33      	adds	r3, r6, #4
 800181a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800181c:	6838      	ldr	r0, [r7, #0]
 800181e:	f002 f801 	bl	8003824 <USB_CoreInit>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d005      	beq.n	8001834 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2202      	movs	r2, #2
 800182c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e0ce      	b.n	80019d2 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f002 f832 	bl	80038a4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001840:	2300      	movs	r3, #0
 8001842:	73fb      	strb	r3, [r7, #15]
 8001844:	e04c      	b.n	80018e0 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	4613      	mov	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	440b      	add	r3, r1
 8001856:	3301      	adds	r3, #1
 8001858:	2201      	movs	r2, #1
 800185a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	1c5a      	adds	r2, r3, #1
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	440b      	add	r3, r1
 800186c:	7bfa      	ldrb	r2, [r7, #15]
 800186e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001870:	7bfa      	ldrb	r2, [r7, #15]
 8001872:	7bfb      	ldrb	r3, [r7, #15]
 8001874:	b298      	uxth	r0, r3
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	440b      	add	r3, r1
 8001882:	3336      	adds	r3, #54	; 0x36
 8001884:	4602      	mov	r2, r0
 8001886:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001888:	7bfb      	ldrb	r3, [r7, #15]
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	1c5a      	adds	r2, r3, #1
 800188e:	4613      	mov	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	440b      	add	r3, r1
 8001898:	3303      	adds	r3, #3
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800189e:	7bfa      	ldrb	r2, [r7, #15]
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	440b      	add	r3, r1
 80018ac:	3338      	adds	r3, #56	; 0x38
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018b2:	7bfa      	ldrb	r2, [r7, #15]
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	440b      	add	r3, r1
 80018c0:	333c      	adds	r3, #60	; 0x3c
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018c6:	7bfa      	ldrb	r2, [r7, #15]
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	440b      	add	r3, r1
 80018d4:	3340      	adds	r3, #64	; 0x40
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	3301      	adds	r3, #1
 80018de:	73fb      	strb	r3, [r7, #15]
 80018e0:	7bfa      	ldrb	r2, [r7, #15]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d3ad      	bcc.n	8001846 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018ea:	2300      	movs	r3, #0
 80018ec:	73fb      	strb	r3, [r7, #15]
 80018ee:	e044      	b.n	800197a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018f0:	7bfa      	ldrb	r2, [r7, #15]
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	4613      	mov	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	440b      	add	r3, r1
 80018fe:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001902:	2200      	movs	r2, #0
 8001904:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001906:	7bfa      	ldrb	r2, [r7, #15]
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	4613      	mov	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4413      	add	r3, r2
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	440b      	add	r3, r1
 8001914:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001918:	7bfa      	ldrb	r2, [r7, #15]
 800191a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800191c:	7bfa      	ldrb	r2, [r7, #15]
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	440b      	add	r3, r1
 800192a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001932:	7bfa      	ldrb	r2, [r7, #15]
 8001934:	6879      	ldr	r1, [r7, #4]
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	440b      	add	r3, r1
 8001940:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001948:	7bfa      	ldrb	r2, [r7, #15]
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	440b      	add	r3, r1
 8001956:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800195e:	7bfa      	ldrb	r2, [r7, #15]
 8001960:	6879      	ldr	r1, [r7, #4]
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	440b      	add	r3, r1
 800196c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001974:	7bfb      	ldrb	r3, [r7, #15]
 8001976:	3301      	adds	r3, #1
 8001978:	73fb      	strb	r3, [r7, #15]
 800197a:	7bfa      	ldrb	r2, [r7, #15]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	429a      	cmp	r2, r3
 8001982:	d3b5      	bcc.n	80018f0 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	603b      	str	r3, [r7, #0]
 800198a:	687e      	ldr	r6, [r7, #4]
 800198c:	466d      	mov	r5, sp
 800198e:	f106 0410 	add.w	r4, r6, #16
 8001992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001996:	6823      	ldr	r3, [r4, #0]
 8001998:	602b      	str	r3, [r5, #0]
 800199a:	1d33      	adds	r3, r6, #4
 800199c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800199e:	6838      	ldr	r0, [r7, #0]
 80019a0:	f001 ff8c 	bl	80038bc <USB_DevInit>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d005      	beq.n	80019b6 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2202      	movs	r2, #2
 80019ae:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e00d      	b.n	80019d2 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f003 ff26 	bl	800581c <USB_DevDisconnect>

  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019da <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d101      	bne.n	80019f0 <HAL_PCD_Start+0x16>
 80019ec:	2302      	movs	r3, #2
 80019ee:	e016      	b.n	8001a1e <HAL_PCD_Start+0x44>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f001 ff21 	bl	8003844 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001a02:	2101      	movs	r1, #1
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f005 ff96 	bl	8007936 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f003 fefa 	bl	8005808 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b088      	sub	sp, #32
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f003 fefc 	bl	8005830 <USB_ReadInterrupts>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a42:	d102      	bne.n	8001a4a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 fb61 	bl	800210c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f003 feee 	bl	8005830 <USB_ReadInterrupts>
 8001a54:	4603      	mov	r3, r0
 8001a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a5e:	d112      	bne.n	8001a86 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a72:	b292      	uxth	r2, r2
 8001a74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f005 fd64 	bl	8007546 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001a7e:	2100      	movs	r1, #0
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 f925 	bl	8001cd0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f003 fed0 	bl	8005830 <USB_ReadInterrupts>
 8001a90:	4603      	mov	r3, r0
 8001a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a9a:	d10b      	bne.n	8001ab4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001aae:	b292      	uxth	r2, r2
 8001ab0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f003 feb9 	bl	8005830 <USB_ReadInterrupts>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ac8:	d10b      	bne.n	8001ae2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001adc:	b292      	uxth	r2, r2
 8001ade:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f003 fea2 	bl	8005830 <USB_ReadInterrupts>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001af6:	d126      	bne.n	8001b46 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 0204 	bic.w	r2, r2, #4
 8001b0a:	b292      	uxth	r2, r2
 8001b0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 0208 	bic.w	r2, r2, #8
 8001b22:	b292      	uxth	r2, r2
 8001b24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f005 fd45 	bl	80075b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b40:	b292      	uxth	r2, r2
 8001b42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f003 fe70 	bl	8005830 <USB_ReadInterrupts>
 8001b50:	4603      	mov	r3, r0
 8001b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b5a:	f040 8084 	bne.w	8001c66 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001b5e:	2300      	movs	r3, #0
 8001b60:	77fb      	strb	r3, [r7, #31]
 8001b62:	e011      	b.n	8001b88 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	7ffb      	ldrb	r3, [r7, #31]
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	441a      	add	r2, r3
 8001b70:	7ffb      	ldrb	r3, [r7, #31]
 8001b72:	8812      	ldrh	r2, [r2, #0]
 8001b74:	b292      	uxth	r2, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	f107 0120 	add.w	r1, r7, #32
 8001b7c:	440b      	add	r3, r1
 8001b7e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001b82:	7ffb      	ldrb	r3, [r7, #31]
 8001b84:	3301      	adds	r3, #1
 8001b86:	77fb      	strb	r3, [r7, #31]
 8001b88:	7ffb      	ldrb	r3, [r7, #31]
 8001b8a:	2b07      	cmp	r3, #7
 8001b8c:	d9ea      	bls.n	8001b64 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f042 0201 	orr.w	r2, r2, #1
 8001ba0:	b292      	uxth	r2, r2
 8001ba2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0201 	bic.w	r2, r2, #1
 8001bb8:	b292      	uxth	r2, r2
 8001bba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001bbe:	bf00      	nop
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0f6      	beq.n	8001bc0 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001be4:	b292      	uxth	r2, r2
 8001be6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001bea:	2300      	movs	r3, #0
 8001bec:	77fb      	strb	r3, [r7, #31]
 8001bee:	e010      	b.n	8001c12 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001bf0:	7ffb      	ldrb	r3, [r7, #31]
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6812      	ldr	r2, [r2, #0]
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	7ffa      	ldrb	r2, [r7, #31]
 8001bfa:	0092      	lsls	r2, r2, #2
 8001bfc:	440a      	add	r2, r1
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	f107 0120 	add.w	r1, r7, #32
 8001c04:	440b      	add	r3, r1
 8001c06:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001c0a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001c0c:	7ffb      	ldrb	r3, [r7, #31]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	77fb      	strb	r3, [r7, #31]
 8001c12:	7ffb      	ldrb	r3, [r7, #31]
 8001c14:	2b07      	cmp	r3, #7
 8001c16:	d9eb      	bls.n	8001bf0 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0208 	orr.w	r2, r2, #8
 8001c2a:	b292      	uxth	r2, r2
 8001c2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c42:	b292      	uxth	r2, r2
 8001c44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 0204 	orr.w	r2, r2, #4
 8001c5a:	b292      	uxth	r2, r2
 8001c5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f005 fc8f 	bl	8007584 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f003 fde0 	bl	8005830 <USB_ReadInterrupts>
 8001c70:	4603      	mov	r3, r0
 8001c72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c7a:	d10e      	bne.n	8001c9a <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c8e:	b292      	uxth	r2, r2
 8001c90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f005 fc48 	bl	800752a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f003 fdc6 	bl	8005830 <USB_ReadInterrupts>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cae:	d10b      	bne.n	8001cc8 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cc2:	b292      	uxth	r2, r2
 8001cc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001cc8:	bf00      	nop
 8001cca:	3720      	adds	r7, #32
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d101      	bne.n	8001cea <HAL_PCD_SetAddress+0x1a>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e013      	b.n	8001d12 <HAL_PCD_SetAddress+0x42>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	78fa      	ldrb	r2, [r7, #3]
 8001cf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	78fa      	ldrb	r2, [r7, #3]
 8001d00:	4611      	mov	r1, r2
 8001d02:	4618      	mov	r0, r3
 8001d04:	f003 fd6d 	bl	80057e2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b084      	sub	sp, #16
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	4608      	mov	r0, r1
 8001d24:	4611      	mov	r1, r2
 8001d26:	461a      	mov	r2, r3
 8001d28:	4603      	mov	r3, r0
 8001d2a:	70fb      	strb	r3, [r7, #3]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	803b      	strh	r3, [r7, #0]
 8001d30:	4613      	mov	r3, r2
 8001d32:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	da0e      	bge.n	8001d5e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d40:	78fb      	ldrb	r3, [r7, #3]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	1c5a      	adds	r2, r3, #1
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	4413      	add	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	705a      	strb	r2, [r3, #1]
 8001d5c:	e00e      	b.n	8001d7c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d5e:	78fb      	ldrb	r3, [r7, #3]
 8001d60:	f003 0207 	and.w	r2, r3, #7
 8001d64:	4613      	mov	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	4413      	add	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d7c:	78fb      	ldrb	r3, [r7, #3]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d88:	883a      	ldrh	r2, [r7, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	78ba      	ldrb	r2, [r7, #2]
 8001d92:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	785b      	ldrb	r3, [r3, #1]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d004      	beq.n	8001da6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001da6:	78bb      	ldrb	r3, [r7, #2]
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d102      	bne.n	8001db2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d101      	bne.n	8001dc0 <HAL_PCD_EP_Open+0xa6>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e00e      	b.n	8001dde <HAL_PCD_EP_Open+0xc4>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68f9      	ldr	r1, [r7, #12]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f001 fd94 	bl	80038fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001ddc:	7afb      	ldrb	r3, [r7, #11]
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b084      	sub	sp, #16
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
 8001dee:	460b      	mov	r3, r1
 8001df0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001df2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	da0e      	bge.n	8001e18 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dfa:	78fb      	ldrb	r3, [r7, #3]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	1c5a      	adds	r2, r3, #1
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2201      	movs	r2, #1
 8001e14:	705a      	strb	r2, [r3, #1]
 8001e16:	e00e      	b.n	8001e36 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e18:	78fb      	ldrb	r3, [r7, #3]
 8001e1a:	f003 0207 	and.w	r2, r3, #7
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e36:	78fb      	ldrb	r3, [r7, #3]
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d101      	bne.n	8001e50 <HAL_PCD_EP_Close+0x6a>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e00e      	b.n	8001e6e <HAL_PCD_EP_Close+0x88>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68f9      	ldr	r1, [r7, #12]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f002 f8b6 	bl	8003fd0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b086      	sub	sp, #24
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	60f8      	str	r0, [r7, #12]
 8001e7e:	607a      	str	r2, [r7, #4]
 8001e80:	603b      	str	r3, [r7, #0]
 8001e82:	460b      	mov	r3, r1
 8001e84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e86:	7afb      	ldrb	r3, [r7, #11]
 8001e88:	f003 0207 	and.w	r2, r3, #7
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	2200      	movs	r2, #0
 8001eae:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eb6:	7afb      	ldrb	r3, [r7, #11]
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ec2:	7afb      	ldrb	r3, [r7, #11]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d106      	bne.n	8001eda <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6979      	ldr	r1, [r7, #20]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f002 fa68 	bl	80043a8 <USB_EPStartXfer>
 8001ed8:	e005      	b.n	8001ee6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6979      	ldr	r1, [r7, #20]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f002 fa61 	bl	80043a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001efc:	78fb      	ldrb	r3, [r7, #3]
 8001efe:	f003 0207 	and.w	r2, r3, #7
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	440b      	add	r3, r1
 8001f0e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001f12:	681b      	ldr	r3, [r3, #0]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr

08001f1e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b086      	sub	sp, #24
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	607a      	str	r2, [r7, #4]
 8001f28:	603b      	str	r3, [r7, #0]
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f2e:	7afb      	ldrb	r3, [r7, #11]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	1c5a      	adds	r2, r3, #1
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	4413      	add	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	2200      	movs	r2, #0
 8001f62:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	2201      	movs	r2, #1
 8001f68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f6a:	7afb      	ldrb	r3, [r7, #11]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f76:	7afb      	ldrb	r3, [r7, #11]
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d106      	bne.n	8001f8e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6979      	ldr	r1, [r7, #20]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f002 fa0e 	bl	80043a8 <USB_EPStartXfer>
 8001f8c:	e005      	b.n	8001f9a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6979      	ldr	r1, [r7, #20]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f002 fa07 	bl	80043a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001fb0:	78fb      	ldrb	r3, [r7, #3]
 8001fb2:	f003 0207 	and.w	r2, r3, #7
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d901      	bls.n	8001fc2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e04c      	b.n	800205c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	da0e      	bge.n	8001fe8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fca:	78fb      	ldrb	r3, [r7, #3]
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	1c5a      	adds	r2, r3, #1
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	4413      	add	r3, r2
 8001fde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	705a      	strb	r2, [r3, #1]
 8001fe6:	e00c      	b.n	8002002 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001fe8:	78fa      	ldrb	r2, [r7, #3]
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2201      	movs	r2, #1
 8002006:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002008:	78fb      	ldrb	r3, [r7, #3]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	b2da      	uxtb	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800201a:	2b01      	cmp	r3, #1
 800201c:	d101      	bne.n	8002022 <HAL_PCD_EP_SetStall+0x7e>
 800201e:	2302      	movs	r3, #2
 8002020:	e01c      	b.n	800205c <HAL_PCD_EP_SetStall+0xb8>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68f9      	ldr	r1, [r7, #12]
 8002030:	4618      	mov	r0, r3
 8002032:	f003 fad9 	bl	80055e8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002036:	78fb      	ldrb	r3, [r7, #3]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	2b00      	cmp	r3, #0
 800203e:	d108      	bne.n	8002052 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800204a:	4619      	mov	r1, r3
 800204c:	4610      	mov	r0, r2
 800204e:	f003 fbfe 	bl	800584e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002070:	78fb      	ldrb	r3, [r7, #3]
 8002072:	f003 020f 	and.w	r2, r3, #15
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	429a      	cmp	r2, r3
 800207c:	d901      	bls.n	8002082 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e040      	b.n	8002104 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002082:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002086:	2b00      	cmp	r3, #0
 8002088:	da0e      	bge.n	80020a8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800208a:	78fb      	ldrb	r3, [r7, #3]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2201      	movs	r2, #1
 80020a4:	705a      	strb	r2, [r3, #1]
 80020a6:	e00e      	b.n	80020c6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020a8:	78fb      	ldrb	r3, [r7, #3]
 80020aa:	f003 0207 	and.w	r2, r3, #7
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	4413      	add	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020cc:	78fb      	ldrb	r3, [r7, #3]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d101      	bne.n	80020e6 <HAL_PCD_EP_ClrStall+0x82>
 80020e2:	2302      	movs	r3, #2
 80020e4:	e00e      	b.n	8002104 <HAL_PCD_EP_ClrStall+0xa0>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68f9      	ldr	r1, [r7, #12]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f003 fac7 	bl	8005688 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08e      	sub	sp, #56	; 0x38
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002114:	e2df      	b.n	80026d6 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800211e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002120:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002122:	b2db      	uxtb	r3, r3
 8002124:	f003 030f 	and.w	r3, r3, #15
 8002128:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800212c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002130:	2b00      	cmp	r3, #0
 8002132:	f040 8158 	bne.w	80023e6 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002136:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002138:	f003 0310 	and.w	r3, r3, #16
 800213c:	2b00      	cmp	r3, #0
 800213e:	d152      	bne.n	80021e6 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	b29b      	uxth	r3, r3
 8002148:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800214c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002150:	81fb      	strh	r3, [r7, #14]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	89fb      	ldrh	r3, [r7, #14]
 8002158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800215c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002160:	b29b      	uxth	r3, r3
 8002162:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3328      	adds	r3, #40	; 0x28
 8002168:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002172:	b29b      	uxth	r3, r3
 8002174:	461a      	mov	r2, r3
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	4413      	add	r3, r2
 800217e:	3302      	adds	r3, #2
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6812      	ldr	r2, [r2, #0]
 8002186:	4413      	add	r3, r2
 8002188:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800218c:	881b      	ldrh	r3, [r3, #0]
 800218e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	695a      	ldr	r2, [r3, #20]
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	441a      	add	r2, r3
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80021a4:	2100      	movs	r1, #0
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f005 f9a5 	bl	80074f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 828e 	beq.w	80026d6 <PCD_EP_ISR_Handler+0x5ca>
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f040 8289 	bne.w	80026d6 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	b292      	uxth	r2, r2
 80021d8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80021e4:	e277      	b.n	80026d6 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80021f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d034      	beq.n	800226a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002208:	b29b      	uxth	r3, r3
 800220a:	461a      	mov	r2, r3
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	4413      	add	r3, r2
 8002214:	3306      	adds	r3, #6
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6812      	ldr	r2, [r2, #0]
 800221c:	4413      	add	r3, r2
 800221e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6818      	ldr	r0, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800223e:	b29b      	uxth	r3, r3
 8002240:	f003 fb55 	bl	80058ee <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	b29a      	uxth	r2, r3
 800224c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002250:	4013      	ands	r3, r2
 8002252:	823b      	strh	r3, [r7, #16]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	8a3a      	ldrh	r2, [r7, #16]
 800225a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800225e:	b292      	uxth	r2, r2
 8002260:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f005 f91a 	bl	800749c <HAL_PCD_SetupStageCallback>
 8002268:	e235      	b.n	80026d6 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800226a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800226e:	2b00      	cmp	r3, #0
 8002270:	f280 8231 	bge.w	80026d6 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	b29a      	uxth	r2, r3
 800227c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002280:	4013      	ands	r3, r2
 8002282:	83bb      	strh	r3, [r7, #28]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	8bba      	ldrh	r2, [r7, #28]
 800228a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800228e:	b292      	uxth	r2, r2
 8002290:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800229a:	b29b      	uxth	r3, r3
 800229c:	461a      	mov	r2, r3
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	4413      	add	r3, r2
 80022a6:	3306      	adds	r3, #6
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6812      	ldr	r2, [r2, #0]
 80022ae:	4413      	add	r3, r2
 80022b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d019      	beq.n	80022fa <PCD_EP_ISR_Handler+0x1ee>
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d015      	beq.n	80022fa <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6818      	ldr	r0, [r3, #0]
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	6959      	ldr	r1, [r3, #20]
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80022de:	b29b      	uxth	r3, r3
 80022e0:	f003 fb05 	bl	80058ee <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	695a      	ldr	r2, [r3, #20]
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	441a      	add	r2, r3
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80022f2:	2100      	movs	r1, #0
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f005 f8e3 	bl	80074c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	61bb      	str	r3, [r7, #24]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002308:	b29b      	uxth	r3, r3
 800230a:	461a      	mov	r2, r3
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	4413      	add	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002318:	617b      	str	r3, [r7, #20]
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d112      	bne.n	8002348 <PCD_EP_ISR_Handler+0x23c>
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	881b      	ldrh	r3, [r3, #0]
 8002326:	b29b      	uxth	r3, r3
 8002328:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800232c:	b29a      	uxth	r2, r3
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	801a      	strh	r2, [r3, #0]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	b29b      	uxth	r3, r3
 8002338:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800233c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002340:	b29a      	uxth	r2, r3
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	801a      	strh	r2, [r3, #0]
 8002346:	e02f      	b.n	80023a8 <PCD_EP_ISR_Handler+0x29c>
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	2b3e      	cmp	r3, #62	; 0x3e
 800234e:	d813      	bhi.n	8002378 <PCD_EP_ISR_Handler+0x26c>
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	085b      	lsrs	r3, r3, #1
 8002356:	633b      	str	r3, [r7, #48]	; 0x30
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <PCD_EP_ISR_Handler+0x25e>
 8002364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002366:	3301      	adds	r3, #1
 8002368:	633b      	str	r3, [r7, #48]	; 0x30
 800236a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236c:	b29b      	uxth	r3, r3
 800236e:	029b      	lsls	r3, r3, #10
 8002370:	b29a      	uxth	r2, r3
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	801a      	strh	r2, [r3, #0]
 8002376:	e017      	b.n	80023a8 <PCD_EP_ISR_Handler+0x29c>
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	095b      	lsrs	r3, r3, #5
 800237e:	633b      	str	r3, [r7, #48]	; 0x30
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	f003 031f 	and.w	r3, r3, #31
 8002388:	2b00      	cmp	r3, #0
 800238a:	d102      	bne.n	8002392 <PCD_EP_ISR_Handler+0x286>
 800238c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800238e:	3b01      	subs	r3, #1
 8002390:	633b      	str	r3, [r7, #48]	; 0x30
 8002392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002394:	b29b      	uxth	r3, r3
 8002396:	029b      	lsls	r3, r3, #10
 8002398:	b29b      	uxth	r3, r3
 800239a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800239e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023b8:	827b      	strh	r3, [r7, #18]
 80023ba:	8a7b      	ldrh	r3, [r7, #18]
 80023bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80023c0:	827b      	strh	r3, [r7, #18]
 80023c2:	8a7b      	ldrh	r3, [r7, #18]
 80023c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023c8:	827b      	strh	r3, [r7, #18]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	8a7b      	ldrh	r3, [r7, #18]
 80023d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	8013      	strh	r3, [r2, #0]
 80023e4:	e177      	b.n	80026d6 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80023f8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f280 80ea 	bge.w	80025d6 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	461a      	mov	r2, r3
 8002408:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	b29a      	uxth	r2, r3
 8002414:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002418:	4013      	ands	r3, r2
 800241a:	853b      	strh	r3, [r7, #40]	; 0x28
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	461a      	mov	r2, r3
 8002422:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800242c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002430:	b292      	uxth	r2, r2
 8002432:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002434:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	4413      	add	r3, r2
 8002448:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	7b1b      	ldrb	r3, [r3, #12]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d122      	bne.n	8002498 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800245a:	b29b      	uxth	r3, r3
 800245c:	461a      	mov	r2, r3
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	4413      	add	r3, r2
 8002466:	3306      	adds	r3, #6
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6812      	ldr	r2, [r2, #0]
 800246e:	4413      	add	r3, r2
 8002470:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800247a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800247c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 8087 	beq.w	8002592 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6818      	ldr	r0, [r3, #0]
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	6959      	ldr	r1, [r3, #20]
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	88da      	ldrh	r2, [r3, #6]
 8002490:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002492:	f003 fa2c 	bl	80058ee <USB_ReadPMA>
 8002496:	e07c      	b.n	8002592 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	78db      	ldrb	r3, [r3, #3]
 800249c:	2b02      	cmp	r3, #2
 800249e:	d108      	bne.n	80024b2 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80024a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024a2:	461a      	mov	r2, r3
 80024a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f923 	bl	80026f2 <HAL_PCD_EP_DB_Receive>
 80024ac:	4603      	mov	r3, r0
 80024ae:	86fb      	strh	r3, [r7, #54]	; 0x36
 80024b0:	e06f      	b.n	8002592 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024cc:	847b      	strh	r3, [r7, #34]	; 0x22
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	441a      	add	r2, r3
 80024dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80024de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	461a      	mov	r2, r3
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	b29b      	uxth	r3, r3
 8002504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d021      	beq.n	8002550 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002514:	b29b      	uxth	r3, r3
 8002516:	461a      	mov	r2, r3
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	4413      	add	r3, r2
 8002520:	3302      	adds	r3, #2
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6812      	ldr	r2, [r2, #0]
 8002528:	4413      	add	r3, r2
 800252a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002534:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002536:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002538:	2b00      	cmp	r3, #0
 800253a:	d02a      	beq.n	8002592 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6818      	ldr	r0, [r3, #0]
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	6959      	ldr	r1, [r3, #20]
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	891a      	ldrh	r2, [r3, #8]
 8002548:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800254a:	f003 f9d0 	bl	80058ee <USB_ReadPMA>
 800254e:	e020      	b.n	8002592 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002558:	b29b      	uxth	r3, r3
 800255a:	461a      	mov	r2, r3
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	4413      	add	r3, r2
 8002564:	3306      	adds	r3, #6
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	4413      	add	r3, r2
 800256e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002578:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800257a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	6959      	ldr	r1, [r3, #20]
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	895a      	ldrh	r2, [r3, #10]
 800258c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800258e:	f003 f9ae 	bl	80058ee <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	69da      	ldr	r2, [r3, #28]
 8002596:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002598:	441a      	add	r2, r3
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	695a      	ldr	r2, [r3, #20]
 80025a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025a4:	441a      	add	r2, r3
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d004      	beq.n	80025bc <PCD_EP_ISR_Handler+0x4b0>
 80025b2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d206      	bcs.n	80025ca <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	4619      	mov	r1, r3
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f004 ff7c 	bl	80074c0 <HAL_PCD_DataOutStageCallback>
 80025c8:	e005      	b.n	80025d6 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025d0:	4618      	mov	r0, r3
 80025d2:	f001 fee9 	bl	80043a8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80025d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d07a      	beq.n	80026d6 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80025e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025e4:	1c5a      	adds	r2, r3, #1
 80025e6:	4613      	mov	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	4413      	add	r3, r2
 80025f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	461a      	mov	r2, r3
 80025fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	b29b      	uxth	r3, r3
 8002606:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800260a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800260e:	843b      	strh	r3, [r7, #32]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	461a      	mov	r2, r3
 8002616:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	441a      	add	r2, r3
 800261e:	8c3b      	ldrh	r3, [r7, #32]
 8002620:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002624:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002628:	b29b      	uxth	r3, r3
 800262a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	78db      	ldrb	r3, [r3, #3]
 8002630:	2b02      	cmp	r3, #2
 8002632:	d108      	bne.n	8002646 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002638:	2b02      	cmp	r3, #2
 800263a:	d146      	bne.n	80026ca <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800263c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800263e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002642:	2b00      	cmp	r3, #0
 8002644:	d141      	bne.n	80026ca <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800264e:	b29b      	uxth	r3, r3
 8002650:	461a      	mov	r2, r3
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	4413      	add	r3, r2
 800265a:	3302      	adds	r3, #2
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	6812      	ldr	r2, [r2, #0]
 8002662:	4413      	add	r3, r2
 8002664:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002668:	881b      	ldrh	r3, [r3, #0]
 800266a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800266e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	699a      	ldr	r2, [r3, #24]
 8002674:	8bfb      	ldrh	r3, [r7, #30]
 8002676:	429a      	cmp	r2, r3
 8002678:	d906      	bls.n	8002688 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	699a      	ldr	r2, [r3, #24]
 800267e:	8bfb      	ldrh	r3, [r7, #30]
 8002680:	1ad2      	subs	r2, r2, r3
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	619a      	str	r2, [r3, #24]
 8002686:	e002      	b.n	800268e <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	2200      	movs	r2, #0
 800268c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d106      	bne.n	80026a4 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	4619      	mov	r1, r3
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f004 ff2a 	bl	80074f6 <HAL_PCD_DataInStageCallback>
 80026a2:	e018      	b.n	80026d6 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	695a      	ldr	r2, [r3, #20]
 80026a8:	8bfb      	ldrh	r3, [r7, #30]
 80026aa:	441a      	add	r2, r3
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	69da      	ldr	r2, [r3, #28]
 80026b4:	8bfb      	ldrh	r3, [r7, #30]
 80026b6:	441a      	add	r2, r3
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026c2:	4618      	mov	r0, r3
 80026c4:	f001 fe70 	bl	80043a8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80026c8:	e005      	b.n	80026d6 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80026ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026cc:	461a      	mov	r2, r3
 80026ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f91b 	bl	800290c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026de:	b29b      	uxth	r3, r3
 80026e0:	b21b      	sxth	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f6ff ad17 	blt.w	8002116 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3738      	adds	r7, #56	; 0x38
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b088      	sub	sp, #32
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	60f8      	str	r0, [r7, #12]
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	4613      	mov	r3, r2
 80026fe:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002700:	88fb      	ldrh	r3, [r7, #6]
 8002702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d07e      	beq.n	8002808 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002712:	b29b      	uxth	r3, r3
 8002714:	461a      	mov	r2, r3
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	4413      	add	r3, r2
 800271e:	3302      	adds	r3, #2
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	6812      	ldr	r2, [r2, #0]
 8002726:	4413      	add	r3, r2
 8002728:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002732:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	699a      	ldr	r2, [r3, #24]
 8002738:	8b7b      	ldrh	r3, [r7, #26]
 800273a:	429a      	cmp	r2, r3
 800273c:	d306      	bcc.n	800274c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	699a      	ldr	r2, [r3, #24]
 8002742:	8b7b      	ldrh	r3, [r7, #26]
 8002744:	1ad2      	subs	r2, r2, r3
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	619a      	str	r2, [r3, #24]
 800274a:	e002      	b.n	8002752 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	2200      	movs	r2, #0
 8002750:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d123      	bne.n	80027a2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	881b      	ldrh	r3, [r3, #0]
 800276a:	b29b      	uxth	r3, r3
 800276c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002774:	833b      	strh	r3, [r7, #24]
 8002776:	8b3b      	ldrh	r3, [r7, #24]
 8002778:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800277c:	833b      	strh	r3, [r7, #24]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	461a      	mov	r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	441a      	add	r2, r3
 800278c:	8b3b      	ldrh	r3, [r7, #24]
 800278e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002792:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800279a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800279e:	b29b      	uxth	r3, r3
 80027a0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027a2:	88fb      	ldrh	r3, [r7, #6]
 80027a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d01f      	beq.n	80027ec <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	461a      	mov	r2, r3
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	b29b      	uxth	r3, r3
 80027be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c6:	82fb      	strh	r3, [r7, #22]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	461a      	mov	r2, r3
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	441a      	add	r2, r3
 80027d6:	8afb      	ldrh	r3, [r7, #22]
 80027d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80027ec:	8b7b      	ldrh	r3, [r7, #26]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 8087 	beq.w	8002902 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	6959      	ldr	r1, [r3, #20]
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	891a      	ldrh	r2, [r3, #8]
 8002800:	8b7b      	ldrh	r3, [r7, #26]
 8002802:	f003 f874 	bl	80058ee <USB_ReadPMA>
 8002806:	e07c      	b.n	8002902 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002810:	b29b      	uxth	r3, r3
 8002812:	461a      	mov	r2, r3
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	4413      	add	r3, r2
 800281c:	3306      	adds	r3, #6
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	6812      	ldr	r2, [r2, #0]
 8002824:	4413      	add	r3, r2
 8002826:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002830:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	699a      	ldr	r2, [r3, #24]
 8002836:	8b7b      	ldrh	r3, [r7, #26]
 8002838:	429a      	cmp	r2, r3
 800283a:	d306      	bcc.n	800284a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	699a      	ldr	r2, [r3, #24]
 8002840:	8b7b      	ldrh	r3, [r7, #26]
 8002842:	1ad2      	subs	r2, r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	619a      	str	r2, [r3, #24]
 8002848:	e002      	b.n	8002850 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2200      	movs	r2, #0
 800284e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d123      	bne.n	80028a0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	461a      	mov	r2, r3
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	b29b      	uxth	r3, r3
 800286a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800286e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002872:	83fb      	strh	r3, [r7, #30]
 8002874:	8bfb      	ldrh	r3, [r7, #30]
 8002876:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800287a:	83fb      	strh	r3, [r7, #30]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	461a      	mov	r2, r3
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	441a      	add	r2, r3
 800288a:	8bfb      	ldrh	r3, [r7, #30]
 800288c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002890:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002894:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800289c:	b29b      	uxth	r3, r3
 800289e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80028a0:	88fb      	ldrh	r3, [r7, #6]
 80028a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d11f      	bne.n	80028ea <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c4:	83bb      	strh	r3, [r7, #28]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	461a      	mov	r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	441a      	add	r2, r3
 80028d4:	8bbb      	ldrh	r3, [r7, #28]
 80028d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80028ea:	8b7b      	ldrh	r3, [r7, #26]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d008      	beq.n	8002902 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6818      	ldr	r0, [r3, #0]
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	6959      	ldr	r1, [r3, #20]
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	895a      	ldrh	r2, [r3, #10]
 80028fc:	8b7b      	ldrh	r3, [r7, #26]
 80028fe:	f002 fff6 	bl	80058ee <USB_ReadPMA>
    }
  }

  return count;
 8002902:	8b7b      	ldrh	r3, [r7, #26]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3720      	adds	r7, #32
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b094      	sub	sp, #80	; 0x50
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	4613      	mov	r3, r2
 8002918:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800291a:	88fb      	ldrh	r3, [r7, #6]
 800291c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 8138 	beq.w	8002b96 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800292e:	b29b      	uxth	r3, r3
 8002930:	461a      	mov	r2, r3
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	4413      	add	r3, r2
 800293a:	3302      	adds	r3, #2
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	6812      	ldr	r2, [r2, #0]
 8002942:	4413      	add	r3, r2
 8002944:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002948:	881b      	ldrh	r3, [r3, #0]
 800294a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800294e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	699a      	ldr	r2, [r3, #24]
 8002956:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800295a:	429a      	cmp	r2, r3
 800295c:	d907      	bls.n	800296e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	699a      	ldr	r2, [r3, #24]
 8002962:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002966:	1ad2      	subs	r2, r2, r3
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	619a      	str	r2, [r3, #24]
 800296c:	e002      	b.n	8002974 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2200      	movs	r2, #0
 8002972:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d12c      	bne.n	80029d6 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	4619      	mov	r1, r3
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f004 fdb7 	bl	80074f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002988:	88fb      	ldrh	r3, [r7, #6]
 800298a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 823a 	beq.w	8002e08 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	881b      	ldrh	r3, [r3, #0]
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ae:	82fb      	strh	r3, [r7, #22]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	461a      	mov	r2, r3
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	441a      	add	r2, r3
 80029be:	8afb      	ldrh	r3, [r7, #22]
 80029c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	8013      	strh	r3, [r2, #0]
 80029d4:	e218      	b.n	8002e08 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029d6:	88fb      	ldrh	r3, [r7, #6]
 80029d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d01f      	beq.n	8002a20 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	461a      	mov	r2, r3
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029fa:	857b      	strh	r3, [r7, #42]	; 0x2a
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	461a      	mov	r2, r3
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	441a      	add	r2, r3
 8002a0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	f040 81ee 	bne.w	8002e08 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	695a      	ldr	r2, [r3, #20]
 8002a30:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002a34:	441a      	add	r2, r3
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	69da      	ldr	r2, [r3, #28]
 8002a3e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002a42:	441a      	add	r2, r3
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	6a1a      	ldr	r2, [r3, #32]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d309      	bcc.n	8002a68 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	6a1a      	ldr	r2, [r3, #32]
 8002a5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a60:	1ad2      	subs	r2, r2, r3
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	621a      	str	r2, [r3, #32]
 8002a66:	e015      	b.n	8002a94 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d107      	bne.n	8002a80 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8002a70:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002a74:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a7e:	e009      	b.n	8002a94 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2200      	movs	r2, #0
 8002a92:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	785b      	ldrb	r3, [r3, #1]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d155      	bne.n	8002b48 <HAL_PCD_EP_DB_Transmit+0x23c>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	61fb      	str	r3, [r7, #28]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	461a      	mov	r2, r3
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	61fb      	str	r3, [r7, #28]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	011a      	lsls	r2, r3, #4
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	4413      	add	r3, r2
 8002abe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ac2:	61bb      	str	r3, [r7, #24]
 8002ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d112      	bne.n	8002af0 <HAL_PCD_EP_DB_Transmit+0x1e4>
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	801a      	strh	r2, [r3, #0]
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ae4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	801a      	strh	r2, [r3, #0]
 8002aee:	e047      	b.n	8002b80 <HAL_PCD_EP_DB_Transmit+0x274>
 8002af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002af2:	2b3e      	cmp	r3, #62	; 0x3e
 8002af4:	d811      	bhi.n	8002b1a <HAL_PCD_EP_DB_Transmit+0x20e>
 8002af6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002af8:	085b      	lsrs	r3, r3, #1
 8002afa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d002      	beq.n	8002b0c <HAL_PCD_EP_DB_Transmit+0x200>
 8002b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b08:	3301      	adds	r3, #1
 8002b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	029b      	lsls	r3, r3, #10
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	801a      	strh	r2, [r3, #0]
 8002b18:	e032      	b.n	8002b80 <HAL_PCD_EP_DB_Transmit+0x274>
 8002b1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b1c:	095b      	lsrs	r3, r3, #5
 8002b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b22:	f003 031f 	and.w	r3, r3, #31
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d102      	bne.n	8002b30 <HAL_PCD_EP_DB_Transmit+0x224>
 8002b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	029b      	lsls	r3, r3, #10
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	801a      	strh	r2, [r3, #0]
 8002b46:	e01b      	b.n	8002b80 <HAL_PCD_EP_DB_Transmit+0x274>
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	785b      	ldrb	r3, [r3, #1]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d117      	bne.n	8002b80 <HAL_PCD_EP_DB_Transmit+0x274>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	461a      	mov	r2, r3
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	4413      	add	r3, r2
 8002b66:	627b      	str	r3, [r7, #36]	; 0x24
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	011a      	lsls	r2, r3, #4
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	4413      	add	r3, r2
 8002b72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b76:	623b      	str	r3, [r7, #32]
 8002b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6818      	ldr	r0, [r3, #0]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	6959      	ldr	r1, [r3, #20]
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	891a      	ldrh	r2, [r3, #8]
 8002b8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	f002 fe68 	bl	8005864 <USB_WritePMA>
 8002b94:	e138      	b.n	8002e08 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	4413      	add	r3, r2
 8002baa:	3306      	adds	r3, #6
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	6812      	ldr	r2, [r2, #0]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bb8:	881b      	ldrh	r3, [r3, #0]
 8002bba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bbe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	699a      	ldr	r2, [r3, #24]
 8002bc6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d307      	bcc.n	8002bde <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	699a      	ldr	r2, [r3, #24]
 8002bd2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002bd6:	1ad2      	subs	r2, r2, r3
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	619a      	str	r2, [r3, #24]
 8002bdc:	e002      	b.n	8002be4 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2200      	movs	r2, #0
 8002be2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d12e      	bne.n	8002c4a <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f004 fc7f 	bl	80074f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002bf8:	88fb      	ldrh	r3, [r7, #6]
 8002bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f040 8102 	bne.w	8002e08 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	881b      	ldrh	r3, [r3, #0]
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	441a      	add	r2, r3
 8002c30:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002c34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	8013      	strh	r3, [r2, #0]
 8002c48:	e0de      	b.n	8002e08 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c4a:	88fb      	ldrh	r3, [r7, #6]
 8002c4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d11f      	bne.n	8002c94 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	461a      	mov	r2, r3
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6e:	867b      	strh	r3, [r7, #50]	; 0x32
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	461a      	mov	r2, r3
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	441a      	add	r2, r3
 8002c7e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002c80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	f040 80b4 	bne.w	8002e08 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	695a      	ldr	r2, [r3, #20]
 8002ca4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ca8:	441a      	add	r2, r3
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	69da      	ldr	r2, [r3, #28]
 8002cb2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002cb6:	441a      	add	r2, r3
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	6a1a      	ldr	r2, [r3, #32]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d309      	bcc.n	8002cdc <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	6a1a      	ldr	r2, [r3, #32]
 8002cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cd4:	1ad2      	subs	r2, r2, r3
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	621a      	str	r2, [r3, #32]
 8002cda:	e015      	b.n	8002d08 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d107      	bne.n	8002cf4 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8002ce4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ce8:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002cf2:	e009      	b.n	8002d08 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	643b      	str	r3, [r7, #64]	; 0x40
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	785b      	ldrb	r3, [r3, #1]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d155      	bne.n	8002dc2 <HAL_PCD_EP_DB_Transmit+0x4b6>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	461a      	mov	r2, r3
 8002d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2a:	4413      	add	r3, r2
 8002d2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	011a      	lsls	r2, r3, #4
 8002d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d36:	4413      	add	r3, r2
 8002d38:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d3c:	637b      	str	r3, [r7, #52]	; 0x34
 8002d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d112      	bne.n	8002d6a <HAL_PCD_EP_DB_Transmit+0x45e>
 8002d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d46:	881b      	ldrh	r3, [r3, #0]
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d52:	801a      	strh	r2, [r3, #0]
 8002d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d66:	801a      	strh	r2, [r3, #0]
 8002d68:	e044      	b.n	8002df4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002d6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d6c:	2b3e      	cmp	r3, #62	; 0x3e
 8002d6e:	d811      	bhi.n	8002d94 <HAL_PCD_EP_DB_Transmit+0x488>
 8002d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d72:	085b      	lsrs	r3, r3, #1
 8002d74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <HAL_PCD_EP_DB_Transmit+0x47a>
 8002d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d82:	3301      	adds	r3, #1
 8002d84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	029b      	lsls	r3, r3, #10
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d90:	801a      	strh	r2, [r3, #0]
 8002d92:	e02f      	b.n	8002df4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d96:	095b      	lsrs	r3, r3, #5
 8002d98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d9c:	f003 031f 	and.w	r3, r3, #31
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d102      	bne.n	8002daa <HAL_PCD_EP_DB_Transmit+0x49e>
 8002da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002da6:	3b01      	subs	r3, #1
 8002da8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	029b      	lsls	r3, r3, #10
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002db6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dbe:	801a      	strh	r2, [r3, #0]
 8002dc0:	e018      	b.n	8002df4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	785b      	ldrb	r3, [r3, #1]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d114      	bne.n	8002df4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dd8:	4413      	add	r3, r2
 8002dda:	643b      	str	r3, [r7, #64]	; 0x40
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	011a      	lsls	r2, r3, #4
 8002de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002de4:	4413      	add	r3, r2
 8002de6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002dea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002df2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6818      	ldr	r0, [r3, #0]
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	6959      	ldr	r1, [r3, #20]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	895a      	ldrh	r2, [r3, #10]
 8002e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	f002 fd2e 	bl	8005864 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	881b      	ldrh	r3, [r3, #0]
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e22:	82bb      	strh	r3, [r7, #20]
 8002e24:	8abb      	ldrh	r3, [r7, #20]
 8002e26:	f083 0310 	eor.w	r3, r3, #16
 8002e2a:	82bb      	strh	r3, [r7, #20]
 8002e2c:	8abb      	ldrh	r3, [r7, #20]
 8002e2e:	f083 0320 	eor.w	r3, r3, #32
 8002e32:	82bb      	strh	r3, [r7, #20]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	441a      	add	r2, r3
 8002e42:	8abb      	ldrh	r3, [r7, #20]
 8002e44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3750      	adds	r7, #80	; 0x50
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b087      	sub	sp, #28
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	607b      	str	r3, [r7, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	817b      	strh	r3, [r7, #10]
 8002e70:	4613      	mov	r3, r2
 8002e72:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002e74:	897b      	ldrh	r3, [r7, #10]
 8002e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00b      	beq.n	8002e98 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e80:	897b      	ldrh	r3, [r7, #10]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	1c5a      	adds	r2, r3, #1
 8002e88:	4613      	mov	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	4413      	add	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]
 8002e96:	e009      	b.n	8002eac <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e98:	897a      	ldrh	r2, [r7, #10]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002eac:	893b      	ldrh	r3, [r7, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d107      	bne.n	8002ec2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	80da      	strh	r2, [r3, #6]
 8002ec0:	e00b      	b.n	8002eda <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	0c1b      	lsrs	r3, r3, #16
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	371c      	adds	r7, #28
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bc80      	pop	{r7}
 8002ee4:	4770      	bx	lr
	...

08002ee8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e26c      	b.n	80033d4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 8087 	beq.w	8003016 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f08:	4b92      	ldr	r3, [pc, #584]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 030c 	and.w	r3, r3, #12
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d00c      	beq.n	8002f2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f14:	4b8f      	ldr	r3, [pc, #572]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f003 030c 	and.w	r3, r3, #12
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d112      	bne.n	8002f46 <HAL_RCC_OscConfig+0x5e>
 8002f20:	4b8c      	ldr	r3, [pc, #560]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f2c:	d10b      	bne.n	8002f46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f2e:	4b89      	ldr	r3, [pc, #548]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d06c      	beq.n	8003014 <HAL_RCC_OscConfig+0x12c>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d168      	bne.n	8003014 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e246      	b.n	80033d4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f4e:	d106      	bne.n	8002f5e <HAL_RCC_OscConfig+0x76>
 8002f50:	4b80      	ldr	r3, [pc, #512]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a7f      	ldr	r2, [pc, #508]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f5a:	6013      	str	r3, [r2, #0]
 8002f5c:	e02e      	b.n	8002fbc <HAL_RCC_OscConfig+0xd4>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10c      	bne.n	8002f80 <HAL_RCC_OscConfig+0x98>
 8002f66:	4b7b      	ldr	r3, [pc, #492]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a7a      	ldr	r2, [pc, #488]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	4b78      	ldr	r3, [pc, #480]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a77      	ldr	r2, [pc, #476]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002f78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	e01d      	b.n	8002fbc <HAL_RCC_OscConfig+0xd4>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f88:	d10c      	bne.n	8002fa4 <HAL_RCC_OscConfig+0xbc>
 8002f8a:	4b72      	ldr	r3, [pc, #456]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a71      	ldr	r2, [pc, #452]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	4b6f      	ldr	r3, [pc, #444]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a6e      	ldr	r2, [pc, #440]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa0:	6013      	str	r3, [r2, #0]
 8002fa2:	e00b      	b.n	8002fbc <HAL_RCC_OscConfig+0xd4>
 8002fa4:	4b6b      	ldr	r3, [pc, #428]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a6a      	ldr	r2, [pc, #424]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fae:	6013      	str	r3, [r2, #0]
 8002fb0:	4b68      	ldr	r3, [pc, #416]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a67      	ldr	r2, [pc, #412]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d013      	beq.n	8002fec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc4:	f7fd fb9e 	bl	8000704 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fcc:	f7fd fb9a 	bl	8000704 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b64      	cmp	r3, #100	; 0x64
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e1fa      	b.n	80033d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fde:	4b5d      	ldr	r3, [pc, #372]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0f0      	beq.n	8002fcc <HAL_RCC_OscConfig+0xe4>
 8002fea:	e014      	b.n	8003016 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fec:	f7fd fb8a 	bl	8000704 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ff4:	f7fd fb86 	bl	8000704 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b64      	cmp	r3, #100	; 0x64
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e1e6      	b.n	80033d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003006:	4b53      	ldr	r3, [pc, #332]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f0      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x10c>
 8003012:	e000      	b.n	8003016 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d063      	beq.n	80030ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003022:	4b4c      	ldr	r3, [pc, #304]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f003 030c 	and.w	r3, r3, #12
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00b      	beq.n	8003046 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800302e:	4b49      	ldr	r3, [pc, #292]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f003 030c 	and.w	r3, r3, #12
 8003036:	2b08      	cmp	r3, #8
 8003038:	d11c      	bne.n	8003074 <HAL_RCC_OscConfig+0x18c>
 800303a:	4b46      	ldr	r3, [pc, #280]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d116      	bne.n	8003074 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003046:	4b43      	ldr	r3, [pc, #268]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d005      	beq.n	800305e <HAL_RCC_OscConfig+0x176>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d001      	beq.n	800305e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e1ba      	b.n	80033d4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305e:	4b3d      	ldr	r3, [pc, #244]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4939      	ldr	r1, [pc, #228]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 800306e:	4313      	orrs	r3, r2
 8003070:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003072:	e03a      	b.n	80030ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d020      	beq.n	80030be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800307c:	4b36      	ldr	r3, [pc, #216]	; (8003158 <HAL_RCC_OscConfig+0x270>)
 800307e:	2201      	movs	r2, #1
 8003080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003082:	f7fd fb3f 	bl	8000704 <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003088:	e008      	b.n	800309c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800308a:	f7fd fb3b 	bl	8000704 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e19b      	b.n	80033d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309c:	4b2d      	ldr	r3, [pc, #180]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0f0      	beq.n	800308a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a8:	4b2a      	ldr	r3, [pc, #168]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	4927      	ldr	r1, [pc, #156]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	600b      	str	r3, [r1, #0]
 80030bc:	e015      	b.n	80030ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030be:	4b26      	ldr	r3, [pc, #152]	; (8003158 <HAL_RCC_OscConfig+0x270>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c4:	f7fd fb1e 	bl	8000704 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030cc:	f7fd fb1a 	bl	8000704 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e17a      	b.n	80033d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030de:	4b1d      	ldr	r3, [pc, #116]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f0      	bne.n	80030cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d03a      	beq.n	800316c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d019      	beq.n	8003132 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030fe:	4b17      	ldr	r3, [pc, #92]	; (800315c <HAL_RCC_OscConfig+0x274>)
 8003100:	2201      	movs	r2, #1
 8003102:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003104:	f7fd fafe 	bl	8000704 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800310c:	f7fd fafa 	bl	8000704 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e15a      	b.n	80033d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800311e:	4b0d      	ldr	r3, [pc, #52]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f0      	beq.n	800310c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800312a:	2001      	movs	r0, #1
 800312c:	f000 faa6 	bl	800367c <RCC_Delay>
 8003130:	e01c      	b.n	800316c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003132:	4b0a      	ldr	r3, [pc, #40]	; (800315c <HAL_RCC_OscConfig+0x274>)
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003138:	f7fd fae4 	bl	8000704 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800313e:	e00f      	b.n	8003160 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003140:	f7fd fae0 	bl	8000704 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d908      	bls.n	8003160 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e140      	b.n	80033d4 <HAL_RCC_OscConfig+0x4ec>
 8003152:	bf00      	nop
 8003154:	40021000 	.word	0x40021000
 8003158:	42420000 	.word	0x42420000
 800315c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003160:	4b9e      	ldr	r3, [pc, #632]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1e9      	bne.n	8003140 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 80a6 	beq.w	80032c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800317a:	2300      	movs	r3, #0
 800317c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800317e:	4b97      	ldr	r3, [pc, #604]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10d      	bne.n	80031a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800318a:	4b94      	ldr	r3, [pc, #592]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	4a93      	ldr	r2, [pc, #588]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003194:	61d3      	str	r3, [r2, #28]
 8003196:	4b91      	ldr	r3, [pc, #580]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319e:	60bb      	str	r3, [r7, #8]
 80031a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031a2:	2301      	movs	r3, #1
 80031a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a6:	4b8e      	ldr	r3, [pc, #568]	; (80033e0 <HAL_RCC_OscConfig+0x4f8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d118      	bne.n	80031e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031b2:	4b8b      	ldr	r3, [pc, #556]	; (80033e0 <HAL_RCC_OscConfig+0x4f8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a8a      	ldr	r2, [pc, #552]	; (80033e0 <HAL_RCC_OscConfig+0x4f8>)
 80031b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031be:	f7fd faa1 	bl	8000704 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c6:	f7fd fa9d 	bl	8000704 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b64      	cmp	r3, #100	; 0x64
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e0fd      	b.n	80033d4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d8:	4b81      	ldr	r3, [pc, #516]	; (80033e0 <HAL_RCC_OscConfig+0x4f8>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0f0      	beq.n	80031c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d106      	bne.n	80031fa <HAL_RCC_OscConfig+0x312>
 80031ec:	4b7b      	ldr	r3, [pc, #492]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	4a7a      	ldr	r2, [pc, #488]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 80031f2:	f043 0301 	orr.w	r3, r3, #1
 80031f6:	6213      	str	r3, [r2, #32]
 80031f8:	e02d      	b.n	8003256 <HAL_RCC_OscConfig+0x36e>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10c      	bne.n	800321c <HAL_RCC_OscConfig+0x334>
 8003202:	4b76      	ldr	r3, [pc, #472]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	4a75      	ldr	r2, [pc, #468]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003208:	f023 0301 	bic.w	r3, r3, #1
 800320c:	6213      	str	r3, [r2, #32]
 800320e:	4b73      	ldr	r3, [pc, #460]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	4a72      	ldr	r2, [pc, #456]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003214:	f023 0304 	bic.w	r3, r3, #4
 8003218:	6213      	str	r3, [r2, #32]
 800321a:	e01c      	b.n	8003256 <HAL_RCC_OscConfig+0x36e>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	2b05      	cmp	r3, #5
 8003222:	d10c      	bne.n	800323e <HAL_RCC_OscConfig+0x356>
 8003224:	4b6d      	ldr	r3, [pc, #436]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	4a6c      	ldr	r2, [pc, #432]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 800322a:	f043 0304 	orr.w	r3, r3, #4
 800322e:	6213      	str	r3, [r2, #32]
 8003230:	4b6a      	ldr	r3, [pc, #424]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	4a69      	ldr	r2, [pc, #420]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003236:	f043 0301 	orr.w	r3, r3, #1
 800323a:	6213      	str	r3, [r2, #32]
 800323c:	e00b      	b.n	8003256 <HAL_RCC_OscConfig+0x36e>
 800323e:	4b67      	ldr	r3, [pc, #412]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	4a66      	ldr	r2, [pc, #408]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003244:	f023 0301 	bic.w	r3, r3, #1
 8003248:	6213      	str	r3, [r2, #32]
 800324a:	4b64      	ldr	r3, [pc, #400]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	4a63      	ldr	r2, [pc, #396]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003250:	f023 0304 	bic.w	r3, r3, #4
 8003254:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d015      	beq.n	800328a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800325e:	f7fd fa51 	bl	8000704 <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003264:	e00a      	b.n	800327c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003266:	f7fd fa4d 	bl	8000704 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	f241 3288 	movw	r2, #5000	; 0x1388
 8003274:	4293      	cmp	r3, r2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e0ab      	b.n	80033d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800327c:	4b57      	ldr	r3, [pc, #348]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0ee      	beq.n	8003266 <HAL_RCC_OscConfig+0x37e>
 8003288:	e014      	b.n	80032b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800328a:	f7fd fa3b 	bl	8000704 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003290:	e00a      	b.n	80032a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003292:	f7fd fa37 	bl	8000704 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e095      	b.n	80033d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a8:	4b4c      	ldr	r3, [pc, #304]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1ee      	bne.n	8003292 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032b4:	7dfb      	ldrb	r3, [r7, #23]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d105      	bne.n	80032c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ba:	4b48      	ldr	r3, [pc, #288]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	4a47      	ldr	r2, [pc, #284]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 80032c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 8081 	beq.w	80033d2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032d0:	4b42      	ldr	r3, [pc, #264]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f003 030c 	and.w	r3, r3, #12
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d061      	beq.n	80033a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d146      	bne.n	8003372 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e4:	4b3f      	ldr	r3, [pc, #252]	; (80033e4 <HAL_RCC_OscConfig+0x4fc>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ea:	f7fd fa0b 	bl	8000704 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f2:	f7fd fa07 	bl	8000704 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e067      	b.n	80033d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003304:	4b35      	ldr	r3, [pc, #212]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1f0      	bne.n	80032f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003318:	d108      	bne.n	800332c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800331a:	4b30      	ldr	r3, [pc, #192]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	492d      	ldr	r1, [pc, #180]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003328:	4313      	orrs	r3, r2
 800332a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800332c:	4b2b      	ldr	r3, [pc, #172]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a19      	ldr	r1, [r3, #32]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	430b      	orrs	r3, r1
 800333e:	4927      	ldr	r1, [pc, #156]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003340:	4313      	orrs	r3, r2
 8003342:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003344:	4b27      	ldr	r3, [pc, #156]	; (80033e4 <HAL_RCC_OscConfig+0x4fc>)
 8003346:	2201      	movs	r2, #1
 8003348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334a:	f7fd f9db 	bl	8000704 <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003352:	f7fd f9d7 	bl	8000704 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e037      	b.n	80033d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003364:	4b1d      	ldr	r3, [pc, #116]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0f0      	beq.n	8003352 <HAL_RCC_OscConfig+0x46a>
 8003370:	e02f      	b.n	80033d2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003372:	4b1c      	ldr	r3, [pc, #112]	; (80033e4 <HAL_RCC_OscConfig+0x4fc>)
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003378:	f7fd f9c4 	bl	8000704 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003380:	f7fd f9c0 	bl	8000704 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e020      	b.n	80033d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003392:	4b12      	ldr	r3, [pc, #72]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f0      	bne.n	8003380 <HAL_RCC_OscConfig+0x498>
 800339e:	e018      	b.n	80033d2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d101      	bne.n	80033ac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e013      	b.n	80033d4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033ac:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d106      	bne.n	80033ce <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d001      	beq.n	80033d2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e000      	b.n	80033d4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3718      	adds	r7, #24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40021000 	.word	0x40021000
 80033e0:	40007000 	.word	0x40007000
 80033e4:	42420060 	.word	0x42420060

080033e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0d0      	b.n	800359e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033fc:	4b6a      	ldr	r3, [pc, #424]	; (80035a8 <HAL_RCC_ClockConfig+0x1c0>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d910      	bls.n	800342c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340a:	4b67      	ldr	r3, [pc, #412]	; (80035a8 <HAL_RCC_ClockConfig+0x1c0>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f023 0207 	bic.w	r2, r3, #7
 8003412:	4965      	ldr	r1, [pc, #404]	; (80035a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	4313      	orrs	r3, r2
 8003418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800341a:	4b63      	ldr	r3, [pc, #396]	; (80035a8 <HAL_RCC_ClockConfig+0x1c0>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	429a      	cmp	r2, r3
 8003426:	d001      	beq.n	800342c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e0b8      	b.n	800359e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d020      	beq.n	800347a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003444:	4b59      	ldr	r3, [pc, #356]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	4a58      	ldr	r2, [pc, #352]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 800344a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800344e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800345c:	4b53      	ldr	r3, [pc, #332]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	4a52      	ldr	r2, [pc, #328]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 8003462:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003466:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003468:	4b50      	ldr	r3, [pc, #320]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	494d      	ldr	r1, [pc, #308]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 8003476:	4313      	orrs	r3, r2
 8003478:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d040      	beq.n	8003508 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d107      	bne.n	800349e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348e:	4b47      	ldr	r3, [pc, #284]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d115      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e07f      	b.n	800359e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d107      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a6:	4b41      	ldr	r3, [pc, #260]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d109      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e073      	b.n	800359e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b6:	4b3d      	ldr	r3, [pc, #244]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e06b      	b.n	800359e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034c6:	4b39      	ldr	r3, [pc, #228]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f023 0203 	bic.w	r2, r3, #3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	4936      	ldr	r1, [pc, #216]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034d8:	f7fd f914 	bl	8000704 <HAL_GetTick>
 80034dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034de:	e00a      	b.n	80034f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e0:	f7fd f910 	bl	8000704 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e053      	b.n	800359e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f6:	4b2d      	ldr	r3, [pc, #180]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f003 020c 	and.w	r2, r3, #12
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	429a      	cmp	r2, r3
 8003506:	d1eb      	bne.n	80034e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003508:	4b27      	ldr	r3, [pc, #156]	; (80035a8 <HAL_RCC_ClockConfig+0x1c0>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	429a      	cmp	r2, r3
 8003514:	d210      	bcs.n	8003538 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003516:	4b24      	ldr	r3, [pc, #144]	; (80035a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f023 0207 	bic.w	r2, r3, #7
 800351e:	4922      	ldr	r1, [pc, #136]	; (80035a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	4313      	orrs	r3, r2
 8003524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003526:	4b20      	ldr	r3, [pc, #128]	; (80035a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d001      	beq.n	8003538 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e032      	b.n	800359e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b00      	cmp	r3, #0
 8003542:	d008      	beq.n	8003556 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003544:	4b19      	ldr	r3, [pc, #100]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	4916      	ldr	r1, [pc, #88]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 8003552:	4313      	orrs	r3, r2
 8003554:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d009      	beq.n	8003576 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003562:	4b12      	ldr	r3, [pc, #72]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	490e      	ldr	r1, [pc, #56]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 8003572:	4313      	orrs	r3, r2
 8003574:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003576:	f000 f821 	bl	80035bc <HAL_RCC_GetSysClockFreq>
 800357a:	4602      	mov	r2, r0
 800357c:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	091b      	lsrs	r3, r3, #4
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	490a      	ldr	r1, [pc, #40]	; (80035b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003588:	5ccb      	ldrb	r3, [r1, r3]
 800358a:	fa22 f303 	lsr.w	r3, r2, r3
 800358e:	4a09      	ldr	r2, [pc, #36]	; (80035b4 <HAL_RCC_ClockConfig+0x1cc>)
 8003590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003592:	4b09      	ldr	r3, [pc, #36]	; (80035b8 <HAL_RCC_ClockConfig+0x1d0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f7fd f872 	bl	8000680 <HAL_InitTick>

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40022000 	.word	0x40022000
 80035ac:	40021000 	.word	0x40021000
 80035b0:	08007a6c 	.word	0x08007a6c
 80035b4:	20000000 	.word	0x20000000
 80035b8:	20000004 	.word	0x20000004

080035bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035bc:	b490      	push	{r4, r7}
 80035be:	b08a      	sub	sp, #40	; 0x28
 80035c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80035c2:	4b2a      	ldr	r3, [pc, #168]	; (800366c <HAL_RCC_GetSysClockFreq+0xb0>)
 80035c4:	1d3c      	adds	r4, r7, #4
 80035c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80035cc:	f240 2301 	movw	r3, #513	; 0x201
 80035d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035d2:	2300      	movs	r3, #0
 80035d4:	61fb      	str	r3, [r7, #28]
 80035d6:	2300      	movs	r3, #0
 80035d8:	61bb      	str	r3, [r7, #24]
 80035da:	2300      	movs	r3, #0
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
 80035de:	2300      	movs	r3, #0
 80035e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035e6:	4b22      	ldr	r3, [pc, #136]	; (8003670 <HAL_RCC_GetSysClockFreq+0xb4>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f003 030c 	and.w	r3, r3, #12
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	d002      	beq.n	80035fc <HAL_RCC_GetSysClockFreq+0x40>
 80035f6:	2b08      	cmp	r3, #8
 80035f8:	d003      	beq.n	8003602 <HAL_RCC_GetSysClockFreq+0x46>
 80035fa:	e02d      	b.n	8003658 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035fc:	4b1d      	ldr	r3, [pc, #116]	; (8003674 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035fe:	623b      	str	r3, [r7, #32]
      break;
 8003600:	e02d      	b.n	800365e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	0c9b      	lsrs	r3, r3, #18
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800360e:	4413      	add	r3, r2
 8003610:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003614:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d013      	beq.n	8003648 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003620:	4b13      	ldr	r3, [pc, #76]	; (8003670 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	0c5b      	lsrs	r3, r3, #17
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800362e:	4413      	add	r3, r2
 8003630:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003634:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	4a0e      	ldr	r2, [pc, #56]	; (8003674 <HAL_RCC_GetSysClockFreq+0xb8>)
 800363a:	fb02 f203 	mul.w	r2, r2, r3
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	fbb2 f3f3 	udiv	r3, r2, r3
 8003644:	627b      	str	r3, [r7, #36]	; 0x24
 8003646:	e004      	b.n	8003652 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	4a0b      	ldr	r2, [pc, #44]	; (8003678 <HAL_RCC_GetSysClockFreq+0xbc>)
 800364c:	fb02 f303 	mul.w	r3, r2, r3
 8003650:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	623b      	str	r3, [r7, #32]
      break;
 8003656:	e002      	b.n	800365e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003658:	4b06      	ldr	r3, [pc, #24]	; (8003674 <HAL_RCC_GetSysClockFreq+0xb8>)
 800365a:	623b      	str	r3, [r7, #32]
      break;
 800365c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800365e:	6a3b      	ldr	r3, [r7, #32]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3728      	adds	r7, #40	; 0x28
 8003664:	46bd      	mov	sp, r7
 8003666:	bc90      	pop	{r4, r7}
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	08007a14 	.word	0x08007a14
 8003670:	40021000 	.word	0x40021000
 8003674:	007a1200 	.word	0x007a1200
 8003678:	003d0900 	.word	0x003d0900

0800367c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003684:	4b0a      	ldr	r3, [pc, #40]	; (80036b0 <RCC_Delay+0x34>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a0a      	ldr	r2, [pc, #40]	; (80036b4 <RCC_Delay+0x38>)
 800368a:	fba2 2303 	umull	r2, r3, r2, r3
 800368e:	0a5b      	lsrs	r3, r3, #9
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	fb02 f303 	mul.w	r3, r2, r3
 8003696:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003698:	bf00      	nop
  }
  while (Delay --);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	1e5a      	subs	r2, r3, #1
 800369e:	60fa      	str	r2, [r7, #12]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1f9      	bne.n	8003698 <RCC_Delay+0x1c>
}
 80036a4:	bf00      	nop
 80036a6:	bf00      	nop
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bc80      	pop	{r7}
 80036ae:	4770      	bx	lr
 80036b0:	20000000 	.word	0x20000000
 80036b4:	10624dd3 	.word	0x10624dd3

080036b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	613b      	str	r3, [r7, #16]
 80036c4:	2300      	movs	r3, #0
 80036c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d07d      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80036d4:	2300      	movs	r3, #0
 80036d6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036d8:	4b4f      	ldr	r3, [pc, #316]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10d      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036e4:	4b4c      	ldr	r3, [pc, #304]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	4a4b      	ldr	r2, [pc, #300]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ee:	61d3      	str	r3, [r2, #28]
 80036f0:	4b49      	ldr	r3, [pc, #292]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036fc:	2301      	movs	r3, #1
 80036fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003700:	4b46      	ldr	r3, [pc, #280]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003708:	2b00      	cmp	r3, #0
 800370a:	d118      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800370c:	4b43      	ldr	r3, [pc, #268]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a42      	ldr	r2, [pc, #264]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003716:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003718:	f7fc fff4 	bl	8000704 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800371e:	e008      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003720:	f7fc fff0 	bl	8000704 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b64      	cmp	r3, #100	; 0x64
 800372c:	d901      	bls.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e06d      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003732:	4b3a      	ldr	r3, [pc, #232]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0f0      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800373e:	4b36      	ldr	r3, [pc, #216]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003746:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d02e      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	429a      	cmp	r2, r3
 800375a:	d027      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800375c:	4b2e      	ldr	r3, [pc, #184]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003764:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003766:	4b2e      	ldr	r3, [pc, #184]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003768:	2201      	movs	r2, #1
 800376a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800376c:	4b2c      	ldr	r3, [pc, #176]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003772:	4a29      	ldr	r2, [pc, #164]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d014      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003782:	f7fc ffbf 	bl	8000704 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003788:	e00a      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800378a:	f7fc ffbb 	bl	8000704 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	f241 3288 	movw	r2, #5000	; 0x1388
 8003798:	4293      	cmp	r3, r2
 800379a:	d901      	bls.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e036      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a0:	4b1d      	ldr	r3, [pc, #116]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0ee      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037ac:	4b1a      	ldr	r3, [pc, #104]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	4917      	ldr	r1, [pc, #92]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037be:	7dfb      	ldrb	r3, [r7, #23]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d105      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037c4:	4b14      	ldr	r3, [pc, #80]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c6:	69db      	ldr	r3, [r3, #28]
 80037c8:	4a13      	ldr	r2, [pc, #76]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d008      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037dc:	4b0e      	ldr	r3, [pc, #56]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	490b      	ldr	r1, [pc, #44]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0310 	and.w	r3, r3, #16
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d008      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037fa:	4b07      	ldr	r3, [pc, #28]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	4904      	ldr	r1, [pc, #16]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003808:	4313      	orrs	r3, r2
 800380a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40021000 	.word	0x40021000
 800381c:	40007000 	.word	0x40007000
 8003820:	42420440 	.word	0x42420440

08003824 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003824:	b084      	sub	sp, #16
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	f107 0014 	add.w	r0, r7, #20
 8003832:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	bc80      	pop	{r7}
 8003840:	b004      	add	sp, #16
 8003842:	4770      	bx	lr

08003844 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003854:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003858:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	b29a      	uxth	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	bc80      	pop	{r7}
 800386e:	4770      	bx	lr

08003870 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003878:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800387c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	b29b      	uxth	r3, r3
 800388a:	43db      	mvns	r3, r3
 800388c:	b29b      	uxth	r3, r3
 800388e:	4013      	ands	r3, r2
 8003890:	b29a      	uxth	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	bc80      	pop	{r7}
 80038a2:	4770      	bx	lr

080038a4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr

080038bc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80038bc:	b084      	sub	sp, #16
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
 80038c6:	f107 0014 	add.w	r0, r7, #20
 80038ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	b004      	add	sp, #16
 80038fa:	4770      	bx	lr

080038fc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b09b      	sub	sp, #108	; 0x6c
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	881b      	ldrh	r3, [r3, #0]
 8003918:	b29b      	uxth	r3, r3
 800391a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800391e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003922:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	78db      	ldrb	r3, [r3, #3]
 800392a:	2b03      	cmp	r3, #3
 800392c:	d81f      	bhi.n	800396e <USB_ActivateEndpoint+0x72>
 800392e:	a201      	add	r2, pc, #4	; (adr r2, 8003934 <USB_ActivateEndpoint+0x38>)
 8003930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003934:	08003945 	.word	0x08003945
 8003938:	08003961 	.word	0x08003961
 800393c:	08003977 	.word	0x08003977
 8003940:	08003953 	.word	0x08003953
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003944:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003948:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800394c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003950:	e012      	b.n	8003978 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003952:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003956:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800395a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800395e:	e00b      	b.n	8003978 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003960:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003964:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003968:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800396c:	e004      	b.n	8003978 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003974:	e000      	b.n	8003978 <USB_ActivateEndpoint+0x7c>
      break;
 8003976:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	441a      	add	r2, r3
 8003982:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003986:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800398a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800398e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003996:	b29b      	uxth	r3, r3
 8003998:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	4413      	add	r3, r2
 80039a4:	881b      	ldrh	r3, [r3, #0]
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	441a      	add	r2, r3
 80039c8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80039cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039dc:	b29b      	uxth	r3, r3
 80039de:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	7b1b      	ldrb	r3, [r3, #12]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f040 8149 	bne.w	8003c7c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	785b      	ldrb	r3, [r3, #1]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 8084 	beq.w	8003afc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	461a      	mov	r2, r3
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	4413      	add	r3, r2
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	011a      	lsls	r2, r3, #4
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	4413      	add	r3, r2
 8003a12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a16:	613b      	str	r3, [r7, #16]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	88db      	ldrh	r3, [r3, #6]
 8003a1c:	085b      	lsrs	r3, r3, #1
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	881b      	ldrh	r3, [r3, #0]
 8003a34:	81fb      	strh	r3, [r7, #14]
 8003a36:	89fb      	ldrh	r3, [r7, #14]
 8003a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d01b      	beq.n	8003a78 <USB_ActivateEndpoint+0x17c>
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	881b      	ldrh	r3, [r3, #0]
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a56:	81bb      	strh	r3, [r7, #12]
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	441a      	add	r2, r3
 8003a62:	89bb      	ldrh	r3, [r7, #12]
 8003a64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	78db      	ldrb	r3, [r3, #3]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d020      	beq.n	8003ac2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	881b      	ldrh	r3, [r3, #0]
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a96:	813b      	strh	r3, [r7, #8]
 8003a98:	893b      	ldrh	r3, [r7, #8]
 8003a9a:	f083 0320 	eor.w	r3, r3, #32
 8003a9e:	813b      	strh	r3, [r7, #8]
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	441a      	add	r2, r3
 8003aaa:	893b      	ldrh	r3, [r7, #8]
 8003aac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	8013      	strh	r3, [r2, #0]
 8003ac0:	e27f      	b.n	8003fc2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	881b      	ldrh	r3, [r3, #0]
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ad4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ad8:	817b      	strh	r3, [r7, #10]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	441a      	add	r2, r3
 8003ae4:	897b      	ldrh	r3, [r7, #10]
 8003ae6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003aea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	8013      	strh	r3, [r2, #0]
 8003afa:	e262      	b.n	8003fc2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	461a      	mov	r2, r3
 8003b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0c:	4413      	add	r3, r2
 8003b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	011a      	lsls	r2, r3, #4
 8003b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003b1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	88db      	ldrh	r3, [r3, #6]
 8003b24:	085b      	lsrs	r3, r3, #1
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	627b      	str	r3, [r7, #36]	; 0x24
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b40:	4413      	add	r3, r2
 8003b42:	627b      	str	r3, [r7, #36]	; 0x24
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	011a      	lsls	r2, r3, #4
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b52:	623b      	str	r3, [r7, #32]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d112      	bne.n	8003b82 <USB_ActivateEndpoint+0x286>
 8003b5c:	6a3b      	ldr	r3, [r7, #32]
 8003b5e:	881b      	ldrh	r3, [r3, #0]
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	801a      	strh	r2, [r3, #0]
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	881b      	ldrh	r3, [r3, #0]
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	801a      	strh	r2, [r3, #0]
 8003b80:	e02f      	b.n	8003be2 <USB_ActivateEndpoint+0x2e6>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	2b3e      	cmp	r3, #62	; 0x3e
 8003b88:	d813      	bhi.n	8003bb2 <USB_ActivateEndpoint+0x2b6>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	085b      	lsrs	r3, r3, #1
 8003b90:	663b      	str	r3, [r7, #96]	; 0x60
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d002      	beq.n	8003ba4 <USB_ActivateEndpoint+0x2a8>
 8003b9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	663b      	str	r3, [r7, #96]	; 0x60
 8003ba4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	029b      	lsls	r3, r3, #10
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	801a      	strh	r2, [r3, #0]
 8003bb0:	e017      	b.n	8003be2 <USB_ActivateEndpoint+0x2e6>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	095b      	lsrs	r3, r3, #5
 8003bb8:	663b      	str	r3, [r7, #96]	; 0x60
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f003 031f 	and.w	r3, r3, #31
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d102      	bne.n	8003bcc <USB_ActivateEndpoint+0x2d0>
 8003bc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	663b      	str	r3, [r7, #96]	; 0x60
 8003bcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	029b      	lsls	r3, r3, #10
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	6a3b      	ldr	r3, [r7, #32]
 8003be0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	83fb      	strh	r3, [r7, #30]
 8003bf0:	8bfb      	ldrh	r3, [r7, #30]
 8003bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d01b      	beq.n	8003c32 <USB_ActivateEndpoint+0x336>
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4413      	add	r3, r2
 8003c04:	881b      	ldrh	r3, [r3, #0]
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c10:	83bb      	strh	r3, [r7, #28]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	441a      	add	r2, r3
 8003c1c:	8bbb      	ldrh	r3, [r7, #28]
 8003c1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	4413      	add	r3, r2
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c48:	837b      	strh	r3, [r7, #26]
 8003c4a:	8b7b      	ldrh	r3, [r7, #26]
 8003c4c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003c50:	837b      	strh	r3, [r7, #26]
 8003c52:	8b7b      	ldrh	r3, [r7, #26]
 8003c54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c58:	837b      	strh	r3, [r7, #26]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	441a      	add	r2, r3
 8003c64:	8b7b      	ldrh	r3, [r7, #26]
 8003c66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	8013      	strh	r3, [r2, #0]
 8003c7a:	e1a2      	b.n	8003fc2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	881b      	ldrh	r3, [r3, #0]
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c92:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	441a      	add	r2, r3
 8003ca0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003ca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cac:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cc8:	4413      	add	r3, r2
 8003cca:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	011a      	lsls	r2, r3, #4
 8003cd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cda:	657b      	str	r3, [r7, #84]	; 0x54
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	891b      	ldrh	r3, [r3, #8]
 8003ce0:	085b      	lsrs	r3, r3, #1
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cea:	801a      	strh	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	653b      	str	r3, [r7, #80]	; 0x50
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cfc:	4413      	add	r3, r2
 8003cfe:	653b      	str	r3, [r7, #80]	; 0x50
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	011a      	lsls	r2, r3, #4
 8003d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d08:	4413      	add	r3, r2
 8003d0a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	895b      	ldrh	r3, [r3, #10]
 8003d14:	085b      	lsrs	r3, r3, #1
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d1e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	785b      	ldrb	r3, [r3, #1]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f040 8091 	bne.w	8003e4c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003d38:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d01b      	beq.n	8003d7a <USB_ActivateEndpoint+0x47e>
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4413      	add	r3, r2
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d58:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	441a      	add	r2, r3
 8003d64:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003d66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	881b      	ldrh	r3, [r3, #0]
 8003d86:	873b      	strh	r3, [r7, #56]	; 0x38
 8003d88:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d01b      	beq.n	8003dca <USB_ActivateEndpoint+0x4ce>
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	881b      	ldrh	r3, [r3, #0]
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	441a      	add	r2, r3
 8003db4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003db6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dc2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003de2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003de4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003de8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003dea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003dec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003df0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	441a      	add	r2, r3
 8003dfc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003dfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4413      	add	r3, r2
 8003e1c:	881b      	ldrh	r3, [r3, #0]
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e28:	867b      	strh	r3, [r7, #50]	; 0x32
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	441a      	add	r2, r3
 8003e34:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003e36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	8013      	strh	r3, [r2, #0]
 8003e4a:	e0ba      	b.n	8003fc2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003e5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003e60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d01d      	beq.n	8003ea4 <USB_ActivateEndpoint+0x5a8>
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e7e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	441a      	add	r2, r3
 8003e8c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003e90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4413      	add	r3, r2
 8003eae:	881b      	ldrh	r3, [r3, #0]
 8003eb0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003eb4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d01d      	beq.n	8003efc <USB_ActivateEndpoint+0x600>
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4413      	add	r3, r2
 8003eca:	881b      	ldrh	r3, [r3, #0]
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	441a      	add	r2, r3
 8003ee4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003ee8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ef0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ef4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	78db      	ldrb	r3, [r3, #3]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d024      	beq.n	8003f4e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f1a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003f1e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003f22:	f083 0320 	eor.w	r3, r3, #32
 8003f26:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	441a      	add	r2, r3
 8003f34:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003f38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	8013      	strh	r3, [r2, #0]
 8003f4c:	e01d      	b.n	8003f8a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	881b      	ldrh	r3, [r3, #0]
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f64:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	441a      	add	r2, r3
 8003f72:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003f76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4413      	add	r3, r2
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fa0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	441a      	add	r2, r3
 8003fac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003fae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003fc2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	376c      	adds	r7, #108	; 0x6c
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr

08003fd0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b08d      	sub	sp, #52	; 0x34
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	7b1b      	ldrb	r3, [r3, #12]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f040 808e 	bne.w	8004100 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	785b      	ldrb	r3, [r3, #1]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d044      	beq.n	8004076 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	81bb      	strh	r3, [r7, #12]
 8003ffa:	89bb      	ldrh	r3, [r7, #12]
 8003ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004000:	2b00      	cmp	r3, #0
 8004002:	d01b      	beq.n	800403c <USB_DeactivateEndpoint+0x6c>
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4413      	add	r3, r2
 800400e:	881b      	ldrh	r3, [r3, #0]
 8004010:	b29b      	uxth	r3, r3
 8004012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800401a:	817b      	strh	r3, [r7, #10]
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	441a      	add	r2, r3
 8004026:	897b      	ldrh	r3, [r7, #10]
 8004028:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800402c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004034:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004038:	b29b      	uxth	r3, r3
 800403a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4413      	add	r3, r2
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	b29b      	uxth	r3, r3
 800404a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800404e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004052:	813b      	strh	r3, [r7, #8]
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	441a      	add	r2, r3
 800405e:	893b      	ldrh	r3, [r7, #8]
 8004060:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004064:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800406c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004070:	b29b      	uxth	r3, r3
 8004072:	8013      	strh	r3, [r2, #0]
 8004074:	e192      	b.n	800439c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	881b      	ldrh	r3, [r3, #0]
 8004082:	827b      	strh	r3, [r7, #18]
 8004084:	8a7b      	ldrh	r3, [r7, #18]
 8004086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d01b      	beq.n	80040c6 <USB_DeactivateEndpoint+0xf6>
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4413      	add	r3, r2
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	b29b      	uxth	r3, r3
 800409c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a4:	823b      	strh	r3, [r7, #16]
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	441a      	add	r2, r3
 80040b0:	8a3b      	ldrh	r3, [r7, #16]
 80040b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4413      	add	r3, r2
 80040d0:	881b      	ldrh	r3, [r3, #0]
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040dc:	81fb      	strh	r3, [r7, #14]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	441a      	add	r2, r3
 80040e8:	89fb      	ldrh	r3, [r7, #14]
 80040ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	8013      	strh	r3, [r2, #0]
 80040fe:	e14d      	b.n	800439c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	785b      	ldrb	r3, [r3, #1]
 8004104:	2b00      	cmp	r3, #0
 8004106:	f040 80a5 	bne.w	8004254 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	881b      	ldrh	r3, [r3, #0]
 8004116:	843b      	strh	r3, [r7, #32]
 8004118:	8c3b      	ldrh	r3, [r7, #32]
 800411a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d01b      	beq.n	800415a <USB_DeactivateEndpoint+0x18a>
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4413      	add	r3, r2
 800412c:	881b      	ldrh	r3, [r3, #0]
 800412e:	b29b      	uxth	r3, r3
 8004130:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004138:	83fb      	strh	r3, [r7, #30]
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	441a      	add	r2, r3
 8004144:	8bfb      	ldrh	r3, [r7, #30]
 8004146:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800414a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800414e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004156:	b29b      	uxth	r3, r3
 8004158:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4413      	add	r3, r2
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	83bb      	strh	r3, [r7, #28]
 8004168:	8bbb      	ldrh	r3, [r7, #28]
 800416a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416e:	2b00      	cmp	r3, #0
 8004170:	d01b      	beq.n	80041aa <USB_DeactivateEndpoint+0x1da>
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4413      	add	r3, r2
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	b29b      	uxth	r3, r3
 8004180:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004188:	837b      	strh	r3, [r7, #26]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	441a      	add	r2, r3
 8004194:	8b7b      	ldrh	r3, [r7, #26]
 8004196:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800419a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800419e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c0:	833b      	strh	r3, [r7, #24]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	441a      	add	r2, r3
 80041cc:	8b3b      	ldrh	r3, [r7, #24]
 80041ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041de:	b29b      	uxth	r3, r3
 80041e0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f8:	82fb      	strh	r3, [r7, #22]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	441a      	add	r2, r3
 8004204:	8afb      	ldrh	r3, [r7, #22]
 8004206:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800420a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800420e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004216:	b29b      	uxth	r3, r3
 8004218:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	b29b      	uxth	r3, r3
 8004228:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800422c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004230:	82bb      	strh	r3, [r7, #20]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	441a      	add	r2, r3
 800423c:	8abb      	ldrh	r3, [r7, #20]
 800423e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004242:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004246:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800424a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800424e:	b29b      	uxth	r3, r3
 8004250:	8013      	strh	r3, [r2, #0]
 8004252:	e0a3      	b.n	800439c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4413      	add	r3, r2
 800425e:	881b      	ldrh	r3, [r3, #0]
 8004260:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004262:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d01b      	beq.n	80042a4 <USB_DeactivateEndpoint+0x2d4>
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	881b      	ldrh	r3, [r3, #0]
 8004278:	b29b      	uxth	r3, r3
 800427a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800427e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004282:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	441a      	add	r2, r3
 800428e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004290:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004294:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004298:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800429c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	881b      	ldrh	r3, [r3, #0]
 80042b0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80042b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80042b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d01b      	beq.n	80042f4 <USB_DeactivateEndpoint+0x324>
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	881b      	ldrh	r3, [r3, #0]
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d2:	853b      	strh	r3, [r7, #40]	; 0x28
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	441a      	add	r2, r3
 80042de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80042e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	881b      	ldrh	r3, [r3, #0]
 8004300:	b29b      	uxth	r3, r3
 8004302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	441a      	add	r2, r3
 8004316:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004318:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800431c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004320:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004328:	b29b      	uxth	r3, r3
 800432a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	b29b      	uxth	r3, r3
 800433a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800433e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004342:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	441a      	add	r2, r3
 800434e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004354:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800435c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004360:	b29b      	uxth	r3, r3
 8004362:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	b29b      	uxth	r3, r3
 8004372:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437a:	847b      	strh	r3, [r7, #34]	; 0x22
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	441a      	add	r2, r3
 8004386:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004388:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800438c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004390:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004398:	b29b      	uxth	r3, r3
 800439a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3734      	adds	r7, #52	; 0x34
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bc80      	pop	{r7}
 80043a6:	4770      	bx	lr

080043a8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b0c4      	sub	sp, #272	; 0x110
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	1d3b      	adds	r3, r7, #4
 80043b0:	6018      	str	r0, [r3, #0]
 80043b2:	463b      	mov	r3, r7
 80043b4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043b6:	463b      	mov	r3, r7
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	785b      	ldrb	r3, [r3, #1]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	f040 8557 	bne.w	8004e70 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80043c2:	463b      	mov	r3, r7
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	699a      	ldr	r2, [r3, #24]
 80043c8:	463b      	mov	r3, r7
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d905      	bls.n	80043de <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80043d2:	463b      	mov	r3, r7
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80043dc:	e004      	b.n	80043e8 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80043de:	463b      	mov	r3, r7
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80043e8:	463b      	mov	r3, r7
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	7b1b      	ldrb	r3, [r3, #12]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d12c      	bne.n	800444c <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80043f2:	463b      	mov	r3, r7
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	6959      	ldr	r1, [r3, #20]
 80043f8:	463b      	mov	r3, r7
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	88da      	ldrh	r2, [r3, #6]
 80043fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004402:	b29b      	uxth	r3, r3
 8004404:	1d38      	adds	r0, r7, #4
 8004406:	6800      	ldr	r0, [r0, #0]
 8004408:	f001 fa2c 	bl	8005864 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800440c:	1d3b      	adds	r3, r7, #4
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	1d3b      	adds	r3, r7, #4
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800441a:	b29b      	uxth	r3, r3
 800441c:	461a      	mov	r2, r3
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	4413      	add	r3, r2
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	463b      	mov	r3, r7
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	011a      	lsls	r2, r3, #4
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	4413      	add	r3, r2
 8004430:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004434:	f107 0310 	add.w	r3, r7, #16
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800443e:	b29a      	uxth	r2, r3
 8004440:	f107 0310 	add.w	r3, r7, #16
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	801a      	strh	r2, [r3, #0]
 8004448:	f000 bcdd 	b.w	8004e06 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800444c:	463b      	mov	r3, r7
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	78db      	ldrb	r3, [r3, #3]
 8004452:	2b02      	cmp	r3, #2
 8004454:	f040 8347 	bne.w	8004ae6 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004458:	463b      	mov	r3, r7
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6a1a      	ldr	r2, [r3, #32]
 800445e:	463b      	mov	r3, r7
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	429a      	cmp	r2, r3
 8004466:	f240 82eb 	bls.w	8004a40 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800446a:	1d3b      	adds	r3, r7, #4
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	463b      	mov	r3, r7
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	881b      	ldrh	r3, [r3, #0]
 800447a:	b29b      	uxth	r3, r3
 800447c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004484:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004488:	1d3b      	adds	r3, r7, #4
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	463b      	mov	r3, r7
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	441a      	add	r2, r3
 8004496:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800449a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800449e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044a2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80044a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80044ae:	463b      	mov	r3, r7
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6a1a      	ldr	r2, [r3, #32]
 80044b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044b8:	1ad2      	subs	r2, r2, r3
 80044ba:	463b      	mov	r3, r7
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80044c0:	1d3b      	adds	r3, r7, #4
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	463b      	mov	r3, r7
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4413      	add	r3, r2
 80044ce:	881b      	ldrh	r3, [r3, #0]
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 8159 	beq.w	800478e <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80044dc:	1d3b      	adds	r3, r7, #4
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	637b      	str	r3, [r7, #52]	; 0x34
 80044e2:	463b      	mov	r3, r7
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	785b      	ldrb	r3, [r3, #1]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d164      	bne.n	80045b6 <USB_EPStartXfer+0x20e>
 80044ec:	1d3b      	adds	r3, r7, #4
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044f2:	1d3b      	adds	r3, r7, #4
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	461a      	mov	r2, r3
 80044fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004500:	4413      	add	r3, r2
 8004502:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004504:	463b      	mov	r3, r7
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	011a      	lsls	r2, r3, #4
 800450c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450e:	4413      	add	r3, r2
 8004510:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004514:	62bb      	str	r3, [r7, #40]	; 0x28
 8004516:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800451a:	2b00      	cmp	r3, #0
 800451c:	d112      	bne.n	8004544 <USB_EPStartXfer+0x19c>
 800451e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004520:	881b      	ldrh	r3, [r3, #0]
 8004522:	b29b      	uxth	r3, r3
 8004524:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004528:	b29a      	uxth	r2, r3
 800452a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452c:	801a      	strh	r2, [r3, #0]
 800452e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004530:	881b      	ldrh	r3, [r3, #0]
 8004532:	b29b      	uxth	r3, r3
 8004534:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004538:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800453c:	b29a      	uxth	r2, r3
 800453e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004540:	801a      	strh	r2, [r3, #0]
 8004542:	e054      	b.n	80045ee <USB_EPStartXfer+0x246>
 8004544:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004548:	2b3e      	cmp	r3, #62	; 0x3e
 800454a:	d817      	bhi.n	800457c <USB_EPStartXfer+0x1d4>
 800454c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004550:	085b      	lsrs	r3, r3, #1
 8004552:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004556:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d004      	beq.n	800456c <USB_EPStartXfer+0x1c4>
 8004562:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004566:	3301      	adds	r3, #1
 8004568:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800456c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004570:	b29b      	uxth	r3, r3
 8004572:	029b      	lsls	r3, r3, #10
 8004574:	b29a      	uxth	r2, r3
 8004576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004578:	801a      	strh	r2, [r3, #0]
 800457a:	e038      	b.n	80045ee <USB_EPStartXfer+0x246>
 800457c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004580:	095b      	lsrs	r3, r3, #5
 8004582:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004586:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800458a:	f003 031f 	and.w	r3, r3, #31
 800458e:	2b00      	cmp	r3, #0
 8004590:	d104      	bne.n	800459c <USB_EPStartXfer+0x1f4>
 8004592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004596:	3b01      	subs	r3, #1
 8004598:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800459c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	029b      	lsls	r3, r3, #10
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b2:	801a      	strh	r2, [r3, #0]
 80045b4:	e01b      	b.n	80045ee <USB_EPStartXfer+0x246>
 80045b6:	463b      	mov	r3, r7
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	785b      	ldrb	r3, [r3, #1]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d116      	bne.n	80045ee <USB_EPStartXfer+0x246>
 80045c0:	1d3b      	adds	r3, r7, #4
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	461a      	mov	r2, r3
 80045cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ce:	4413      	add	r3, r2
 80045d0:	637b      	str	r3, [r7, #52]	; 0x34
 80045d2:	463b      	mov	r3, r7
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	011a      	lsls	r2, r3, #4
 80045da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045dc:	4413      	add	r3, r2
 80045de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045e2:	633b      	str	r3, [r7, #48]	; 0x30
 80045e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80045ee:	463b      	mov	r3, r7
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	895b      	ldrh	r3, [r3, #10]
 80045f4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80045f8:	463b      	mov	r3, r7
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6959      	ldr	r1, [r3, #20]
 80045fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004602:	b29b      	uxth	r3, r3
 8004604:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004608:	1d38      	adds	r0, r7, #4
 800460a:	6800      	ldr	r0, [r0, #0]
 800460c:	f001 f92a 	bl	8005864 <USB_WritePMA>
            ep->xfer_buff += len;
 8004610:	463b      	mov	r3, r7
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	695a      	ldr	r2, [r3, #20]
 8004616:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800461a:	441a      	add	r2, r3
 800461c:	463b      	mov	r3, r7
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004622:	463b      	mov	r3, r7
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6a1a      	ldr	r2, [r3, #32]
 8004628:	463b      	mov	r3, r7
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	429a      	cmp	r2, r3
 8004630:	d909      	bls.n	8004646 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8004632:	463b      	mov	r3, r7
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6a1a      	ldr	r2, [r3, #32]
 8004638:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800463c:	1ad2      	subs	r2, r2, r3
 800463e:	463b      	mov	r3, r7
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	621a      	str	r2, [r3, #32]
 8004644:	e008      	b.n	8004658 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8004646:	463b      	mov	r3, r7
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004650:	463b      	mov	r3, r7
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2200      	movs	r2, #0
 8004656:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004658:	463b      	mov	r3, r7
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	785b      	ldrb	r3, [r3, #1]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d164      	bne.n	800472c <USB_EPStartXfer+0x384>
 8004662:	1d3b      	adds	r3, r7, #4
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	61fb      	str	r3, [r7, #28]
 8004668:	1d3b      	adds	r3, r7, #4
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004670:	b29b      	uxth	r3, r3
 8004672:	461a      	mov	r2, r3
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	4413      	add	r3, r2
 8004678:	61fb      	str	r3, [r7, #28]
 800467a:	463b      	mov	r3, r7
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	011a      	lsls	r2, r3, #4
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	4413      	add	r3, r2
 8004686:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800468a:	61bb      	str	r3, [r7, #24]
 800468c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004690:	2b00      	cmp	r3, #0
 8004692:	d112      	bne.n	80046ba <USB_EPStartXfer+0x312>
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	881b      	ldrh	r3, [r3, #0]
 8004698:	b29b      	uxth	r3, r3
 800469a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800469e:	b29a      	uxth	r2, r3
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	801a      	strh	r2, [r3, #0]
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	881b      	ldrh	r3, [r3, #0]
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	801a      	strh	r2, [r3, #0]
 80046b8:	e057      	b.n	800476a <USB_EPStartXfer+0x3c2>
 80046ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046be:	2b3e      	cmp	r3, #62	; 0x3e
 80046c0:	d817      	bhi.n	80046f2 <USB_EPStartXfer+0x34a>
 80046c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046c6:	085b      	lsrs	r3, r3, #1
 80046c8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80046cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d004      	beq.n	80046e2 <USB_EPStartXfer+0x33a>
 80046d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80046dc:	3301      	adds	r3, #1
 80046de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80046e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	029b      	lsls	r3, r3, #10
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	801a      	strh	r2, [r3, #0]
 80046f0:	e03b      	b.n	800476a <USB_EPStartXfer+0x3c2>
 80046f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046f6:	095b      	lsrs	r3, r3, #5
 80046f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80046fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004700:	f003 031f 	and.w	r3, r3, #31
 8004704:	2b00      	cmp	r3, #0
 8004706:	d104      	bne.n	8004712 <USB_EPStartXfer+0x36a>
 8004708:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800470c:	3b01      	subs	r3, #1
 800470e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004712:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004716:	b29b      	uxth	r3, r3
 8004718:	029b      	lsls	r3, r3, #10
 800471a:	b29b      	uxth	r3, r3
 800471c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004720:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004724:	b29a      	uxth	r2, r3
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	801a      	strh	r2, [r3, #0]
 800472a:	e01e      	b.n	800476a <USB_EPStartXfer+0x3c2>
 800472c:	463b      	mov	r3, r7
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	785b      	ldrb	r3, [r3, #1]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d119      	bne.n	800476a <USB_EPStartXfer+0x3c2>
 8004736:	1d3b      	adds	r3, r7, #4
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	627b      	str	r3, [r7, #36]	; 0x24
 800473c:	1d3b      	adds	r3, r7, #4
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004744:	b29b      	uxth	r3, r3
 8004746:	461a      	mov	r2, r3
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	4413      	add	r3, r2
 800474c:	627b      	str	r3, [r7, #36]	; 0x24
 800474e:	463b      	mov	r3, r7
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	011a      	lsls	r2, r3, #4
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	4413      	add	r3, r2
 800475a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800475e:	623b      	str	r3, [r7, #32]
 8004760:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004764:	b29a      	uxth	r2, r3
 8004766:	6a3b      	ldr	r3, [r7, #32]
 8004768:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800476a:	463b      	mov	r3, r7
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	891b      	ldrh	r3, [r3, #8]
 8004770:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004774:	463b      	mov	r3, r7
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6959      	ldr	r1, [r3, #20]
 800477a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800477e:	b29b      	uxth	r3, r3
 8004780:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004784:	1d38      	adds	r0, r7, #4
 8004786:	6800      	ldr	r0, [r0, #0]
 8004788:	f001 f86c 	bl	8005864 <USB_WritePMA>
 800478c:	e33b      	b.n	8004e06 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800478e:	463b      	mov	r3, r7
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	785b      	ldrb	r3, [r3, #1]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d164      	bne.n	8004862 <USB_EPStartXfer+0x4ba>
 8004798:	1d3b      	adds	r3, r7, #4
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800479e:	1d3b      	adds	r3, r7, #4
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	461a      	mov	r2, r3
 80047aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ac:	4413      	add	r3, r2
 80047ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047b0:	463b      	mov	r3, r7
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	011a      	lsls	r2, r3, #4
 80047b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ba:	4413      	add	r3, r2
 80047bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80047c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d112      	bne.n	80047f0 <USB_EPStartXfer+0x448>
 80047ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047cc:	881b      	ldrh	r3, [r3, #0]
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047d8:	801a      	strh	r2, [r3, #0]
 80047da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047dc:	881b      	ldrh	r3, [r3, #0]
 80047de:	b29b      	uxth	r3, r3
 80047e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047ec:	801a      	strh	r2, [r3, #0]
 80047ee:	e057      	b.n	80048a0 <USB_EPStartXfer+0x4f8>
 80047f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047f4:	2b3e      	cmp	r3, #62	; 0x3e
 80047f6:	d817      	bhi.n	8004828 <USB_EPStartXfer+0x480>
 80047f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047fc:	085b      	lsrs	r3, r3, #1
 80047fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004802:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d004      	beq.n	8004818 <USB_EPStartXfer+0x470>
 800480e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004812:	3301      	adds	r3, #1
 8004814:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004818:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800481c:	b29b      	uxth	r3, r3
 800481e:	029b      	lsls	r3, r3, #10
 8004820:	b29a      	uxth	r2, r3
 8004822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004824:	801a      	strh	r2, [r3, #0]
 8004826:	e03b      	b.n	80048a0 <USB_EPStartXfer+0x4f8>
 8004828:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800482c:	095b      	lsrs	r3, r3, #5
 800482e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004832:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004836:	f003 031f 	and.w	r3, r3, #31
 800483a:	2b00      	cmp	r3, #0
 800483c:	d104      	bne.n	8004848 <USB_EPStartXfer+0x4a0>
 800483e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004842:	3b01      	subs	r3, #1
 8004844:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004848:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800484c:	b29b      	uxth	r3, r3
 800484e:	029b      	lsls	r3, r3, #10
 8004850:	b29b      	uxth	r3, r3
 8004852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800485a:	b29a      	uxth	r2, r3
 800485c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800485e:	801a      	strh	r2, [r3, #0]
 8004860:	e01e      	b.n	80048a0 <USB_EPStartXfer+0x4f8>
 8004862:	463b      	mov	r3, r7
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	785b      	ldrb	r3, [r3, #1]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d119      	bne.n	80048a0 <USB_EPStartXfer+0x4f8>
 800486c:	1d3b      	adds	r3, r7, #4
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	657b      	str	r3, [r7, #84]	; 0x54
 8004872:	1d3b      	adds	r3, r7, #4
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800487a:	b29b      	uxth	r3, r3
 800487c:	461a      	mov	r2, r3
 800487e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004880:	4413      	add	r3, r2
 8004882:	657b      	str	r3, [r7, #84]	; 0x54
 8004884:	463b      	mov	r3, r7
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	011a      	lsls	r2, r3, #4
 800488c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800488e:	4413      	add	r3, r2
 8004890:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004894:	653b      	str	r3, [r7, #80]	; 0x50
 8004896:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800489a:	b29a      	uxth	r2, r3
 800489c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800489e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80048a0:	463b      	mov	r3, r7
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	891b      	ldrh	r3, [r3, #8]
 80048a6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80048aa:	463b      	mov	r3, r7
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6959      	ldr	r1, [r3, #20]
 80048b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80048ba:	1d38      	adds	r0, r7, #4
 80048bc:	6800      	ldr	r0, [r0, #0]
 80048be:	f000 ffd1 	bl	8005864 <USB_WritePMA>
            ep->xfer_buff += len;
 80048c2:	463b      	mov	r3, r7
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	695a      	ldr	r2, [r3, #20]
 80048c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048cc:	441a      	add	r2, r3
 80048ce:	463b      	mov	r3, r7
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80048d4:	463b      	mov	r3, r7
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6a1a      	ldr	r2, [r3, #32]
 80048da:	463b      	mov	r3, r7
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d909      	bls.n	80048f8 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80048e4:	463b      	mov	r3, r7
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6a1a      	ldr	r2, [r3, #32]
 80048ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048ee:	1ad2      	subs	r2, r2, r3
 80048f0:	463b      	mov	r3, r7
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	621a      	str	r2, [r3, #32]
 80048f6:	e008      	b.n	800490a <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 80048f8:	463b      	mov	r3, r7
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004902:	463b      	mov	r3, r7
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2200      	movs	r2, #0
 8004908:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800490a:	1d3b      	adds	r3, r7, #4
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	647b      	str	r3, [r7, #68]	; 0x44
 8004910:	463b      	mov	r3, r7
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	785b      	ldrb	r3, [r3, #1]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d164      	bne.n	80049e4 <USB_EPStartXfer+0x63c>
 800491a:	1d3b      	adds	r3, r7, #4
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004920:	1d3b      	adds	r3, r7, #4
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004928:	b29b      	uxth	r3, r3
 800492a:	461a      	mov	r2, r3
 800492c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800492e:	4413      	add	r3, r2
 8004930:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004932:	463b      	mov	r3, r7
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	011a      	lsls	r2, r3, #4
 800493a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800493c:	4413      	add	r3, r2
 800493e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004942:	63bb      	str	r3, [r7, #56]	; 0x38
 8004944:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004948:	2b00      	cmp	r3, #0
 800494a:	d112      	bne.n	8004972 <USB_EPStartXfer+0x5ca>
 800494c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494e:	881b      	ldrh	r3, [r3, #0]
 8004950:	b29b      	uxth	r3, r3
 8004952:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004956:	b29a      	uxth	r2, r3
 8004958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495a:	801a      	strh	r2, [r3, #0]
 800495c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	b29b      	uxth	r3, r3
 8004962:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004966:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800496a:	b29a      	uxth	r2, r3
 800496c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800496e:	801a      	strh	r2, [r3, #0]
 8004970:	e054      	b.n	8004a1c <USB_EPStartXfer+0x674>
 8004972:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004976:	2b3e      	cmp	r3, #62	; 0x3e
 8004978:	d817      	bhi.n	80049aa <USB_EPStartXfer+0x602>
 800497a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800497e:	085b      	lsrs	r3, r3, #1
 8004980:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b00      	cmp	r3, #0
 800498e:	d004      	beq.n	800499a <USB_EPStartXfer+0x5f2>
 8004990:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004994:	3301      	adds	r3, #1
 8004996:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800499a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800499e:	b29b      	uxth	r3, r3
 80049a0:	029b      	lsls	r3, r3, #10
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a6:	801a      	strh	r2, [r3, #0]
 80049a8:	e038      	b.n	8004a1c <USB_EPStartXfer+0x674>
 80049aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049ae:	095b      	lsrs	r3, r3, #5
 80049b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80049b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049b8:	f003 031f 	and.w	r3, r3, #31
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d104      	bne.n	80049ca <USB_EPStartXfer+0x622>
 80049c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049c4:	3b01      	subs	r3, #1
 80049c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80049ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	029b      	lsls	r3, r3, #10
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049dc:	b29a      	uxth	r2, r3
 80049de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e0:	801a      	strh	r2, [r3, #0]
 80049e2:	e01b      	b.n	8004a1c <USB_EPStartXfer+0x674>
 80049e4:	463b      	mov	r3, r7
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	785b      	ldrb	r3, [r3, #1]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d116      	bne.n	8004a1c <USB_EPStartXfer+0x674>
 80049ee:	1d3b      	adds	r3, r7, #4
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	461a      	mov	r2, r3
 80049fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049fc:	4413      	add	r3, r2
 80049fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004a00:	463b      	mov	r3, r7
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	011a      	lsls	r2, r3, #4
 8004a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a10:	643b      	str	r3, [r7, #64]	; 0x40
 8004a12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a1a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004a1c:	463b      	mov	r3, r7
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	895b      	ldrh	r3, [r3, #10]
 8004a22:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a26:	463b      	mov	r3, r7
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6959      	ldr	r1, [r3, #20]
 8004a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004a36:	1d38      	adds	r0, r7, #4
 8004a38:	6800      	ldr	r0, [r0, #0]
 8004a3a:	f000 ff13 	bl	8005864 <USB_WritePMA>
 8004a3e:	e1e2      	b.n	8004e06 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004a40:	463b      	mov	r3, r7
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004a4a:	1d3b      	adds	r3, r7, #4
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	463b      	mov	r3, r7
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	881b      	ldrh	r3, [r3, #0]
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a64:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004a68:	1d3b      	adds	r3, r7, #4
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	463b      	mov	r3, r7
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	441a      	add	r2, r3
 8004a76:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004a8e:	1d3b      	adds	r3, r7, #4
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	663b      	str	r3, [r7, #96]	; 0x60
 8004a94:	1d3b      	adds	r3, r7, #4
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004aa2:	4413      	add	r3, r2
 8004aa4:	663b      	str	r3, [r7, #96]	; 0x60
 8004aa6:	463b      	mov	r3, r7
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	011a      	lsls	r2, r3, #4
 8004aae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ab6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ab8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ac0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004ac2:	463b      	mov	r3, r7
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	891b      	ldrh	r3, [r3, #8]
 8004ac8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004acc:	463b      	mov	r3, r7
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6959      	ldr	r1, [r3, #20]
 8004ad2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004adc:	1d38      	adds	r0, r7, #4
 8004ade:	6800      	ldr	r0, [r0, #0]
 8004ae0:	f000 fec0 	bl	8005864 <USB_WritePMA>
 8004ae4:	e18f      	b.n	8004e06 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004ae6:	1d3b      	adds	r3, r7, #4
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	463b      	mov	r3, r7
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	881b      	ldrh	r3, [r3, #0]
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 808f 	beq.w	8004c20 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004b02:	1d3b      	adds	r3, r7, #4
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b08:	463b      	mov	r3, r7
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	785b      	ldrb	r3, [r3, #1]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d164      	bne.n	8004bdc <USB_EPStartXfer+0x834>
 8004b12:	1d3b      	adds	r3, r7, #4
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	673b      	str	r3, [r7, #112]	; 0x70
 8004b18:	1d3b      	adds	r3, r7, #4
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	461a      	mov	r2, r3
 8004b24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b26:	4413      	add	r3, r2
 8004b28:	673b      	str	r3, [r7, #112]	; 0x70
 8004b2a:	463b      	mov	r3, r7
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	011a      	lsls	r2, r3, #4
 8004b32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b34:	4413      	add	r3, r2
 8004b36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d112      	bne.n	8004b6a <USB_EPStartXfer+0x7c2>
 8004b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b46:	881b      	ldrh	r3, [r3, #0]
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b52:	801a      	strh	r2, [r3, #0]
 8004b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b56:	881b      	ldrh	r3, [r3, #0]
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b66:	801a      	strh	r2, [r3, #0]
 8004b68:	e054      	b.n	8004c14 <USB_EPStartXfer+0x86c>
 8004b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b6e:	2b3e      	cmp	r3, #62	; 0x3e
 8004b70:	d817      	bhi.n	8004ba2 <USB_EPStartXfer+0x7fa>
 8004b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b76:	085b      	lsrs	r3, r3, #1
 8004b78:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004b7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d004      	beq.n	8004b92 <USB_EPStartXfer+0x7ea>
 8004b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	029b      	lsls	r3, r3, #10
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b9e:	801a      	strh	r2, [r3, #0]
 8004ba0:	e038      	b.n	8004c14 <USB_EPStartXfer+0x86c>
 8004ba2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ba6:	095b      	lsrs	r3, r3, #5
 8004ba8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bb0:	f003 031f 	and.w	r3, r3, #31
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d104      	bne.n	8004bc2 <USB_EPStartXfer+0x81a>
 8004bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	029b      	lsls	r3, r3, #10
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd8:	801a      	strh	r2, [r3, #0]
 8004bda:	e01b      	b.n	8004c14 <USB_EPStartXfer+0x86c>
 8004bdc:	463b      	mov	r3, r7
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	785b      	ldrb	r3, [r3, #1]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d116      	bne.n	8004c14 <USB_EPStartXfer+0x86c>
 8004be6:	1d3b      	adds	r3, r7, #4
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bf4:	4413      	add	r3, r2
 8004bf6:	67bb      	str	r3, [r7, #120]	; 0x78
 8004bf8:	463b      	mov	r3, r7
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	011a      	lsls	r2, r3, #4
 8004c00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c02:	4413      	add	r3, r2
 8004c04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c08:	677b      	str	r3, [r7, #116]	; 0x74
 8004c0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c12:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004c14:	463b      	mov	r3, r7
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	895b      	ldrh	r3, [r3, #10]
 8004c1a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8004c1e:	e097      	b.n	8004d50 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c20:	463b      	mov	r3, r7
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	785b      	ldrb	r3, [r3, #1]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d168      	bne.n	8004cfc <USB_EPStartXfer+0x954>
 8004c2a:	1d3b      	adds	r3, r7, #4
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c32:	1d3b      	adds	r3, r7, #4
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c42:	4413      	add	r3, r2
 8004c44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c48:	463b      	mov	r3, r7
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	011a      	lsls	r2, r3, #4
 8004c50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c54:	4413      	add	r3, r2
 8004c56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d112      	bne.n	8004c8a <USB_EPStartXfer+0x8e2>
 8004c64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c66:	881b      	ldrh	r3, [r3, #0]
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c72:	801a      	strh	r2, [r3, #0]
 8004c74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c76:	881b      	ldrh	r3, [r3, #0]
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c86:	801a      	strh	r2, [r3, #0]
 8004c88:	e05d      	b.n	8004d46 <USB_EPStartXfer+0x99e>
 8004c8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c8e:	2b3e      	cmp	r3, #62	; 0x3e
 8004c90:	d817      	bhi.n	8004cc2 <USB_EPStartXfer+0x91a>
 8004c92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c96:	085b      	lsrs	r3, r3, #1
 8004c98:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004c9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d004      	beq.n	8004cb2 <USB_EPStartXfer+0x90a>
 8004ca8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004cac:	3301      	adds	r3, #1
 8004cae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004cb2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	029b      	lsls	r3, r3, #10
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cbe:	801a      	strh	r2, [r3, #0]
 8004cc0:	e041      	b.n	8004d46 <USB_EPStartXfer+0x99e>
 8004cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cc6:	095b      	lsrs	r3, r3, #5
 8004cc8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cd0:	f003 031f 	and.w	r3, r3, #31
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d104      	bne.n	8004ce2 <USB_EPStartXfer+0x93a>
 8004cd8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004ce2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	029b      	lsls	r3, r3, #10
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cf8:	801a      	strh	r2, [r3, #0]
 8004cfa:	e024      	b.n	8004d46 <USB_EPStartXfer+0x99e>
 8004cfc:	463b      	mov	r3, r7
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	785b      	ldrb	r3, [r3, #1]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d11f      	bne.n	8004d46 <USB_EPStartXfer+0x99e>
 8004d06:	1d3b      	adds	r3, r7, #4
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d0e:	1d3b      	adds	r3, r7, #4
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	461a      	mov	r2, r3
 8004d1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d1e:	4413      	add	r3, r2
 8004d20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d24:	463b      	mov	r3, r7
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	011a      	lsls	r2, r3, #4
 8004d2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d30:	4413      	add	r3, r2
 8004d32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d44:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004d46:	463b      	mov	r3, r7
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	891b      	ldrh	r3, [r3, #8]
 8004d4c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d50:	463b      	mov	r3, r7
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6959      	ldr	r1, [r3, #20]
 8004d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004d60:	1d38      	adds	r0, r7, #4
 8004d62:	6800      	ldr	r0, [r0, #0]
 8004d64:	f000 fd7e 	bl	8005864 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004d68:	463b      	mov	r3, r7
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	785b      	ldrb	r3, [r3, #1]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d122      	bne.n	8004db8 <USB_EPStartXfer+0xa10>
 8004d72:	1d3b      	adds	r3, r7, #4
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	463b      	mov	r3, r7
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4413      	add	r3, r2
 8004d80:	881b      	ldrh	r3, [r3, #0]
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d8c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8004d90:	1d3b      	adds	r3, r7, #4
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	463b      	mov	r3, r7
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	441a      	add	r2, r3
 8004d9e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8004da2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004da6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	8013      	strh	r3, [r2, #0]
 8004db6:	e026      	b.n	8004e06 <USB_EPStartXfer+0xa5e>
 8004db8:	463b      	mov	r3, r7
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	785b      	ldrb	r3, [r3, #1]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d121      	bne.n	8004e06 <USB_EPStartXfer+0xa5e>
 8004dc2:	1d3b      	adds	r3, r7, #4
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	463b      	mov	r3, r7
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ddc:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8004de0:	1d3b      	adds	r3, r7, #4
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	463b      	mov	r3, r7
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	441a      	add	r2, r3
 8004dee:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004df2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004df6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004e06:	1d3b      	adds	r3, r7, #4
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	463b      	mov	r3, r7
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	881b      	ldrh	r3, [r3, #0]
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	f107 020e 	add.w	r2, r7, #14
 8004e1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e24:	8013      	strh	r3, [r2, #0]
 8004e26:	f107 030e 	add.w	r3, r7, #14
 8004e2a:	f107 020e 	add.w	r2, r7, #14
 8004e2e:	8812      	ldrh	r2, [r2, #0]
 8004e30:	f082 0210 	eor.w	r2, r2, #16
 8004e34:	801a      	strh	r2, [r3, #0]
 8004e36:	f107 030e 	add.w	r3, r7, #14
 8004e3a:	f107 020e 	add.w	r2, r7, #14
 8004e3e:	8812      	ldrh	r2, [r2, #0]
 8004e40:	f082 0220 	eor.w	r2, r2, #32
 8004e44:	801a      	strh	r2, [r3, #0]
 8004e46:	1d3b      	adds	r3, r7, #4
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	463b      	mov	r3, r7
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	441a      	add	r2, r3
 8004e54:	f107 030e 	add.w	r3, r7, #14
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	8013      	strh	r3, [r2, #0]
 8004e6e:	e3b5      	b.n	80055dc <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004e70:	463b      	mov	r3, r7
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	7b1b      	ldrb	r3, [r3, #12]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f040 8090 	bne.w	8004f9c <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004e7c:	463b      	mov	r3, r7
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	699a      	ldr	r2, [r3, #24]
 8004e82:	463b      	mov	r3, r7
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d90e      	bls.n	8004eaa <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8004e8c:	463b      	mov	r3, r7
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8004e96:	463b      	mov	r3, r7
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	699a      	ldr	r2, [r3, #24]
 8004e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ea0:	1ad2      	subs	r2, r2, r3
 8004ea2:	463b      	mov	r3, r7
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	619a      	str	r2, [r3, #24]
 8004ea8:	e008      	b.n	8004ebc <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8004eaa:	463b      	mov	r3, r7
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8004eb4:	463b      	mov	r3, r7
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004ebc:	1d3b      	adds	r3, r7, #4
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ec4:	1d3b      	adds	r3, r7, #4
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	461a      	mov	r2, r3
 8004ed0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004eda:	463b      	mov	r3, r7
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	011a      	lsls	r2, r3, #4
 8004ee2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004eec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d116      	bne.n	8004f26 <USB_EPStartXfer+0xb7e>
 8004ef8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f0a:	801a      	strh	r2, [r3, #0]
 8004f0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f10:	881b      	ldrh	r3, [r3, #0]
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f22:	801a      	strh	r2, [r3, #0]
 8004f24:	e32c      	b.n	8005580 <USB_EPStartXfer+0x11d8>
 8004f26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f2a:	2b3e      	cmp	r3, #62	; 0x3e
 8004f2c:	d818      	bhi.n	8004f60 <USB_EPStartXfer+0xbb8>
 8004f2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f32:	085b      	lsrs	r3, r3, #1
 8004f34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004f38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d004      	beq.n	8004f4e <USB_EPStartXfer+0xba6>
 8004f44:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f48:	3301      	adds	r3, #1
 8004f4a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004f4e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	029b      	lsls	r3, r3, #10
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f5c:	801a      	strh	r2, [r3, #0]
 8004f5e:	e30f      	b.n	8005580 <USB_EPStartXfer+0x11d8>
 8004f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f64:	095b      	lsrs	r3, r3, #5
 8004f66:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004f6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f6e:	f003 031f 	and.w	r3, r3, #31
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d104      	bne.n	8004f80 <USB_EPStartXfer+0xbd8>
 8004f76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004f80:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	029b      	lsls	r3, r3, #10
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f98:	801a      	strh	r2, [r3, #0]
 8004f9a:	e2f1      	b.n	8005580 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004f9c:	463b      	mov	r3, r7
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	78db      	ldrb	r3, [r3, #3]
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	f040 818f 	bne.w	80052c6 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004fa8:	463b      	mov	r3, r7
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	785b      	ldrb	r3, [r3, #1]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d175      	bne.n	800509e <USB_EPStartXfer+0xcf6>
 8004fb2:	1d3b      	adds	r3, r7, #4
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fba:	1d3b      	adds	r3, r7, #4
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004fca:	4413      	add	r3, r2
 8004fcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fd0:	463b      	mov	r3, r7
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	011a      	lsls	r2, r3, #4
 8004fd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004fdc:	4413      	add	r3, r2
 8004fde:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fe2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004fe6:	463b      	mov	r3, r7
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d116      	bne.n	800501e <USB_EPStartXfer+0xc76>
 8004ff0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005002:	801a      	strh	r2, [r3, #0]
 8005004:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	b29b      	uxth	r3, r3
 800500c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005010:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005014:	b29a      	uxth	r2, r3
 8005016:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800501a:	801a      	strh	r2, [r3, #0]
 800501c:	e065      	b.n	80050ea <USB_EPStartXfer+0xd42>
 800501e:	463b      	mov	r3, r7
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	2b3e      	cmp	r3, #62	; 0x3e
 8005026:	d81a      	bhi.n	800505e <USB_EPStartXfer+0xcb6>
 8005028:	463b      	mov	r3, r7
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	085b      	lsrs	r3, r3, #1
 8005030:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005034:	463b      	mov	r3, r7
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d004      	beq.n	800504c <USB_EPStartXfer+0xca4>
 8005042:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005046:	3301      	adds	r3, #1
 8005048:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800504c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005050:	b29b      	uxth	r3, r3
 8005052:	029b      	lsls	r3, r3, #10
 8005054:	b29a      	uxth	r2, r3
 8005056:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800505a:	801a      	strh	r2, [r3, #0]
 800505c:	e045      	b.n	80050ea <USB_EPStartXfer+0xd42>
 800505e:	463b      	mov	r3, r7
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	095b      	lsrs	r3, r3, #5
 8005066:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800506a:	463b      	mov	r3, r7
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	f003 031f 	and.w	r3, r3, #31
 8005074:	2b00      	cmp	r3, #0
 8005076:	d104      	bne.n	8005082 <USB_EPStartXfer+0xcda>
 8005078:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800507c:	3b01      	subs	r3, #1
 800507e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005082:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005086:	b29b      	uxth	r3, r3
 8005088:	029b      	lsls	r3, r3, #10
 800508a:	b29b      	uxth	r3, r3
 800508c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005094:	b29a      	uxth	r2, r3
 8005096:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800509a:	801a      	strh	r2, [r3, #0]
 800509c:	e025      	b.n	80050ea <USB_EPStartXfer+0xd42>
 800509e:	463b      	mov	r3, r7
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	785b      	ldrb	r3, [r3, #1]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d120      	bne.n	80050ea <USB_EPStartXfer+0xd42>
 80050a8:	1d3b      	adds	r3, r7, #4
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050b0:	1d3b      	adds	r3, r7, #4
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	461a      	mov	r2, r3
 80050bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80050c0:	4413      	add	r3, r2
 80050c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050c6:	463b      	mov	r3, r7
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	011a      	lsls	r2, r3, #4
 80050ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80050d2:	4413      	add	r3, r2
 80050d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050dc:	463b      	mov	r3, r7
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80050e8:	801a      	strh	r2, [r3, #0]
 80050ea:	1d3b      	adds	r3, r7, #4
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050f2:	463b      	mov	r3, r7
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	785b      	ldrb	r3, [r3, #1]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d175      	bne.n	80051e8 <USB_EPStartXfer+0xe40>
 80050fc:	1d3b      	adds	r3, r7, #4
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005104:	1d3b      	adds	r3, r7, #4
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800510c:	b29b      	uxth	r3, r3
 800510e:	461a      	mov	r2, r3
 8005110:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005114:	4413      	add	r3, r2
 8005116:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800511a:	463b      	mov	r3, r7
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	011a      	lsls	r2, r3, #4
 8005122:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005126:	4413      	add	r3, r2
 8005128:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800512c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005130:	463b      	mov	r3, r7
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d116      	bne.n	8005168 <USB_EPStartXfer+0xdc0>
 800513a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800513e:	881b      	ldrh	r3, [r3, #0]
 8005140:	b29b      	uxth	r3, r3
 8005142:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005146:	b29a      	uxth	r2, r3
 8005148:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800514c:	801a      	strh	r2, [r3, #0]
 800514e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005152:	881b      	ldrh	r3, [r3, #0]
 8005154:	b29b      	uxth	r3, r3
 8005156:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800515a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800515e:	b29a      	uxth	r2, r3
 8005160:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005164:	801a      	strh	r2, [r3, #0]
 8005166:	e061      	b.n	800522c <USB_EPStartXfer+0xe84>
 8005168:	463b      	mov	r3, r7
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	2b3e      	cmp	r3, #62	; 0x3e
 8005170:	d81a      	bhi.n	80051a8 <USB_EPStartXfer+0xe00>
 8005172:	463b      	mov	r3, r7
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	085b      	lsrs	r3, r3, #1
 800517a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800517e:	463b      	mov	r3, r7
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	2b00      	cmp	r3, #0
 800518a:	d004      	beq.n	8005196 <USB_EPStartXfer+0xdee>
 800518c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005190:	3301      	adds	r3, #1
 8005192:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800519a:	b29b      	uxth	r3, r3
 800519c:	029b      	lsls	r3, r3, #10
 800519e:	b29a      	uxth	r2, r3
 80051a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051a4:	801a      	strh	r2, [r3, #0]
 80051a6:	e041      	b.n	800522c <USB_EPStartXfer+0xe84>
 80051a8:	463b      	mov	r3, r7
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	095b      	lsrs	r3, r3, #5
 80051b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80051b4:	463b      	mov	r3, r7
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	f003 031f 	and.w	r3, r3, #31
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d104      	bne.n	80051cc <USB_EPStartXfer+0xe24>
 80051c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051c6:	3b01      	subs	r3, #1
 80051c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80051cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	029b      	lsls	r3, r3, #10
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051de:	b29a      	uxth	r2, r3
 80051e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051e4:	801a      	strh	r2, [r3, #0]
 80051e6:	e021      	b.n	800522c <USB_EPStartXfer+0xe84>
 80051e8:	463b      	mov	r3, r7
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	785b      	ldrb	r3, [r3, #1]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d11c      	bne.n	800522c <USB_EPStartXfer+0xe84>
 80051f2:	1d3b      	adds	r3, r7, #4
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	461a      	mov	r2, r3
 80051fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005202:	4413      	add	r3, r2
 8005204:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005208:	463b      	mov	r3, r7
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	011a      	lsls	r2, r3, #4
 8005210:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005214:	4413      	add	r3, r2
 8005216:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800521a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800521e:	463b      	mov	r3, r7
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	b29a      	uxth	r2, r3
 8005226:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800522a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800522c:	463b      	mov	r3, r7
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	2b00      	cmp	r3, #0
 8005234:	f000 81a4 	beq.w	8005580 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005238:	1d3b      	adds	r3, r7, #4
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	463b      	mov	r3, r7
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4413      	add	r3, r2
 8005246:	881b      	ldrh	r3, [r3, #0]
 8005248:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800524c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005250:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d005      	beq.n	8005264 <USB_EPStartXfer+0xebc>
 8005258:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800525c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10d      	bne.n	8005280 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005264:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005268:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800526c:	2b00      	cmp	r3, #0
 800526e:	f040 8187 	bne.w	8005580 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005272:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527a:	2b00      	cmp	r3, #0
 800527c:	f040 8180 	bne.w	8005580 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005280:	1d3b      	adds	r3, r7, #4
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	463b      	mov	r3, r7
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4413      	add	r3, r2
 800528e:	881b      	ldrh	r3, [r3, #0]
 8005290:	b29b      	uxth	r3, r3
 8005292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800529e:	1d3b      	adds	r3, r7, #4
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	463b      	mov	r3, r7
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	441a      	add	r2, r3
 80052ac:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80052b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	8013      	strh	r3, [r2, #0]
 80052c4:	e15c      	b.n	8005580 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80052c6:	463b      	mov	r3, r7
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	78db      	ldrb	r3, [r3, #3]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	f040 8155 	bne.w	800557c <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80052d2:	463b      	mov	r3, r7
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	699a      	ldr	r2, [r3, #24]
 80052d8:	463b      	mov	r3, r7
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d90e      	bls.n	8005300 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 80052e2:	463b      	mov	r3, r7
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 80052ec:	463b      	mov	r3, r7
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699a      	ldr	r2, [r3, #24]
 80052f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052f6:	1ad2      	subs	r2, r2, r3
 80052f8:	463b      	mov	r3, r7
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	619a      	str	r2, [r3, #24]
 80052fe:	e008      	b.n	8005312 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005300:	463b      	mov	r3, r7
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 800530a:	463b      	mov	r3, r7
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2200      	movs	r2, #0
 8005310:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005312:	463b      	mov	r3, r7
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	785b      	ldrb	r3, [r3, #1]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d16f      	bne.n	80053fc <USB_EPStartXfer+0x1054>
 800531c:	1d3b      	adds	r3, r7, #4
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005324:	1d3b      	adds	r3, r7, #4
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800532c:	b29b      	uxth	r3, r3
 800532e:	461a      	mov	r2, r3
 8005330:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005334:	4413      	add	r3, r2
 8005336:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800533a:	463b      	mov	r3, r7
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	011a      	lsls	r2, r3, #4
 8005342:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005346:	4413      	add	r3, r2
 8005348:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800534c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005350:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005354:	2b00      	cmp	r3, #0
 8005356:	d116      	bne.n	8005386 <USB_EPStartXfer+0xfde>
 8005358:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	b29b      	uxth	r3, r3
 8005360:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005364:	b29a      	uxth	r2, r3
 8005366:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800536a:	801a      	strh	r2, [r3, #0]
 800536c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	b29b      	uxth	r3, r3
 8005374:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005378:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800537c:	b29a      	uxth	r2, r3
 800537e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005382:	801a      	strh	r2, [r3, #0]
 8005384:	e05f      	b.n	8005446 <USB_EPStartXfer+0x109e>
 8005386:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800538a:	2b3e      	cmp	r3, #62	; 0x3e
 800538c:	d818      	bhi.n	80053c0 <USB_EPStartXfer+0x1018>
 800538e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005392:	085b      	lsrs	r3, r3, #1
 8005394:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005398:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d004      	beq.n	80053ae <USB_EPStartXfer+0x1006>
 80053a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053a8:	3301      	adds	r3, #1
 80053aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	029b      	lsls	r3, r3, #10
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053bc:	801a      	strh	r2, [r3, #0]
 80053be:	e042      	b.n	8005446 <USB_EPStartXfer+0x109e>
 80053c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053c4:	095b      	lsrs	r3, r3, #5
 80053c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053ce:	f003 031f 	and.w	r3, r3, #31
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d104      	bne.n	80053e0 <USB_EPStartXfer+0x1038>
 80053d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053da:	3b01      	subs	r3, #1
 80053dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	029b      	lsls	r3, r3, #10
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053f8:	801a      	strh	r2, [r3, #0]
 80053fa:	e024      	b.n	8005446 <USB_EPStartXfer+0x109e>
 80053fc:	463b      	mov	r3, r7
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	785b      	ldrb	r3, [r3, #1]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d11f      	bne.n	8005446 <USB_EPStartXfer+0x109e>
 8005406:	1d3b      	adds	r3, r7, #4
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800540e:	1d3b      	adds	r3, r7, #4
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005416:	b29b      	uxth	r3, r3
 8005418:	461a      	mov	r2, r3
 800541a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800541e:	4413      	add	r3, r2
 8005420:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005424:	463b      	mov	r3, r7
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	011a      	lsls	r2, r3, #4
 800542c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005430:	4413      	add	r3, r2
 8005432:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005436:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800543a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800543e:	b29a      	uxth	r2, r3
 8005440:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005444:	801a      	strh	r2, [r3, #0]
 8005446:	1d3b      	adds	r3, r7, #4
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800544e:	463b      	mov	r3, r7
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	785b      	ldrb	r3, [r3, #1]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d16f      	bne.n	8005538 <USB_EPStartXfer+0x1190>
 8005458:	1d3b      	adds	r3, r7, #4
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005460:	1d3b      	adds	r3, r7, #4
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005468:	b29b      	uxth	r3, r3
 800546a:	461a      	mov	r2, r3
 800546c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005470:	4413      	add	r3, r2
 8005472:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005476:	463b      	mov	r3, r7
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	011a      	lsls	r2, r3, #4
 800547e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005482:	4413      	add	r3, r2
 8005484:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005488:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800548c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005490:	2b00      	cmp	r3, #0
 8005492:	d116      	bne.n	80054c2 <USB_EPStartXfer+0x111a>
 8005494:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	b29b      	uxth	r3, r3
 800549c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80054a6:	801a      	strh	r2, [r3, #0]
 80054a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80054ac:	881b      	ldrh	r3, [r3, #0]
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80054be:	801a      	strh	r2, [r3, #0]
 80054c0:	e05e      	b.n	8005580 <USB_EPStartXfer+0x11d8>
 80054c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054c6:	2b3e      	cmp	r3, #62	; 0x3e
 80054c8:	d818      	bhi.n	80054fc <USB_EPStartXfer+0x1154>
 80054ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054ce:	085b      	lsrs	r3, r3, #1
 80054d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80054d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d004      	beq.n	80054ea <USB_EPStartXfer+0x1142>
 80054e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054e4:	3301      	adds	r3, #1
 80054e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80054ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	029b      	lsls	r3, r3, #10
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80054f8:	801a      	strh	r2, [r3, #0]
 80054fa:	e041      	b.n	8005580 <USB_EPStartXfer+0x11d8>
 80054fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005500:	095b      	lsrs	r3, r3, #5
 8005502:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005506:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800550a:	f003 031f 	and.w	r3, r3, #31
 800550e:	2b00      	cmp	r3, #0
 8005510:	d104      	bne.n	800551c <USB_EPStartXfer+0x1174>
 8005512:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005516:	3b01      	subs	r3, #1
 8005518:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800551c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005520:	b29b      	uxth	r3, r3
 8005522:	029b      	lsls	r3, r3, #10
 8005524:	b29b      	uxth	r3, r3
 8005526:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800552a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800552e:	b29a      	uxth	r2, r3
 8005530:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005534:	801a      	strh	r2, [r3, #0]
 8005536:	e023      	b.n	8005580 <USB_EPStartXfer+0x11d8>
 8005538:	463b      	mov	r3, r7
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	785b      	ldrb	r3, [r3, #1]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d11e      	bne.n	8005580 <USB_EPStartXfer+0x11d8>
 8005542:	1d3b      	adds	r3, r7, #4
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800554a:	b29b      	uxth	r3, r3
 800554c:	461a      	mov	r2, r3
 800554e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005552:	4413      	add	r3, r2
 8005554:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005558:	463b      	mov	r3, r7
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	011a      	lsls	r2, r3, #4
 8005560:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005564:	4413      	add	r3, r2
 8005566:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800556a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800556e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005572:	b29a      	uxth	r2, r3
 8005574:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005578:	801a      	strh	r2, [r3, #0]
 800557a:	e001      	b.n	8005580 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e02e      	b.n	80055de <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005580:	1d3b      	adds	r3, r7, #4
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	463b      	mov	r3, r7
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	881b      	ldrh	r3, [r3, #0]
 8005590:	b29b      	uxth	r3, r3
 8005592:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800559a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800559e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80055a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80055a6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80055aa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80055ae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80055b2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80055b6:	1d3b      	adds	r3, r7, #4
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	463b      	mov	r3, r7
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	441a      	add	r2, r3
 80055c4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80055c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055d8:	b29b      	uxth	r3, r3
 80055da:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	785b      	ldrb	r3, [r3, #1]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d020      	beq.n	800563c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4413      	add	r3, r2
 8005604:	881b      	ldrh	r3, [r3, #0]
 8005606:	b29b      	uxth	r3, r3
 8005608:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800560c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005610:	81bb      	strh	r3, [r7, #12]
 8005612:	89bb      	ldrh	r3, [r7, #12]
 8005614:	f083 0310 	eor.w	r3, r3, #16
 8005618:	81bb      	strh	r3, [r7, #12]
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	441a      	add	r2, r3
 8005624:	89bb      	ldrh	r3, [r7, #12]
 8005626:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800562a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800562e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005636:	b29b      	uxth	r3, r3
 8005638:	8013      	strh	r3, [r2, #0]
 800563a:	e01f      	b.n	800567c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4413      	add	r3, r2
 8005646:	881b      	ldrh	r3, [r3, #0]
 8005648:	b29b      	uxth	r3, r3
 800564a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800564e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005652:	81fb      	strh	r3, [r7, #14]
 8005654:	89fb      	ldrh	r3, [r7, #14]
 8005656:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800565a:	81fb      	strh	r3, [r7, #14]
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	441a      	add	r2, r3
 8005666:	89fb      	ldrh	r3, [r7, #14]
 8005668:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800566c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005670:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005678:	b29b      	uxth	r3, r3
 800567a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	bc80      	pop	{r7}
 8005686:	4770      	bx	lr

08005688 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005688:	b480      	push	{r7}
 800568a:	b087      	sub	sp, #28
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	7b1b      	ldrb	r3, [r3, #12]
 8005696:	2b00      	cmp	r3, #0
 8005698:	f040 809d 	bne.w	80057d6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	785b      	ldrb	r3, [r3, #1]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d04c      	beq.n	800573e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	823b      	strh	r3, [r7, #16]
 80056b2:	8a3b      	ldrh	r3, [r7, #16]
 80056b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d01b      	beq.n	80056f4 <USB_EPClearStall+0x6c>
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d2:	81fb      	strh	r3, [r7, #14]
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	441a      	add	r2, r3
 80056de:	89fb      	ldrh	r3, [r7, #14]
 80056e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	78db      	ldrb	r3, [r3, #3]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d06c      	beq.n	80057d6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4413      	add	r3, r2
 8005706:	881b      	ldrh	r3, [r3, #0]
 8005708:	b29b      	uxth	r3, r3
 800570a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800570e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005712:	81bb      	strh	r3, [r7, #12]
 8005714:	89bb      	ldrh	r3, [r7, #12]
 8005716:	f083 0320 	eor.w	r3, r3, #32
 800571a:	81bb      	strh	r3, [r7, #12]
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	441a      	add	r2, r3
 8005726:	89bb      	ldrh	r3, [r7, #12]
 8005728:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800572c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005730:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005738:	b29b      	uxth	r3, r3
 800573a:	8013      	strh	r3, [r2, #0]
 800573c:	e04b      	b.n	80057d6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4413      	add	r3, r2
 8005748:	881b      	ldrh	r3, [r3, #0]
 800574a:	82fb      	strh	r3, [r7, #22]
 800574c:	8afb      	ldrh	r3, [r7, #22]
 800574e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d01b      	beq.n	800578e <USB_EPClearStall+0x106>
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4413      	add	r3, r2
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	b29b      	uxth	r3, r3
 8005764:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576c:	82bb      	strh	r3, [r7, #20]
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	441a      	add	r2, r3
 8005778:	8abb      	ldrh	r3, [r7, #20]
 800577a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800577e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005782:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800578a:	b29b      	uxth	r3, r3
 800578c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4413      	add	r3, r2
 8005798:	881b      	ldrh	r3, [r3, #0]
 800579a:	b29b      	uxth	r3, r3
 800579c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a4:	827b      	strh	r3, [r7, #18]
 80057a6:	8a7b      	ldrh	r3, [r7, #18]
 80057a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80057ac:	827b      	strh	r3, [r7, #18]
 80057ae:	8a7b      	ldrh	r3, [r7, #18]
 80057b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80057b4:	827b      	strh	r3, [r7, #18]
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	441a      	add	r2, r3
 80057c0:	8a7b      	ldrh	r3, [r7, #18]
 80057c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	371c      	adds	r7, #28
 80057dc:	46bd      	mov	sp, r7
 80057de:	bc80      	pop	{r7}
 80057e0:	4770      	bx	lr

080057e2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b083      	sub	sp, #12
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
 80057ea:	460b      	mov	r3, r1
 80057ec:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80057ee:	78fb      	ldrb	r3, [r7, #3]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d103      	bne.n	80057fc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2280      	movs	r2, #128	; 0x80
 80057f8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	bc80      	pop	{r7}
 8005806:	4770      	bx	lr

08005808 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	bc80      	pop	{r7}
 800581a:	4770      	bx	lr

0800581c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	bc80      	pop	{r7}
 800582e:	4770      	bx	lr

08005830 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800583e:	b29b      	uxth	r3, r3
 8005840:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005842:	68fb      	ldr	r3, [r7, #12]
}
 8005844:	4618      	mov	r0, r3
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	bc80      	pop	{r7}
 800584c:	4770      	bx	lr

0800584e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800584e:	b480      	push	{r7}
 8005850:	b083      	sub	sp, #12
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
 8005856:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	bc80      	pop	{r7}
 8005862:	4770      	bx	lr

08005864 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005864:	b480      	push	{r7}
 8005866:	b08d      	sub	sp, #52	; 0x34
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	4611      	mov	r1, r2
 8005870:	461a      	mov	r2, r3
 8005872:	460b      	mov	r3, r1
 8005874:	80fb      	strh	r3, [r7, #6]
 8005876:	4613      	mov	r3, r2
 8005878:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800587a:	88bb      	ldrh	r3, [r7, #4]
 800587c:	3301      	adds	r3, #1
 800587e:	085b      	lsrs	r3, r3, #1
 8005880:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800588a:	88fb      	ldrh	r3, [r7, #6]
 800588c:	005a      	lsls	r2, r3, #1
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	4413      	add	r3, r2
 8005892:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005896:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800589c:	e01e      	b.n	80058dc <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80058a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a6:	3301      	adds	r3, #1
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	021b      	lsls	r3, r3, #8
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	461a      	mov	r2, r3
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	b29a      	uxth	r2, r3
 80058c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80058c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c6:	3302      	adds	r3, #2
 80058c8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80058ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058cc:	3302      	adds	r3, #2
 80058ce:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	3301      	adds	r3, #1
 80058d4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80058d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d8:	3b01      	subs	r3, #1
 80058da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1dd      	bne.n	800589e <USB_WritePMA+0x3a>
  }
}
 80058e2:	bf00      	nop
 80058e4:	bf00      	nop
 80058e6:	3734      	adds	r7, #52	; 0x34
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bc80      	pop	{r7}
 80058ec:	4770      	bx	lr

080058ee <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b08b      	sub	sp, #44	; 0x2c
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	60f8      	str	r0, [r7, #12]
 80058f6:	60b9      	str	r1, [r7, #8]
 80058f8:	4611      	mov	r1, r2
 80058fa:	461a      	mov	r2, r3
 80058fc:	460b      	mov	r3, r1
 80058fe:	80fb      	strh	r3, [r7, #6]
 8005900:	4613      	mov	r3, r2
 8005902:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005904:	88bb      	ldrh	r3, [r7, #4]
 8005906:	085b      	lsrs	r3, r3, #1
 8005908:	b29b      	uxth	r3, r3
 800590a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005914:	88fb      	ldrh	r3, [r7, #6]
 8005916:	005a      	lsls	r2, r3, #1
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	4413      	add	r3, r2
 800591c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005920:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	627b      	str	r3, [r7, #36]	; 0x24
 8005926:	e01b      	b.n	8005960 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005928:	6a3b      	ldr	r3, [r7, #32]
 800592a:	881b      	ldrh	r3, [r3, #0]
 800592c:	b29b      	uxth	r3, r3
 800592e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005930:	6a3b      	ldr	r3, [r7, #32]
 8005932:	3302      	adds	r3, #2
 8005934:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	b2da      	uxtb	r2, r3
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	3301      	adds	r3, #1
 8005942:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	0a1b      	lsrs	r3, r3, #8
 8005948:	b2da      	uxtb	r2, r3
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	3301      	adds	r3, #1
 8005952:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005954:	6a3b      	ldr	r3, [r7, #32]
 8005956:	3302      	adds	r3, #2
 8005958:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595c:	3b01      	subs	r3, #1
 800595e:	627b      	str	r3, [r7, #36]	; 0x24
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1e0      	bne.n	8005928 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005966:	88bb      	ldrh	r3, [r7, #4]
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	b29b      	uxth	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d007      	beq.n	8005982 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	b29b      	uxth	r3, r3
 8005978:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	b2da      	uxtb	r2, r3
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	701a      	strb	r2, [r3, #0]
  }
}
 8005982:	bf00      	nop
 8005984:	372c      	adds	r7, #44	; 0x2c
 8005986:	46bd      	mov	sp, r7
 8005988:	bc80      	pop	{r7}
 800598a:	4770      	bx	lr

0800598c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	460b      	mov	r3, r1
 8005996:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005998:	2300      	movs	r3, #0
 800599a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	7c1b      	ldrb	r3, [r3, #16]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d115      	bne.n	80059d0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80059a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059a8:	2202      	movs	r2, #2
 80059aa:	2181      	movs	r1, #129	; 0x81
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f001 fe86 	bl	80076be <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80059b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059bc:	2202      	movs	r2, #2
 80059be:	2101      	movs	r1, #1
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f001 fe7c 	bl	80076be <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80059ce:	e012      	b.n	80059f6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80059d0:	2340      	movs	r3, #64	; 0x40
 80059d2:	2202      	movs	r2, #2
 80059d4:	2181      	movs	r1, #129	; 0x81
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f001 fe71 	bl	80076be <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80059e2:	2340      	movs	r3, #64	; 0x40
 80059e4:	2202      	movs	r2, #2
 80059e6:	2101      	movs	r1, #1
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f001 fe68 	bl	80076be <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80059f6:	2308      	movs	r3, #8
 80059f8:	2203      	movs	r2, #3
 80059fa:	2182      	movs	r1, #130	; 0x82
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f001 fe5e 	bl	80076be <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2201      	movs	r2, #1
 8005a06:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005a08:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005a0c:	f001 ff7e 	bl	800790c <USBD_static_malloc>
 8005a10:	4602      	mov	r2, r0
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d102      	bne.n	8005a28 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005a22:	2301      	movs	r3, #1
 8005a24:	73fb      	strb	r3, [r7, #15]
 8005a26:	e026      	b.n	8005a76 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a2e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	7c1b      	ldrb	r3, [r3, #16]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d109      	bne.n	8005a66 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a5c:	2101      	movs	r1, #1
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f001 ff1e 	bl	80078a0 <USBD_LL_PrepareReceive>
 8005a64:	e007      	b.n	8005a76 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a6c:	2340      	movs	r3, #64	; 0x40
 8005a6e:	2101      	movs	r1, #1
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f001 ff15 	bl	80078a0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005a90:	2181      	movs	r1, #129	; 0x81
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f001 fe39 	bl	800770a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f001 fe32 	bl	800770a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005aae:	2182      	movs	r1, #130	; 0x82
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f001 fe2a 	bl	800770a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00e      	beq.n	8005ae4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f001 ff24 	bl	8007924 <USBD_static_free>
    pdev->pClassData = NULL;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b086      	sub	sp, #24
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
 8005af6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005afe:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005b00:	2300      	movs	r3, #0
 8005b02:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005b04:	2300      	movs	r3, #0
 8005b06:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d039      	beq.n	8005b8c <USBD_CDC_Setup+0x9e>
 8005b18:	2b20      	cmp	r3, #32
 8005b1a:	d17f      	bne.n	8005c1c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	88db      	ldrh	r3, [r3, #6]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d029      	beq.n	8005b78 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	b25b      	sxtb	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	da11      	bge.n	8005b52 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005b3a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b3c:	683a      	ldr	r2, [r7, #0]
 8005b3e:	88d2      	ldrh	r2, [r2, #6]
 8005b40:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005b42:	6939      	ldr	r1, [r7, #16]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	88db      	ldrh	r3, [r3, #6]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f001 fa09 	bl	8006f62 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005b50:	e06b      	b.n	8005c2a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	785a      	ldrb	r2, [r3, #1]
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	88db      	ldrh	r3, [r3, #6]
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005b68:	6939      	ldr	r1, [r7, #16]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	88db      	ldrh	r3, [r3, #6]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f001 fa24 	bl	8006fbe <USBD_CtlPrepareRx>
      break;
 8005b76:	e058      	b.n	8005c2a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	7850      	ldrb	r0, [r2, #1]
 8005b84:	2200      	movs	r2, #0
 8005b86:	6839      	ldr	r1, [r7, #0]
 8005b88:	4798      	blx	r3
      break;
 8005b8a:	e04e      	b.n	8005c2a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	785b      	ldrb	r3, [r3, #1]
 8005b90:	2b0b      	cmp	r3, #11
 8005b92:	d02e      	beq.n	8005bf2 <USBD_CDC_Setup+0x104>
 8005b94:	2b0b      	cmp	r3, #11
 8005b96:	dc38      	bgt.n	8005c0a <USBD_CDC_Setup+0x11c>
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d002      	beq.n	8005ba2 <USBD_CDC_Setup+0xb4>
 8005b9c:	2b0a      	cmp	r3, #10
 8005b9e:	d014      	beq.n	8005bca <USBD_CDC_Setup+0xdc>
 8005ba0:	e033      	b.n	8005c0a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ba8:	2b03      	cmp	r3, #3
 8005baa:	d107      	bne.n	8005bbc <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005bac:	f107 030c 	add.w	r3, r7, #12
 8005bb0:	2202      	movs	r2, #2
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f001 f9d4 	bl	8006f62 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005bba:	e02e      	b.n	8005c1a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005bbc:	6839      	ldr	r1, [r7, #0]
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f001 f965 	bl	8006e8e <USBD_CtlError>
            ret = USBD_FAIL;
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	75fb      	strb	r3, [r7, #23]
          break;
 8005bc8:	e027      	b.n	8005c1a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bd0:	2b03      	cmp	r3, #3
 8005bd2:	d107      	bne.n	8005be4 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005bd4:	f107 030f 	add.w	r3, r7, #15
 8005bd8:	2201      	movs	r2, #1
 8005bda:	4619      	mov	r1, r3
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f001 f9c0 	bl	8006f62 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005be2:	e01a      	b.n	8005c1a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005be4:	6839      	ldr	r1, [r7, #0]
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f001 f951 	bl	8006e8e <USBD_CtlError>
            ret = USBD_FAIL;
 8005bec:	2302      	movs	r3, #2
 8005bee:	75fb      	strb	r3, [r7, #23]
          break;
 8005bf0:	e013      	b.n	8005c1a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bf8:	2b03      	cmp	r3, #3
 8005bfa:	d00d      	beq.n	8005c18 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8005bfc:	6839      	ldr	r1, [r7, #0]
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f001 f945 	bl	8006e8e <USBD_CtlError>
            ret = USBD_FAIL;
 8005c04:	2302      	movs	r3, #2
 8005c06:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005c08:	e006      	b.n	8005c18 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8005c0a:	6839      	ldr	r1, [r7, #0]
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f001 f93e 	bl	8006e8e <USBD_CtlError>
          ret = USBD_FAIL;
 8005c12:	2302      	movs	r3, #2
 8005c14:	75fb      	strb	r3, [r7, #23]
          break;
 8005c16:	e000      	b.n	8005c1a <USBD_CDC_Setup+0x12c>
          break;
 8005c18:	bf00      	nop
      }
      break;
 8005c1a:	e006      	b.n	8005c2a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005c1c:	6839      	ldr	r1, [r7, #0]
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f001 f935 	bl	8006e8e <USBD_CtlError>
      ret = USBD_FAIL;
 8005c24:	2302      	movs	r3, #2
 8005c26:	75fb      	strb	r3, [r7, #23]
      break;
 8005c28:	bf00      	nop
  }

  return ret;
 8005c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3718      	adds	r7, #24
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c46:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c4e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d03a      	beq.n	8005cd0 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005c5a:	78fa      	ldrb	r2, [r7, #3]
 8005c5c:	6879      	ldr	r1, [r7, #4]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	440b      	add	r3, r1
 8005c68:	331c      	adds	r3, #28
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d029      	beq.n	8005cc4 <USBD_CDC_DataIn+0x90>
 8005c70:	78fa      	ldrb	r2, [r7, #3]
 8005c72:	6879      	ldr	r1, [r7, #4]
 8005c74:	4613      	mov	r3, r2
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	4413      	add	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	440b      	add	r3, r1
 8005c7e:	331c      	adds	r3, #28
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	78f9      	ldrb	r1, [r7, #3]
 8005c84:	68b8      	ldr	r0, [r7, #8]
 8005c86:	460b      	mov	r3, r1
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	440b      	add	r3, r1
 8005c8c:	00db      	lsls	r3, r3, #3
 8005c8e:	4403      	add	r3, r0
 8005c90:	3338      	adds	r3, #56	; 0x38
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	fbb2 f1f3 	udiv	r1, r2, r3
 8005c98:	fb03 f301 	mul.w	r3, r3, r1
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d110      	bne.n	8005cc4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005ca2:	78fa      	ldrb	r2, [r7, #3]
 8005ca4:	6879      	ldr	r1, [r7, #4]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4413      	add	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	440b      	add	r3, r1
 8005cb0:	331c      	adds	r3, #28
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005cb6:	78f9      	ldrb	r1, [r7, #3]
 8005cb8:	2300      	movs	r3, #0
 8005cba:	2200      	movs	r2, #0
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f001 fdcc 	bl	800785a <USBD_LL_Transmit>
 8005cc2:	e003      	b.n	8005ccc <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	e000      	b.n	8005cd2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005cd0:	2302      	movs	r3, #2
  }
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b084      	sub	sp, #16
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cec:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005cee:	78fb      	ldrb	r3, [r7, #3]
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f001 fdf7 	bl	80078e6 <USBD_LL_GetRxDataSize>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00d      	beq.n	8005d26 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005d1e:	4611      	mov	r1, r2
 8005d20:	4798      	blx	r3

    return USBD_OK;
 8005d22:	2300      	movs	r3, #0
 8005d24:	e000      	b.n	8005d28 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005d26:	2302      	movs	r3, #2
  }
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d3e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d015      	beq.n	8005d76 <USBD_CDC_EP0_RxReady+0x46>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005d50:	2bff      	cmp	r3, #255	; 0xff
 8005d52:	d010      	beq.n	8005d76 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005d62:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d6a:	b292      	uxth	r2, r2
 8005d6c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	22ff      	movs	r2, #255	; 0xff
 8005d72:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2243      	movs	r2, #67	; 0x43
 8005d8c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005d8e:	4b03      	ldr	r3, [pc, #12]	; (8005d9c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bc80      	pop	{r7}
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	20000094 	.word	0x20000094

08005da0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2243      	movs	r2, #67	; 0x43
 8005dac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005dae:	4b03      	ldr	r3, [pc, #12]	; (8005dbc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bc80      	pop	{r7}
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	20000050 	.word	0x20000050

08005dc0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2243      	movs	r2, #67	; 0x43
 8005dcc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005dce:	4b03      	ldr	r3, [pc, #12]	; (8005ddc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bc80      	pop	{r7}
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	200000d8 	.word	0x200000d8

08005de0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	220a      	movs	r2, #10
 8005dec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005dee:	4b03      	ldr	r3, [pc, #12]	; (8005dfc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bc80      	pop	{r7}
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	2000000c 	.word	0x2000000c

08005e00 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005e0a:	2302      	movs	r3, #2
 8005e0c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d005      	beq.n	8005e20 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bc80      	pop	{r7}
 8005e2a:	4770      	bx	lr

08005e2c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b087      	sub	sp, #28
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	4613      	mov	r3, r2
 8005e38:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e40:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005e4a:	88fa      	ldrh	r2, [r7, #6]
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	371c      	adds	r7, #28
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bc80      	pop	{r7}
 8005e5c:	4770      	bx	lr

08005e5e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b085      	sub	sp, #20
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
 8005e66:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e6e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	683a      	ldr	r2, [r7, #0]
 8005e74:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bc80      	pop	{r7}
 8005e82:	4770      	bx	lr

08005e84 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e92:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d01c      	beq.n	8005ed8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d115      	bne.n	8005ed4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	2181      	movs	r1, #129	; 0x81
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f001 fcc5 	bl	800785a <USBD_LL_Transmit>

      return USBD_OK;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	e002      	b.n	8005eda <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e000      	b.n	8005eda <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005ed8:	2302      	movs	r3, #2
  }
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b084      	sub	sp, #16
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ef0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d017      	beq.n	8005f2c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	7c1b      	ldrb	r3, [r3, #16]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d109      	bne.n	8005f18 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f0e:	2101      	movs	r1, #1
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f001 fcc5 	bl	80078a0 <USBD_LL_PrepareReceive>
 8005f16:	e007      	b.n	8005f28 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f1e:	2340      	movs	r3, #64	; 0x40
 8005f20:	2101      	movs	r1, #1
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f001 fcbc 	bl	80078a0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	e000      	b.n	8005f2e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005f2c:	2302      	movs	r3, #2
  }
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b084      	sub	sp, #16
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	60f8      	str	r0, [r7, #12]
 8005f3e:	60b9      	str	r1, [r7, #8]
 8005f40:	4613      	mov	r3, r2
 8005f42:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d101      	bne.n	8005f4e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	e01a      	b.n	8005f84 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d003      	beq.n	8005f60 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	79fa      	ldrb	r2, [r7, #7]
 8005f7a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f001 fb29 	bl	80075d4 <USBD_LL_Init>

  return USBD_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005f96:	2300      	movs	r3, #0
 8005f98:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d006      	beq.n	8005fae <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	73fb      	strb	r3, [r7, #15]
 8005fac:	e001      	b.n	8005fb2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005fae:	2302      	movs	r3, #2
 8005fb0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bc80      	pop	{r7}
 8005fbc:	4770      	bx	lr

08005fbe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b082      	sub	sp, #8
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f001 fb5e 	bl	8007688 <USBD_LL_Start>

  return USBD_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bc80      	pop	{r7}
 8005fe8:	4770      	bx	lr

08005fea <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b084      	sub	sp, #16
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00c      	beq.n	800601e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	78fa      	ldrb	r2, [r7, #3]
 800600e:	4611      	mov	r1, r2
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	4798      	blx	r3
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d101      	bne.n	800601e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800601e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	460b      	mov	r3, r1
 8006032:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	78fa      	ldrb	r2, [r7, #3]
 800603e:	4611      	mov	r1, r2
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	4798      	blx	r3

  return USBD_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3708      	adds	r7, #8
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b082      	sub	sp, #8
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
 8006056:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800605e:	6839      	ldr	r1, [r7, #0]
 8006060:	4618      	mov	r0, r3
 8006062:	f000 fed8 	bl	8006e16 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2201      	movs	r2, #1
 800606a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006074:	461a      	mov	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006082:	f003 031f 	and.w	r3, r3, #31
 8006086:	2b02      	cmp	r3, #2
 8006088:	d016      	beq.n	80060b8 <USBD_LL_SetupStage+0x6a>
 800608a:	2b02      	cmp	r3, #2
 800608c:	d81c      	bhi.n	80060c8 <USBD_LL_SetupStage+0x7a>
 800608e:	2b00      	cmp	r3, #0
 8006090:	d002      	beq.n	8006098 <USBD_LL_SetupStage+0x4a>
 8006092:	2b01      	cmp	r3, #1
 8006094:	d008      	beq.n	80060a8 <USBD_LL_SetupStage+0x5a>
 8006096:	e017      	b.n	80060c8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800609e:	4619      	mov	r1, r3
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f9cb 	bl	800643c <USBD_StdDevReq>
      break;
 80060a6:	e01a      	b.n	80060de <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80060ae:	4619      	mov	r1, r3
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 fa2d 	bl	8006510 <USBD_StdItfReq>
      break;
 80060b6:	e012      	b.n	80060de <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80060be:	4619      	mov	r1, r3
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 fa6d 	bl	80065a0 <USBD_StdEPReq>
      break;
 80060c6:	e00a      	b.n	80060de <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80060ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	4619      	mov	r1, r3
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f001 fb36 	bl	8007748 <USBD_LL_StallEP>
      break;
 80060dc:	bf00      	nop
  }

  return USBD_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3708      	adds	r7, #8
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	460b      	mov	r3, r1
 80060f2:	607a      	str	r2, [r7, #4]
 80060f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80060f6:	7afb      	ldrb	r3, [r7, #11]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d14b      	bne.n	8006194 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006102:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800610a:	2b03      	cmp	r3, #3
 800610c:	d134      	bne.n	8006178 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	68da      	ldr	r2, [r3, #12]
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	429a      	cmp	r2, r3
 8006118:	d919      	bls.n	800614e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	68da      	ldr	r2, [r3, #12]
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	1ad2      	subs	r2, r2, r3
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	68da      	ldr	r2, [r3, #12]
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006130:	429a      	cmp	r2, r3
 8006132:	d203      	bcs.n	800613c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006138:	b29b      	uxth	r3, r3
 800613a:	e002      	b.n	8006142 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006140:	b29b      	uxth	r3, r3
 8006142:	461a      	mov	r2, r3
 8006144:	6879      	ldr	r1, [r7, #4]
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 ff57 	bl	8006ffa <USBD_CtlContinueRx>
 800614c:	e038      	b.n	80061c0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00a      	beq.n	8006170 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006160:	2b03      	cmp	r3, #3
 8006162:	d105      	bne.n	8006170 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f000 ff54 	bl	800701e <USBD_CtlSendStatus>
 8006176:	e023      	b.n	80061c0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800617e:	2b05      	cmp	r3, #5
 8006180:	d11e      	bne.n	80061c0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800618a:	2100      	movs	r1, #0
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f001 fadb 	bl	8007748 <USBD_LL_StallEP>
 8006192:	e015      	b.n	80061c0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00d      	beq.n	80061bc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80061a6:	2b03      	cmp	r3, #3
 80061a8:	d108      	bne.n	80061bc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	7afa      	ldrb	r2, [r7, #11]
 80061b4:	4611      	mov	r1, r2
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	4798      	blx	r3
 80061ba:	e001      	b.n	80061c0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80061bc:	2302      	movs	r3, #2
 80061be:	e000      	b.n	80061c2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3718      	adds	r7, #24
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b086      	sub	sp, #24
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	60f8      	str	r0, [r7, #12]
 80061d2:	460b      	mov	r3, r1
 80061d4:	607a      	str	r2, [r7, #4]
 80061d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80061d8:	7afb      	ldrb	r3, [r7, #11]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d17f      	bne.n	80062de <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	3314      	adds	r3, #20
 80061e2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d15c      	bne.n	80062a8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	68da      	ldr	r2, [r3, #12]
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d915      	bls.n	8006226 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	68da      	ldr	r2, [r3, #12]
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	1ad2      	subs	r2, r2, r3
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	b29b      	uxth	r3, r3
 800620e:	461a      	mov	r2, r3
 8006210:	6879      	ldr	r1, [r7, #4]
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f000 fec1 	bl	8006f9a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006218:	2300      	movs	r3, #0
 800621a:	2200      	movs	r2, #0
 800621c:	2100      	movs	r1, #0
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f001 fb3e 	bl	80078a0 <USBD_LL_PrepareReceive>
 8006224:	e04e      	b.n	80062c4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	6912      	ldr	r2, [r2, #16]
 800622e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006232:	fb02 f201 	mul.w	r2, r2, r1
 8006236:	1a9b      	subs	r3, r3, r2
 8006238:	2b00      	cmp	r3, #0
 800623a:	d11c      	bne.n	8006276 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	689a      	ldr	r2, [r3, #8]
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006244:	429a      	cmp	r2, r3
 8006246:	d316      	bcc.n	8006276 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	689a      	ldr	r2, [r3, #8]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006252:	429a      	cmp	r2, r3
 8006254:	d20f      	bcs.n	8006276 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006256:	2200      	movs	r2, #0
 8006258:	2100      	movs	r1, #0
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f000 fe9d 	bl	8006f9a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006268:	2300      	movs	r3, #0
 800626a:	2200      	movs	r2, #0
 800626c:	2100      	movs	r1, #0
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f001 fb16 	bl	80078a0 <USBD_LL_PrepareReceive>
 8006274:	e026      	b.n	80062c4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00a      	beq.n	8006298 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006288:	2b03      	cmp	r3, #3
 800628a:	d105      	bne.n	8006298 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006298:	2180      	movs	r1, #128	; 0x80
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f001 fa54 	bl	8007748 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f000 fecf 	bl	8007044 <USBD_CtlReceiveStatus>
 80062a6:	e00d      	b.n	80062c4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062ae:	2b04      	cmp	r3, #4
 80062b0:	d004      	beq.n	80062bc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d103      	bne.n	80062c4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80062bc:	2180      	movs	r1, #128	; 0x80
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f001 fa42 	bl	8007748 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d11d      	bne.n	800630a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f7ff fe81 	bl	8005fd6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80062dc:	e015      	b.n	800630a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00d      	beq.n	8006306 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80062f0:	2b03      	cmp	r3, #3
 80062f2:	d108      	bne.n	8006306 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062fa:	695b      	ldr	r3, [r3, #20]
 80062fc:	7afa      	ldrb	r2, [r7, #11]
 80062fe:	4611      	mov	r1, r2
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	4798      	blx	r3
 8006304:	e001      	b.n	800630a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006306:	2302      	movs	r3, #2
 8006308:	e000      	b.n	800630c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3718      	adds	r7, #24
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800631c:	2340      	movs	r3, #64	; 0x40
 800631e:	2200      	movs	r2, #0
 8006320:	2100      	movs	r1, #0
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f001 f9cb 	bl	80076be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2240      	movs	r2, #64	; 0x40
 8006334:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006338:	2340      	movs	r3, #64	; 0x40
 800633a:	2200      	movs	r2, #0
 800633c:	2180      	movs	r1, #128	; 0x80
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f001 f9bd 	bl	80076be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2240      	movs	r2, #64	; 0x40
 800634e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006374:	2b00      	cmp	r3, #0
 8006376:	d009      	beq.n	800638c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	6852      	ldr	r2, [r2, #4]
 8006384:	b2d2      	uxtb	r2, r2
 8006386:	4611      	mov	r1, r2
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	4798      	blx	r3
  }

  return USBD_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3708      	adds	r7, #8
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006396:	b480      	push	{r7}
 8006398:	b083      	sub	sp, #12
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
 800639e:	460b      	mov	r3, r1
 80063a0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	78fa      	ldrb	r2, [r7, #3]
 80063a6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	370c      	adds	r7, #12
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bc80      	pop	{r7}
 80063b2:	4770      	bx	lr

080063b4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2204      	movs	r2, #4
 80063cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	370c      	adds	r7, #12
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bc80      	pop	{r7}
 80063da:	4770      	bx	lr

080063dc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063ea:	2b04      	cmp	r3, #4
 80063ec:	d105      	bne.n	80063fa <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	bc80      	pop	{r7}
 8006404:	4770      	bx	lr

08006406 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b082      	sub	sp, #8
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006414:	2b03      	cmp	r3, #3
 8006416:	d10b      	bne.n	8006430 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800641e:	69db      	ldr	r3, [r3, #28]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d005      	beq.n	8006430 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800642a:	69db      	ldr	r3, [r3, #28]
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3708      	adds	r7, #8
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
	...

0800643c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006446:	2300      	movs	r3, #0
 8006448:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006452:	2b40      	cmp	r3, #64	; 0x40
 8006454:	d005      	beq.n	8006462 <USBD_StdDevReq+0x26>
 8006456:	2b40      	cmp	r3, #64	; 0x40
 8006458:	d84f      	bhi.n	80064fa <USBD_StdDevReq+0xbe>
 800645a:	2b00      	cmp	r3, #0
 800645c:	d009      	beq.n	8006472 <USBD_StdDevReq+0x36>
 800645e:	2b20      	cmp	r3, #32
 8006460:	d14b      	bne.n	80064fa <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	6839      	ldr	r1, [r7, #0]
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	4798      	blx	r3
      break;
 8006470:	e048      	b.n	8006504 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	785b      	ldrb	r3, [r3, #1]
 8006476:	2b09      	cmp	r3, #9
 8006478:	d839      	bhi.n	80064ee <USBD_StdDevReq+0xb2>
 800647a:	a201      	add	r2, pc, #4	; (adr r2, 8006480 <USBD_StdDevReq+0x44>)
 800647c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006480:	080064d1 	.word	0x080064d1
 8006484:	080064e5 	.word	0x080064e5
 8006488:	080064ef 	.word	0x080064ef
 800648c:	080064db 	.word	0x080064db
 8006490:	080064ef 	.word	0x080064ef
 8006494:	080064b3 	.word	0x080064b3
 8006498:	080064a9 	.word	0x080064a9
 800649c:	080064ef 	.word	0x080064ef
 80064a0:	080064c7 	.word	0x080064c7
 80064a4:	080064bd 	.word	0x080064bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80064a8:	6839      	ldr	r1, [r7, #0]
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f9dc 	bl	8006868 <USBD_GetDescriptor>
          break;
 80064b0:	e022      	b.n	80064f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80064b2:	6839      	ldr	r1, [r7, #0]
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fb3f 	bl	8006b38 <USBD_SetAddress>
          break;
 80064ba:	e01d      	b.n	80064f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80064bc:	6839      	ldr	r1, [r7, #0]
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 fb7e 	bl	8006bc0 <USBD_SetConfig>
          break;
 80064c4:	e018      	b.n	80064f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80064c6:	6839      	ldr	r1, [r7, #0]
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 fc07 	bl	8006cdc <USBD_GetConfig>
          break;
 80064ce:	e013      	b.n	80064f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80064d0:	6839      	ldr	r1, [r7, #0]
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 fc37 	bl	8006d46 <USBD_GetStatus>
          break;
 80064d8:	e00e      	b.n	80064f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80064da:	6839      	ldr	r1, [r7, #0]
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 fc65 	bl	8006dac <USBD_SetFeature>
          break;
 80064e2:	e009      	b.n	80064f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80064e4:	6839      	ldr	r1, [r7, #0]
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 fc74 	bl	8006dd4 <USBD_ClrFeature>
          break;
 80064ec:	e004      	b.n	80064f8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80064ee:	6839      	ldr	r1, [r7, #0]
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 fccc 	bl	8006e8e <USBD_CtlError>
          break;
 80064f6:	bf00      	nop
      }
      break;
 80064f8:	e004      	b.n	8006504 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80064fa:	6839      	ldr	r1, [r7, #0]
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 fcc6 	bl	8006e8e <USBD_CtlError>
      break;
 8006502:	bf00      	nop
  }

  return ret;
 8006504:	7bfb      	ldrb	r3, [r7, #15]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop

08006510 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800651a:	2300      	movs	r3, #0
 800651c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006526:	2b40      	cmp	r3, #64	; 0x40
 8006528:	d005      	beq.n	8006536 <USBD_StdItfReq+0x26>
 800652a:	2b40      	cmp	r3, #64	; 0x40
 800652c:	d82e      	bhi.n	800658c <USBD_StdItfReq+0x7c>
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <USBD_StdItfReq+0x26>
 8006532:	2b20      	cmp	r3, #32
 8006534:	d12a      	bne.n	800658c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800653c:	3b01      	subs	r3, #1
 800653e:	2b02      	cmp	r3, #2
 8006540:	d81d      	bhi.n	800657e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	889b      	ldrh	r3, [r3, #4]
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b01      	cmp	r3, #1
 800654a:	d813      	bhi.n	8006574 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	6839      	ldr	r1, [r7, #0]
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	4798      	blx	r3
 800655a:	4603      	mov	r3, r0
 800655c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	88db      	ldrh	r3, [r3, #6]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d110      	bne.n	8006588 <USBD_StdItfReq+0x78>
 8006566:	7bfb      	ldrb	r3, [r7, #15]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10d      	bne.n	8006588 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 fd56 	bl	800701e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006572:	e009      	b.n	8006588 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006574:	6839      	ldr	r1, [r7, #0]
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fc89 	bl	8006e8e <USBD_CtlError>
          break;
 800657c:	e004      	b.n	8006588 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800657e:	6839      	ldr	r1, [r7, #0]
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fc84 	bl	8006e8e <USBD_CtlError>
          break;
 8006586:	e000      	b.n	800658a <USBD_StdItfReq+0x7a>
          break;
 8006588:	bf00      	nop
      }
      break;
 800658a:	e004      	b.n	8006596 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800658c:	6839      	ldr	r1, [r7, #0]
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 fc7d 	bl	8006e8e <USBD_CtlError>
      break;
 8006594:	bf00      	nop
  }

  return USBD_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80065aa:	2300      	movs	r3, #0
 80065ac:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	889b      	ldrh	r3, [r3, #4]
 80065b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065bc:	2b40      	cmp	r3, #64	; 0x40
 80065be:	d007      	beq.n	80065d0 <USBD_StdEPReq+0x30>
 80065c0:	2b40      	cmp	r3, #64	; 0x40
 80065c2:	f200 8146 	bhi.w	8006852 <USBD_StdEPReq+0x2b2>
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00a      	beq.n	80065e0 <USBD_StdEPReq+0x40>
 80065ca:	2b20      	cmp	r3, #32
 80065cc:	f040 8141 	bne.w	8006852 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	6839      	ldr	r1, [r7, #0]
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	4798      	blx	r3
      break;
 80065de:	e13d      	b.n	800685c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065e8:	2b20      	cmp	r3, #32
 80065ea:	d10a      	bne.n	8006602 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	6839      	ldr	r1, [r7, #0]
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	4798      	blx	r3
 80065fa:	4603      	mov	r3, r0
 80065fc:	73fb      	strb	r3, [r7, #15]

        return ret;
 80065fe:	7bfb      	ldrb	r3, [r7, #15]
 8006600:	e12d      	b.n	800685e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	785b      	ldrb	r3, [r3, #1]
 8006606:	2b03      	cmp	r3, #3
 8006608:	d007      	beq.n	800661a <USBD_StdEPReq+0x7a>
 800660a:	2b03      	cmp	r3, #3
 800660c:	f300 811b 	bgt.w	8006846 <USBD_StdEPReq+0x2a6>
 8006610:	2b00      	cmp	r3, #0
 8006612:	d072      	beq.n	80066fa <USBD_StdEPReq+0x15a>
 8006614:	2b01      	cmp	r3, #1
 8006616:	d03a      	beq.n	800668e <USBD_StdEPReq+0xee>
 8006618:	e115      	b.n	8006846 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006620:	2b02      	cmp	r3, #2
 8006622:	d002      	beq.n	800662a <USBD_StdEPReq+0x8a>
 8006624:	2b03      	cmp	r3, #3
 8006626:	d015      	beq.n	8006654 <USBD_StdEPReq+0xb4>
 8006628:	e02b      	b.n	8006682 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800662a:	7bbb      	ldrb	r3, [r7, #14]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00c      	beq.n	800664a <USBD_StdEPReq+0xaa>
 8006630:	7bbb      	ldrb	r3, [r7, #14]
 8006632:	2b80      	cmp	r3, #128	; 0x80
 8006634:	d009      	beq.n	800664a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006636:	7bbb      	ldrb	r3, [r7, #14]
 8006638:	4619      	mov	r1, r3
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f001 f884 	bl	8007748 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006640:	2180      	movs	r1, #128	; 0x80
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f001 f880 	bl	8007748 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006648:	e020      	b.n	800668c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800664a:	6839      	ldr	r1, [r7, #0]
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 fc1e 	bl	8006e8e <USBD_CtlError>
              break;
 8006652:	e01b      	b.n	800668c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	885b      	ldrh	r3, [r3, #2]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10e      	bne.n	800667a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800665c:	7bbb      	ldrb	r3, [r7, #14]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00b      	beq.n	800667a <USBD_StdEPReq+0xda>
 8006662:	7bbb      	ldrb	r3, [r7, #14]
 8006664:	2b80      	cmp	r3, #128	; 0x80
 8006666:	d008      	beq.n	800667a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	88db      	ldrh	r3, [r3, #6]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d104      	bne.n	800667a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006670:	7bbb      	ldrb	r3, [r7, #14]
 8006672:	4619      	mov	r1, r3
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f001 f867 	bl	8007748 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 fccf 	bl	800701e <USBD_CtlSendStatus>

              break;
 8006680:	e004      	b.n	800668c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006682:	6839      	ldr	r1, [r7, #0]
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 fc02 	bl	8006e8e <USBD_CtlError>
              break;
 800668a:	bf00      	nop
          }
          break;
 800668c:	e0e0      	b.n	8006850 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006694:	2b02      	cmp	r3, #2
 8006696:	d002      	beq.n	800669e <USBD_StdEPReq+0xfe>
 8006698:	2b03      	cmp	r3, #3
 800669a:	d015      	beq.n	80066c8 <USBD_StdEPReq+0x128>
 800669c:	e026      	b.n	80066ec <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800669e:	7bbb      	ldrb	r3, [r7, #14]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00c      	beq.n	80066be <USBD_StdEPReq+0x11e>
 80066a4:	7bbb      	ldrb	r3, [r7, #14]
 80066a6:	2b80      	cmp	r3, #128	; 0x80
 80066a8:	d009      	beq.n	80066be <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80066aa:	7bbb      	ldrb	r3, [r7, #14]
 80066ac:	4619      	mov	r1, r3
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f001 f84a 	bl	8007748 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80066b4:	2180      	movs	r1, #128	; 0x80
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f001 f846 	bl	8007748 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80066bc:	e01c      	b.n	80066f8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80066be:	6839      	ldr	r1, [r7, #0]
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 fbe4 	bl	8006e8e <USBD_CtlError>
              break;
 80066c6:	e017      	b.n	80066f8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	885b      	ldrh	r3, [r3, #2]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d112      	bne.n	80066f6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80066d0:	7bbb      	ldrb	r3, [r7, #14]
 80066d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d004      	beq.n	80066e4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80066da:	7bbb      	ldrb	r3, [r7, #14]
 80066dc:	4619      	mov	r1, r3
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f001 f851 	bl	8007786 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fc9a 	bl	800701e <USBD_CtlSendStatus>
              }
              break;
 80066ea:	e004      	b.n	80066f6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80066ec:	6839      	ldr	r1, [r7, #0]
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 fbcd 	bl	8006e8e <USBD_CtlError>
              break;
 80066f4:	e000      	b.n	80066f8 <USBD_StdEPReq+0x158>
              break;
 80066f6:	bf00      	nop
          }
          break;
 80066f8:	e0aa      	b.n	8006850 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006700:	2b02      	cmp	r3, #2
 8006702:	d002      	beq.n	800670a <USBD_StdEPReq+0x16a>
 8006704:	2b03      	cmp	r3, #3
 8006706:	d032      	beq.n	800676e <USBD_StdEPReq+0x1ce>
 8006708:	e097      	b.n	800683a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800670a:	7bbb      	ldrb	r3, [r7, #14]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d007      	beq.n	8006720 <USBD_StdEPReq+0x180>
 8006710:	7bbb      	ldrb	r3, [r7, #14]
 8006712:	2b80      	cmp	r3, #128	; 0x80
 8006714:	d004      	beq.n	8006720 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006716:	6839      	ldr	r1, [r7, #0]
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fbb8 	bl	8006e8e <USBD_CtlError>
                break;
 800671e:	e091      	b.n	8006844 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006720:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006724:	2b00      	cmp	r3, #0
 8006726:	da0b      	bge.n	8006740 <USBD_StdEPReq+0x1a0>
 8006728:	7bbb      	ldrb	r3, [r7, #14]
 800672a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800672e:	4613      	mov	r3, r2
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	4413      	add	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	3310      	adds	r3, #16
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	4413      	add	r3, r2
 800673c:	3304      	adds	r3, #4
 800673e:	e00b      	b.n	8006758 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006740:	7bbb      	ldrb	r3, [r7, #14]
 8006742:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006746:	4613      	mov	r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	4413      	add	r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	4413      	add	r3, r2
 8006756:	3304      	adds	r3, #4
 8006758:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	2200      	movs	r2, #0
 800675e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	2202      	movs	r2, #2
 8006764:	4619      	mov	r1, r3
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fbfb 	bl	8006f62 <USBD_CtlSendData>
              break;
 800676c:	e06a      	b.n	8006844 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800676e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006772:	2b00      	cmp	r3, #0
 8006774:	da11      	bge.n	800679a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006776:	7bbb      	ldrb	r3, [r7, #14]
 8006778:	f003 020f 	and.w	r2, r3, #15
 800677c:	6879      	ldr	r1, [r7, #4]
 800677e:	4613      	mov	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	440b      	add	r3, r1
 8006788:	3318      	adds	r3, #24
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d117      	bne.n	80067c0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006790:	6839      	ldr	r1, [r7, #0]
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 fb7b 	bl	8006e8e <USBD_CtlError>
                  break;
 8006798:	e054      	b.n	8006844 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800679a:	7bbb      	ldrb	r3, [r7, #14]
 800679c:	f003 020f 	and.w	r2, r3, #15
 80067a0:	6879      	ldr	r1, [r7, #4]
 80067a2:	4613      	mov	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	440b      	add	r3, r1
 80067ac:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d104      	bne.n	80067c0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80067b6:	6839      	ldr	r1, [r7, #0]
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 fb68 	bl	8006e8e <USBD_CtlError>
                  break;
 80067be:	e041      	b.n	8006844 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	da0b      	bge.n	80067e0 <USBD_StdEPReq+0x240>
 80067c8:	7bbb      	ldrb	r3, [r7, #14]
 80067ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067ce:	4613      	mov	r3, r2
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	4413      	add	r3, r2
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	3310      	adds	r3, #16
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	4413      	add	r3, r2
 80067dc:	3304      	adds	r3, #4
 80067de:	e00b      	b.n	80067f8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80067e0:	7bbb      	ldrb	r3, [r7, #14]
 80067e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067e6:	4613      	mov	r3, r2
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	4413      	add	r3, r2
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	4413      	add	r3, r2
 80067f6:	3304      	adds	r3, #4
 80067f8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80067fa:	7bbb      	ldrb	r3, [r7, #14]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d002      	beq.n	8006806 <USBD_StdEPReq+0x266>
 8006800:	7bbb      	ldrb	r3, [r7, #14]
 8006802:	2b80      	cmp	r3, #128	; 0x80
 8006804:	d103      	bne.n	800680e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	2200      	movs	r2, #0
 800680a:	601a      	str	r2, [r3, #0]
 800680c:	e00e      	b.n	800682c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800680e:	7bbb      	ldrb	r3, [r7, #14]
 8006810:	4619      	mov	r1, r3
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 ffd6 	bl	80077c4 <USBD_LL_IsStallEP>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d003      	beq.n	8006826 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	2201      	movs	r2, #1
 8006822:	601a      	str	r2, [r3, #0]
 8006824:	e002      	b.n	800682c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	2200      	movs	r2, #0
 800682a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	2202      	movs	r2, #2
 8006830:	4619      	mov	r1, r3
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fb95 	bl	8006f62 <USBD_CtlSendData>
              break;
 8006838:	e004      	b.n	8006844 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800683a:	6839      	ldr	r1, [r7, #0]
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fb26 	bl	8006e8e <USBD_CtlError>
              break;
 8006842:	bf00      	nop
          }
          break;
 8006844:	e004      	b.n	8006850 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006846:	6839      	ldr	r1, [r7, #0]
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 fb20 	bl	8006e8e <USBD_CtlError>
          break;
 800684e:	bf00      	nop
      }
      break;
 8006850:	e004      	b.n	800685c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006852:	6839      	ldr	r1, [r7, #0]
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 fb1a 	bl	8006e8e <USBD_CtlError>
      break;
 800685a:	bf00      	nop
  }

  return ret;
 800685c:	7bfb      	ldrb	r3, [r7, #15]
}
 800685e:	4618      	mov	r0, r3
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
	...

08006868 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006872:	2300      	movs	r3, #0
 8006874:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006876:	2300      	movs	r3, #0
 8006878:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800687a:	2300      	movs	r3, #0
 800687c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	885b      	ldrh	r3, [r3, #2]
 8006882:	0a1b      	lsrs	r3, r3, #8
 8006884:	b29b      	uxth	r3, r3
 8006886:	3b01      	subs	r3, #1
 8006888:	2b06      	cmp	r3, #6
 800688a:	f200 8128 	bhi.w	8006ade <USBD_GetDescriptor+0x276>
 800688e:	a201      	add	r2, pc, #4	; (adr r2, 8006894 <USBD_GetDescriptor+0x2c>)
 8006890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006894:	080068b1 	.word	0x080068b1
 8006898:	080068c9 	.word	0x080068c9
 800689c:	08006909 	.word	0x08006909
 80068a0:	08006adf 	.word	0x08006adf
 80068a4:	08006adf 	.word	0x08006adf
 80068a8:	08006a7f 	.word	0x08006a7f
 80068ac:	08006aab 	.word	0x08006aab
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	7c12      	ldrb	r2, [r2, #16]
 80068bc:	f107 0108 	add.w	r1, r7, #8
 80068c0:	4610      	mov	r0, r2
 80068c2:	4798      	blx	r3
 80068c4:	60f8      	str	r0, [r7, #12]
      break;
 80068c6:	e112      	b.n	8006aee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	7c1b      	ldrb	r3, [r3, #16]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d10d      	bne.n	80068ec <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d8:	f107 0208 	add.w	r2, r7, #8
 80068dc:	4610      	mov	r0, r2
 80068de:	4798      	blx	r3
 80068e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	3301      	adds	r3, #1
 80068e6:	2202      	movs	r2, #2
 80068e8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80068ea:	e100      	b.n	8006aee <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f4:	f107 0208 	add.w	r2, r7, #8
 80068f8:	4610      	mov	r0, r2
 80068fa:	4798      	blx	r3
 80068fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	3301      	adds	r3, #1
 8006902:	2202      	movs	r2, #2
 8006904:	701a      	strb	r2, [r3, #0]
      break;
 8006906:	e0f2      	b.n	8006aee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	885b      	ldrh	r3, [r3, #2]
 800690c:	b2db      	uxtb	r3, r3
 800690e:	2b05      	cmp	r3, #5
 8006910:	f200 80ac 	bhi.w	8006a6c <USBD_GetDescriptor+0x204>
 8006914:	a201      	add	r2, pc, #4	; (adr r2, 800691c <USBD_GetDescriptor+0xb4>)
 8006916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800691a:	bf00      	nop
 800691c:	08006935 	.word	0x08006935
 8006920:	08006969 	.word	0x08006969
 8006924:	0800699d 	.word	0x0800699d
 8006928:	080069d1 	.word	0x080069d1
 800692c:	08006a05 	.word	0x08006a05
 8006930:	08006a39 	.word	0x08006a39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00b      	beq.n	8006958 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	7c12      	ldrb	r2, [r2, #16]
 800694c:	f107 0108 	add.w	r1, r7, #8
 8006950:	4610      	mov	r0, r2
 8006952:	4798      	blx	r3
 8006954:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006956:	e091      	b.n	8006a7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006958:	6839      	ldr	r1, [r7, #0]
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fa97 	bl	8006e8e <USBD_CtlError>
            err++;
 8006960:	7afb      	ldrb	r3, [r7, #11]
 8006962:	3301      	adds	r3, #1
 8006964:	72fb      	strb	r3, [r7, #11]
          break;
 8006966:	e089      	b.n	8006a7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00b      	beq.n	800698c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	7c12      	ldrb	r2, [r2, #16]
 8006980:	f107 0108 	add.w	r1, r7, #8
 8006984:	4610      	mov	r0, r2
 8006986:	4798      	blx	r3
 8006988:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800698a:	e077      	b.n	8006a7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800698c:	6839      	ldr	r1, [r7, #0]
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fa7d 	bl	8006e8e <USBD_CtlError>
            err++;
 8006994:	7afb      	ldrb	r3, [r7, #11]
 8006996:	3301      	adds	r3, #1
 8006998:	72fb      	strb	r3, [r7, #11]
          break;
 800699a:	e06f      	b.n	8006a7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00b      	beq.n	80069c0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	7c12      	ldrb	r2, [r2, #16]
 80069b4:	f107 0108 	add.w	r1, r7, #8
 80069b8:	4610      	mov	r0, r2
 80069ba:	4798      	blx	r3
 80069bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069be:	e05d      	b.n	8006a7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069c0:	6839      	ldr	r1, [r7, #0]
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fa63 	bl	8006e8e <USBD_CtlError>
            err++;
 80069c8:	7afb      	ldrb	r3, [r7, #11]
 80069ca:	3301      	adds	r3, #1
 80069cc:	72fb      	strb	r3, [r7, #11]
          break;
 80069ce:	e055      	b.n	8006a7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00b      	beq.n	80069f4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	7c12      	ldrb	r2, [r2, #16]
 80069e8:	f107 0108 	add.w	r1, r7, #8
 80069ec:	4610      	mov	r0, r2
 80069ee:	4798      	blx	r3
 80069f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069f2:	e043      	b.n	8006a7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069f4:	6839      	ldr	r1, [r7, #0]
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 fa49 	bl	8006e8e <USBD_CtlError>
            err++;
 80069fc:	7afb      	ldrb	r3, [r7, #11]
 80069fe:	3301      	adds	r3, #1
 8006a00:	72fb      	strb	r3, [r7, #11]
          break;
 8006a02:	e03b      	b.n	8006a7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a0a:	695b      	ldr	r3, [r3, #20]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00b      	beq.n	8006a28 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a16:	695b      	ldr	r3, [r3, #20]
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	7c12      	ldrb	r2, [r2, #16]
 8006a1c:	f107 0108 	add.w	r1, r7, #8
 8006a20:	4610      	mov	r0, r2
 8006a22:	4798      	blx	r3
 8006a24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a26:	e029      	b.n	8006a7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a28:	6839      	ldr	r1, [r7, #0]
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 fa2f 	bl	8006e8e <USBD_CtlError>
            err++;
 8006a30:	7afb      	ldrb	r3, [r7, #11]
 8006a32:	3301      	adds	r3, #1
 8006a34:	72fb      	strb	r3, [r7, #11]
          break;
 8006a36:	e021      	b.n	8006a7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00b      	beq.n	8006a5c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	7c12      	ldrb	r2, [r2, #16]
 8006a50:	f107 0108 	add.w	r1, r7, #8
 8006a54:	4610      	mov	r0, r2
 8006a56:	4798      	blx	r3
 8006a58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a5a:	e00f      	b.n	8006a7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a5c:	6839      	ldr	r1, [r7, #0]
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fa15 	bl	8006e8e <USBD_CtlError>
            err++;
 8006a64:	7afb      	ldrb	r3, [r7, #11]
 8006a66:	3301      	adds	r3, #1
 8006a68:	72fb      	strb	r3, [r7, #11]
          break;
 8006a6a:	e007      	b.n	8006a7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006a6c:	6839      	ldr	r1, [r7, #0]
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 fa0d 	bl	8006e8e <USBD_CtlError>
          err++;
 8006a74:	7afb      	ldrb	r3, [r7, #11]
 8006a76:	3301      	adds	r3, #1
 8006a78:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006a7a:	e038      	b.n	8006aee <USBD_GetDescriptor+0x286>
 8006a7c:	e037      	b.n	8006aee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	7c1b      	ldrb	r3, [r3, #16]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d109      	bne.n	8006a9a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a8e:	f107 0208 	add.w	r2, r7, #8
 8006a92:	4610      	mov	r0, r2
 8006a94:	4798      	blx	r3
 8006a96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a98:	e029      	b.n	8006aee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a9a:	6839      	ldr	r1, [r7, #0]
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 f9f6 	bl	8006e8e <USBD_CtlError>
        err++;
 8006aa2:	7afb      	ldrb	r3, [r7, #11]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	72fb      	strb	r3, [r7, #11]
      break;
 8006aa8:	e021      	b.n	8006aee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	7c1b      	ldrb	r3, [r3, #16]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10d      	bne.n	8006ace <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aba:	f107 0208 	add.w	r2, r7, #8
 8006abe:	4610      	mov	r0, r2
 8006ac0:	4798      	blx	r3
 8006ac2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	2207      	movs	r2, #7
 8006aca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006acc:	e00f      	b.n	8006aee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006ace:	6839      	ldr	r1, [r7, #0]
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 f9dc 	bl	8006e8e <USBD_CtlError>
        err++;
 8006ad6:	7afb      	ldrb	r3, [r7, #11]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	72fb      	strb	r3, [r7, #11]
      break;
 8006adc:	e007      	b.n	8006aee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006ade:	6839      	ldr	r1, [r7, #0]
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 f9d4 	bl	8006e8e <USBD_CtlError>
      err++;
 8006ae6:	7afb      	ldrb	r3, [r7, #11]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	72fb      	strb	r3, [r7, #11]
      break;
 8006aec:	bf00      	nop
  }

  if (err != 0U)
 8006aee:	7afb      	ldrb	r3, [r7, #11]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d11c      	bne.n	8006b2e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006af4:	893b      	ldrh	r3, [r7, #8]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d011      	beq.n	8006b1e <USBD_GetDescriptor+0x2b6>
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	88db      	ldrh	r3, [r3, #6]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00d      	beq.n	8006b1e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	88da      	ldrh	r2, [r3, #6]
 8006b06:	893b      	ldrh	r3, [r7, #8]
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	bf28      	it	cs
 8006b0c:	4613      	movcs	r3, r2
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b12:	893b      	ldrh	r3, [r7, #8]
 8006b14:	461a      	mov	r2, r3
 8006b16:	68f9      	ldr	r1, [r7, #12]
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 fa22 	bl	8006f62 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	88db      	ldrh	r3, [r3, #6]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d104      	bne.n	8006b30 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 fa79 	bl	800701e <USBD_CtlSendStatus>
 8006b2c:	e000      	b.n	8006b30 <USBD_GetDescriptor+0x2c8>
    return;
 8006b2e:	bf00      	nop
    }
  }
}
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop

08006b38 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	889b      	ldrh	r3, [r3, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d130      	bne.n	8006bac <USBD_SetAddress+0x74>
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	88db      	ldrh	r3, [r3, #6]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d12c      	bne.n	8006bac <USBD_SetAddress+0x74>
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	885b      	ldrh	r3, [r3, #2]
 8006b56:	2b7f      	cmp	r3, #127	; 0x7f
 8006b58:	d828      	bhi.n	8006bac <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	885b      	ldrh	r3, [r3, #2]
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b64:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b6c:	2b03      	cmp	r3, #3
 8006b6e:	d104      	bne.n	8006b7a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006b70:	6839      	ldr	r1, [r7, #0]
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f98b 	bl	8006e8e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b78:	e01d      	b.n	8006bb6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	7bfa      	ldrb	r2, [r7, #15]
 8006b7e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b82:	7bfb      	ldrb	r3, [r7, #15]
 8006b84:	4619      	mov	r1, r3
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fe48 	bl	800781c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fa46 	bl	800701e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b92:	7bfb      	ldrb	r3, [r7, #15]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d004      	beq.n	8006ba2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ba0:	e009      	b.n	8006bb6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006baa:	e004      	b.n	8006bb6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006bac:	6839      	ldr	r1, [r7, #0]
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f96d 	bl	8006e8e <USBD_CtlError>
  }
}
 8006bb4:	bf00      	nop
 8006bb6:	bf00      	nop
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
	...

08006bc0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	885b      	ldrh	r3, [r3, #2]
 8006bce:	b2da      	uxtb	r2, r3
 8006bd0:	4b41      	ldr	r3, [pc, #260]	; (8006cd8 <USBD_SetConfig+0x118>)
 8006bd2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006bd4:	4b40      	ldr	r3, [pc, #256]	; (8006cd8 <USBD_SetConfig+0x118>)
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d904      	bls.n	8006be6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006bdc:	6839      	ldr	r1, [r7, #0]
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f955 	bl	8006e8e <USBD_CtlError>
 8006be4:	e075      	b.n	8006cd2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d002      	beq.n	8006bf6 <USBD_SetConfig+0x36>
 8006bf0:	2b03      	cmp	r3, #3
 8006bf2:	d023      	beq.n	8006c3c <USBD_SetConfig+0x7c>
 8006bf4:	e062      	b.n	8006cbc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006bf6:	4b38      	ldr	r3, [pc, #224]	; (8006cd8 <USBD_SetConfig+0x118>)
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d01a      	beq.n	8006c34 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006bfe:	4b36      	ldr	r3, [pc, #216]	; (8006cd8 <USBD_SetConfig+0x118>)
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	461a      	mov	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2203      	movs	r2, #3
 8006c0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006c10:	4b31      	ldr	r3, [pc, #196]	; (8006cd8 <USBD_SetConfig+0x118>)
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	4619      	mov	r1, r3
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f7ff f9e7 	bl	8005fea <USBD_SetClassConfig>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d104      	bne.n	8006c2c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006c22:	6839      	ldr	r1, [r7, #0]
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 f932 	bl	8006e8e <USBD_CtlError>
            return;
 8006c2a:	e052      	b.n	8006cd2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 f9f6 	bl	800701e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006c32:	e04e      	b.n	8006cd2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f9f2 	bl	800701e <USBD_CtlSendStatus>
        break;
 8006c3a:	e04a      	b.n	8006cd2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006c3c:	4b26      	ldr	r3, [pc, #152]	; (8006cd8 <USBD_SetConfig+0x118>)
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d112      	bne.n	8006c6a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2202      	movs	r2, #2
 8006c48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006c4c:	4b22      	ldr	r3, [pc, #136]	; (8006cd8 <USBD_SetConfig+0x118>)
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	461a      	mov	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006c56:	4b20      	ldr	r3, [pc, #128]	; (8006cd8 <USBD_SetConfig+0x118>)
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7ff f9e3 	bl	8006028 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f9db 	bl	800701e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006c68:	e033      	b.n	8006cd2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006c6a:	4b1b      	ldr	r3, [pc, #108]	; (8006cd8 <USBD_SetConfig+0x118>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d01d      	beq.n	8006cb4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	4619      	mov	r1, r3
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f7ff f9d1 	bl	8006028 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006c86:	4b14      	ldr	r3, [pc, #80]	; (8006cd8 <USBD_SetConfig+0x118>)
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006c90:	4b11      	ldr	r3, [pc, #68]	; (8006cd8 <USBD_SetConfig+0x118>)
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	4619      	mov	r1, r3
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7ff f9a7 	bl	8005fea <USBD_SetClassConfig>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d104      	bne.n	8006cac <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006ca2:	6839      	ldr	r1, [r7, #0]
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 f8f2 	bl	8006e8e <USBD_CtlError>
            return;
 8006caa:	e012      	b.n	8006cd2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f9b6 	bl	800701e <USBD_CtlSendStatus>
        break;
 8006cb2:	e00e      	b.n	8006cd2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f9b2 	bl	800701e <USBD_CtlSendStatus>
        break;
 8006cba:	e00a      	b.n	8006cd2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006cbc:	6839      	ldr	r1, [r7, #0]
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f8e5 	bl	8006e8e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006cc4:	4b04      	ldr	r3, [pc, #16]	; (8006cd8 <USBD_SetConfig+0x118>)
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	4619      	mov	r1, r3
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7ff f9ac 	bl	8006028 <USBD_ClrClassConfig>
        break;
 8006cd0:	bf00      	nop
    }
  }
}
 8006cd2:	3708      	adds	r7, #8
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	200001a4 	.word	0x200001a4

08006cdc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	88db      	ldrh	r3, [r3, #6]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d004      	beq.n	8006cf8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006cee:	6839      	ldr	r1, [r7, #0]
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f8cc 	bl	8006e8e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006cf6:	e022      	b.n	8006d3e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	dc02      	bgt.n	8006d08 <USBD_GetConfig+0x2c>
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	dc03      	bgt.n	8006d0e <USBD_GetConfig+0x32>
 8006d06:	e015      	b.n	8006d34 <USBD_GetConfig+0x58>
 8006d08:	2b03      	cmp	r3, #3
 8006d0a:	d00b      	beq.n	8006d24 <USBD_GetConfig+0x48>
 8006d0c:	e012      	b.n	8006d34 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	3308      	adds	r3, #8
 8006d18:	2201      	movs	r2, #1
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 f920 	bl	8006f62 <USBD_CtlSendData>
        break;
 8006d22:	e00c      	b.n	8006d3e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	3304      	adds	r3, #4
 8006d28:	2201      	movs	r2, #1
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 f918 	bl	8006f62 <USBD_CtlSendData>
        break;
 8006d32:	e004      	b.n	8006d3e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006d34:	6839      	ldr	r1, [r7, #0]
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f8a9 	bl	8006e8e <USBD_CtlError>
        break;
 8006d3c:	bf00      	nop
}
 8006d3e:	bf00      	nop
 8006d40:	3708      	adds	r7, #8
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b082      	sub	sp, #8
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
 8006d4e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d56:	3b01      	subs	r3, #1
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d81e      	bhi.n	8006d9a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	88db      	ldrh	r3, [r3, #6]
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d004      	beq.n	8006d6e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006d64:	6839      	ldr	r1, [r7, #0]
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 f891 	bl	8006e8e <USBD_CtlError>
        break;
 8006d6c:	e01a      	b.n	8006da4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2201      	movs	r2, #1
 8006d72:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d005      	beq.n	8006d8a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	f043 0202 	orr.w	r2, r3, #2
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	330c      	adds	r3, #12
 8006d8e:	2202      	movs	r2, #2
 8006d90:	4619      	mov	r1, r3
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f8e5 	bl	8006f62 <USBD_CtlSendData>
      break;
 8006d98:	e004      	b.n	8006da4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006d9a:	6839      	ldr	r1, [r7, #0]
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 f876 	bl	8006e8e <USBD_CtlError>
      break;
 8006da2:	bf00      	nop
  }
}
 8006da4:	bf00      	nop
 8006da6:	3708      	adds	r7, #8
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	885b      	ldrh	r3, [r3, #2]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d106      	bne.n	8006dcc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f929 	bl	800701e <USBD_CtlSendStatus>
  }
}
 8006dcc:	bf00      	nop
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006de4:	3b01      	subs	r3, #1
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d80b      	bhi.n	8006e02 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	885b      	ldrh	r3, [r3, #2]
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d10c      	bne.n	8006e0c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f90f 	bl	800701e <USBD_CtlSendStatus>
      }
      break;
 8006e00:	e004      	b.n	8006e0c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006e02:	6839      	ldr	r1, [r7, #0]
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 f842 	bl	8006e8e <USBD_CtlError>
      break;
 8006e0a:	e000      	b.n	8006e0e <USBD_ClrFeature+0x3a>
      break;
 8006e0c:	bf00      	nop
  }
}
 8006e0e:	bf00      	nop
 8006e10:	3708      	adds	r7, #8
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b083      	sub	sp, #12
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	781a      	ldrb	r2, [r3, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	785a      	ldrb	r2, [r3, #1]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	3302      	adds	r3, #2
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	3303      	adds	r3, #3
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	021b      	lsls	r3, r3, #8
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	4413      	add	r3, r2
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	3304      	adds	r3, #4
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	3305      	adds	r3, #5
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	021b      	lsls	r3, r3, #8
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	4413      	add	r3, r2
 8006e62:	b29a      	uxth	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	3306      	adds	r3, #6
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	3307      	adds	r3, #7
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	021b      	lsls	r3, r3, #8
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	4413      	add	r3, r2
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	80da      	strh	r2, [r3, #6]

}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bc80      	pop	{r7}
 8006e8c:	4770      	bx	lr

08006e8e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b082      	sub	sp, #8
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
 8006e96:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006e98:	2180      	movs	r1, #128	; 0x80
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 fc54 	bl	8007748 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006ea0:	2100      	movs	r1, #0
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fc50 	bl	8007748 <USBD_LL_StallEP>
}
 8006ea8:	bf00      	nop
 8006eaa:	3708      	adds	r7, #8
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b086      	sub	sp, #24
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d032      	beq.n	8006f2c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006ec6:	68f8      	ldr	r0, [r7, #12]
 8006ec8:	f000 f834 	bl	8006f34 <USBD_GetLen>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	3301      	adds	r3, #1
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	005b      	lsls	r3, r3, #1
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006eda:	7dfb      	ldrb	r3, [r7, #23]
 8006edc:	1c5a      	adds	r2, r3, #1
 8006ede:	75fa      	strb	r2, [r7, #23]
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	7812      	ldrb	r2, [r2, #0]
 8006eea:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006eec:	7dfb      	ldrb	r3, [r7, #23]
 8006eee:	1c5a      	adds	r2, r3, #1
 8006ef0:	75fa      	strb	r2, [r7, #23]
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	2203      	movs	r2, #3
 8006efa:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006efc:	e012      	b.n	8006f24 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	1c5a      	adds	r2, r3, #1
 8006f02:	60fa      	str	r2, [r7, #12]
 8006f04:	7dfa      	ldrb	r2, [r7, #23]
 8006f06:	1c51      	adds	r1, r2, #1
 8006f08:	75f9      	strb	r1, [r7, #23]
 8006f0a:	4611      	mov	r1, r2
 8006f0c:	68ba      	ldr	r2, [r7, #8]
 8006f0e:	440a      	add	r2, r1
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006f14:	7dfb      	ldrb	r3, [r7, #23]
 8006f16:	1c5a      	adds	r2, r3, #1
 8006f18:	75fa      	strb	r2, [r7, #23]
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	4413      	add	r3, r2
 8006f20:	2200      	movs	r2, #0
 8006f22:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1e8      	bne.n	8006efe <USBD_GetString+0x4e>
    }
  }
}
 8006f2c:	bf00      	nop
 8006f2e:	3718      	adds	r7, #24
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006f40:	e005      	b.n	8006f4e <USBD_GetLen+0x1a>
  {
    len++;
 8006f42:	7bfb      	ldrb	r3, [r7, #15]
 8006f44:	3301      	adds	r3, #1
 8006f46:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1f5      	bne.n	8006f42 <USBD_GetLen+0xe>
  }

  return len;
 8006f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3714      	adds	r7, #20
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bc80      	pop	{r7}
 8006f60:	4770      	bx	lr

08006f62 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b084      	sub	sp, #16
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	60f8      	str	r0, [r7, #12]
 8006f6a:	60b9      	str	r1, [r7, #8]
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2202      	movs	r2, #2
 8006f74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006f78:	88fa      	ldrh	r2, [r7, #6]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006f7e:	88fa      	ldrh	r2, [r7, #6]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f84:	88fb      	ldrh	r3, [r7, #6]
 8006f86:	68ba      	ldr	r2, [r7, #8]
 8006f88:	2100      	movs	r1, #0
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f000 fc65 	bl	800785a <USBD_LL_Transmit>

  return USBD_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b084      	sub	sp, #16
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	60f8      	str	r0, [r7, #12]
 8006fa2:	60b9      	str	r1, [r7, #8]
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006fa8:	88fb      	ldrh	r3, [r7, #6]
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	2100      	movs	r1, #0
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f000 fc53 	bl	800785a <USBD_LL_Transmit>

  return USBD_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b084      	sub	sp, #16
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	60f8      	str	r0, [r7, #12]
 8006fc6:	60b9      	str	r1, [r7, #8]
 8006fc8:	4613      	mov	r3, r2
 8006fca:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2203      	movs	r2, #3
 8006fd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006fd4:	88fa      	ldrh	r2, [r7, #6]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006fdc:	88fa      	ldrh	r2, [r7, #6]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fe4:	88fb      	ldrh	r3, [r7, #6]
 8006fe6:	68ba      	ldr	r2, [r7, #8]
 8006fe8:	2100      	movs	r1, #0
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f000 fc58 	bl	80078a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b084      	sub	sp, #16
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	60f8      	str	r0, [r7, #12]
 8007002:	60b9      	str	r1, [r7, #8]
 8007004:	4613      	mov	r3, r2
 8007006:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007008:	88fb      	ldrh	r3, [r7, #6]
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	2100      	movs	r1, #0
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f000 fc46 	bl	80078a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b082      	sub	sp, #8
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2204      	movs	r2, #4
 800702a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800702e:	2300      	movs	r3, #0
 8007030:	2200      	movs	r2, #0
 8007032:	2100      	movs	r1, #0
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fc10 	bl	800785a <USBD_LL_Transmit>

  return USBD_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3708      	adds	r7, #8
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2205      	movs	r2, #5
 8007050:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007054:	2300      	movs	r3, #0
 8007056:	2200      	movs	r2, #0
 8007058:	2100      	movs	r1, #0
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 fc20 	bl	80078a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3708      	adds	r7, #8
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
	...

0800706c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007070:	2200      	movs	r2, #0
 8007072:	4912      	ldr	r1, [pc, #72]	; (80070bc <MX_USB_DEVICE_Init+0x50>)
 8007074:	4812      	ldr	r0, [pc, #72]	; (80070c0 <MX_USB_DEVICE_Init+0x54>)
 8007076:	f7fe ff5e 	bl	8005f36 <USBD_Init>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d001      	beq.n	8007084 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007080:	f7f9 f9c6 	bl	8000410 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007084:	490f      	ldr	r1, [pc, #60]	; (80070c4 <MX_USB_DEVICE_Init+0x58>)
 8007086:	480e      	ldr	r0, [pc, #56]	; (80070c0 <MX_USB_DEVICE_Init+0x54>)
 8007088:	f7fe ff80 	bl	8005f8c <USBD_RegisterClass>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d001      	beq.n	8007096 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007092:	f7f9 f9bd 	bl	8000410 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007096:	490c      	ldr	r1, [pc, #48]	; (80070c8 <MX_USB_DEVICE_Init+0x5c>)
 8007098:	4809      	ldr	r0, [pc, #36]	; (80070c0 <MX_USB_DEVICE_Init+0x54>)
 800709a:	f7fe feb1 	bl	8005e00 <USBD_CDC_RegisterInterface>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d001      	beq.n	80070a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80070a4:	f7f9 f9b4 	bl	8000410 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80070a8:	4805      	ldr	r0, [pc, #20]	; (80070c0 <MX_USB_DEVICE_Init+0x54>)
 80070aa:	f7fe ff88 	bl	8005fbe <USBD_Start>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d001      	beq.n	80070b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80070b4:	f7f9 f9ac 	bl	8000410 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80070b8:	bf00      	nop
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	2000012c 	.word	0x2000012c
 80070c0:	2000044c 	.word	0x2000044c
 80070c4:	20000018 	.word	0x20000018
 80070c8:	2000011c 	.word	0x2000011c

080070cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80070d0:	2200      	movs	r2, #0
 80070d2:	4905      	ldr	r1, [pc, #20]	; (80070e8 <CDC_Init_FS+0x1c>)
 80070d4:	4805      	ldr	r0, [pc, #20]	; (80070ec <CDC_Init_FS+0x20>)
 80070d6:	f7fe fea9 	bl	8005e2c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80070da:	4905      	ldr	r1, [pc, #20]	; (80070f0 <CDC_Init_FS+0x24>)
 80070dc:	4803      	ldr	r0, [pc, #12]	; (80070ec <CDC_Init_FS+0x20>)
 80070de:	f7fe febe 	bl	8005e5e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80070e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	20000af8 	.word	0x20000af8
 80070ec:	2000044c 	.word	0x2000044c
 80070f0:	20000710 	.word	0x20000710

080070f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80070f4:	b480      	push	{r7}
 80070f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80070f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bc80      	pop	{r7}
 8007100:	4770      	bx	lr
	...

08007104 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	4603      	mov	r3, r0
 800710c:	6039      	str	r1, [r7, #0]
 800710e:	71fb      	strb	r3, [r7, #7]
 8007110:	4613      	mov	r3, r2
 8007112:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007114:	79fb      	ldrb	r3, [r7, #7]
 8007116:	2b23      	cmp	r3, #35	; 0x23
 8007118:	d84a      	bhi.n	80071b0 <CDC_Control_FS+0xac>
 800711a:	a201      	add	r2, pc, #4	; (adr r2, 8007120 <CDC_Control_FS+0x1c>)
 800711c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007120:	080071b1 	.word	0x080071b1
 8007124:	080071b1 	.word	0x080071b1
 8007128:	080071b1 	.word	0x080071b1
 800712c:	080071b1 	.word	0x080071b1
 8007130:	080071b1 	.word	0x080071b1
 8007134:	080071b1 	.word	0x080071b1
 8007138:	080071b1 	.word	0x080071b1
 800713c:	080071b1 	.word	0x080071b1
 8007140:	080071b1 	.word	0x080071b1
 8007144:	080071b1 	.word	0x080071b1
 8007148:	080071b1 	.word	0x080071b1
 800714c:	080071b1 	.word	0x080071b1
 8007150:	080071b1 	.word	0x080071b1
 8007154:	080071b1 	.word	0x080071b1
 8007158:	080071b1 	.word	0x080071b1
 800715c:	080071b1 	.word	0x080071b1
 8007160:	080071b1 	.word	0x080071b1
 8007164:	080071b1 	.word	0x080071b1
 8007168:	080071b1 	.word	0x080071b1
 800716c:	080071b1 	.word	0x080071b1
 8007170:	080071b1 	.word	0x080071b1
 8007174:	080071b1 	.word	0x080071b1
 8007178:	080071b1 	.word	0x080071b1
 800717c:	080071b1 	.word	0x080071b1
 8007180:	080071b1 	.word	0x080071b1
 8007184:	080071b1 	.word	0x080071b1
 8007188:	080071b1 	.word	0x080071b1
 800718c:	080071b1 	.word	0x080071b1
 8007190:	080071b1 	.word	0x080071b1
 8007194:	080071b1 	.word	0x080071b1
 8007198:	080071b1 	.word	0x080071b1
 800719c:	080071b1 	.word	0x080071b1
 80071a0:	080071b1 	.word	0x080071b1
 80071a4:	080071b1 	.word	0x080071b1
 80071a8:	080071b1 	.word	0x080071b1
 80071ac:	080071b1 	.word	0x080071b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80071b0:	bf00      	nop
  }

  return (USBD_OK);
 80071b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bc80      	pop	{r7}
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop

080071c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80071ca:	6879      	ldr	r1, [r7, #4]
 80071cc:	4805      	ldr	r0, [pc, #20]	; (80071e4 <CDC_Receive_FS+0x24>)
 80071ce:	f7fe fe46 	bl	8005e5e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80071d2:	4804      	ldr	r0, [pc, #16]	; (80071e4 <CDC_Receive_FS+0x24>)
 80071d4:	f7fe fe85 	bl	8005ee2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80071d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	2000044c 	.word	0x2000044c

080071e8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	460b      	mov	r3, r1
 80071f2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80071f4:	2300      	movs	r3, #0
 80071f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80071f8:	4b0d      	ldr	r3, [pc, #52]	; (8007230 <CDC_Transmit_FS+0x48>)
 80071fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071fe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007206:	2b00      	cmp	r3, #0
 8007208:	d001      	beq.n	800720e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800720a:	2301      	movs	r3, #1
 800720c:	e00b      	b.n	8007226 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800720e:	887b      	ldrh	r3, [r7, #2]
 8007210:	461a      	mov	r2, r3
 8007212:	6879      	ldr	r1, [r7, #4]
 8007214:	4806      	ldr	r0, [pc, #24]	; (8007230 <CDC_Transmit_FS+0x48>)
 8007216:	f7fe fe09 	bl	8005e2c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800721a:	4805      	ldr	r0, [pc, #20]	; (8007230 <CDC_Transmit_FS+0x48>)
 800721c:	f7fe fe32 	bl	8005e84 <USBD_CDC_TransmitPacket>
 8007220:	4603      	mov	r3, r0
 8007222:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007224:	7bfb      	ldrb	r3, [r7, #15]
}
 8007226:	4618      	mov	r0, r3
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	2000044c 	.word	0x2000044c

08007234 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	4603      	mov	r3, r0
 800723c:	6039      	str	r1, [r7, #0]
 800723e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	2212      	movs	r2, #18
 8007244:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007246:	4b03      	ldr	r3, [pc, #12]	; (8007254 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007248:	4618      	mov	r0, r3
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	bc80      	pop	{r7}
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	20000148 	.word	0x20000148

08007258 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	4603      	mov	r3, r0
 8007260:	6039      	str	r1, [r7, #0]
 8007262:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	2204      	movs	r2, #4
 8007268:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800726a:	4b03      	ldr	r3, [pc, #12]	; (8007278 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800726c:	4618      	mov	r0, r3
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	bc80      	pop	{r7}
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	2000015c 	.word	0x2000015c

0800727c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	4603      	mov	r3, r0
 8007284:	6039      	str	r1, [r7, #0]
 8007286:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007288:	79fb      	ldrb	r3, [r7, #7]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d105      	bne.n	800729a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800728e:	683a      	ldr	r2, [r7, #0]
 8007290:	4907      	ldr	r1, [pc, #28]	; (80072b0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007292:	4808      	ldr	r0, [pc, #32]	; (80072b4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007294:	f7ff fe0c 	bl	8006eb0 <USBD_GetString>
 8007298:	e004      	b.n	80072a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800729a:	683a      	ldr	r2, [r7, #0]
 800729c:	4904      	ldr	r1, [pc, #16]	; (80072b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800729e:	4805      	ldr	r0, [pc, #20]	; (80072b4 <USBD_FS_ProductStrDescriptor+0x38>)
 80072a0:	f7ff fe06 	bl	8006eb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80072a4:	4b02      	ldr	r3, [pc, #8]	; (80072b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3708      	adds	r7, #8
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	20000ee0 	.word	0x20000ee0
 80072b4:	08007a24 	.word	0x08007a24

080072b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	4603      	mov	r3, r0
 80072c0:	6039      	str	r1, [r7, #0]
 80072c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80072c4:	683a      	ldr	r2, [r7, #0]
 80072c6:	4904      	ldr	r1, [pc, #16]	; (80072d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80072c8:	4804      	ldr	r0, [pc, #16]	; (80072dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80072ca:	f7ff fdf1 	bl	8006eb0 <USBD_GetString>
  return USBD_StrDesc;
 80072ce:	4b02      	ldr	r3, [pc, #8]	; (80072d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3708      	adds	r7, #8
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	20000ee0 	.word	0x20000ee0
 80072dc:	08007a3c 	.word	0x08007a3c

080072e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	4603      	mov	r3, r0
 80072e8:	6039      	str	r1, [r7, #0]
 80072ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	221a      	movs	r2, #26
 80072f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80072f2:	f000 f843 	bl	800737c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80072f6:	4b02      	ldr	r3, [pc, #8]	; (8007300 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3708      	adds	r7, #8
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	20000160 	.word	0x20000160

08007304 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	4603      	mov	r3, r0
 800730c:	6039      	str	r1, [r7, #0]
 800730e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007310:	79fb      	ldrb	r3, [r7, #7]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d105      	bne.n	8007322 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007316:	683a      	ldr	r2, [r7, #0]
 8007318:	4907      	ldr	r1, [pc, #28]	; (8007338 <USBD_FS_ConfigStrDescriptor+0x34>)
 800731a:	4808      	ldr	r0, [pc, #32]	; (800733c <USBD_FS_ConfigStrDescriptor+0x38>)
 800731c:	f7ff fdc8 	bl	8006eb0 <USBD_GetString>
 8007320:	e004      	b.n	800732c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007322:	683a      	ldr	r2, [r7, #0]
 8007324:	4904      	ldr	r1, [pc, #16]	; (8007338 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007326:	4805      	ldr	r0, [pc, #20]	; (800733c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007328:	f7ff fdc2 	bl	8006eb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800732c:	4b02      	ldr	r3, [pc, #8]	; (8007338 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800732e:	4618      	mov	r0, r3
 8007330:	3708      	adds	r7, #8
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	20000ee0 	.word	0x20000ee0
 800733c:	08007a50 	.word	0x08007a50

08007340 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	4603      	mov	r3, r0
 8007348:	6039      	str	r1, [r7, #0]
 800734a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800734c:	79fb      	ldrb	r3, [r7, #7]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d105      	bne.n	800735e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007352:	683a      	ldr	r2, [r7, #0]
 8007354:	4907      	ldr	r1, [pc, #28]	; (8007374 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007356:	4808      	ldr	r0, [pc, #32]	; (8007378 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007358:	f7ff fdaa 	bl	8006eb0 <USBD_GetString>
 800735c:	e004      	b.n	8007368 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	4904      	ldr	r1, [pc, #16]	; (8007374 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007362:	4805      	ldr	r0, [pc, #20]	; (8007378 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007364:	f7ff fda4 	bl	8006eb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007368:	4b02      	ldr	r3, [pc, #8]	; (8007374 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800736a:	4618      	mov	r0, r3
 800736c:	3708      	adds	r7, #8
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	20000ee0 	.word	0x20000ee0
 8007378:	08007a5c 	.word	0x08007a5c

0800737c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007382:	4b0f      	ldr	r3, [pc, #60]	; (80073c0 <Get_SerialNum+0x44>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007388:	4b0e      	ldr	r3, [pc, #56]	; (80073c4 <Get_SerialNum+0x48>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800738e:	4b0e      	ldr	r3, [pc, #56]	; (80073c8 <Get_SerialNum+0x4c>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4413      	add	r3, r2
 800739a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d009      	beq.n	80073b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80073a2:	2208      	movs	r2, #8
 80073a4:	4909      	ldr	r1, [pc, #36]	; (80073cc <Get_SerialNum+0x50>)
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f000 f814 	bl	80073d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80073ac:	2204      	movs	r2, #4
 80073ae:	4908      	ldr	r1, [pc, #32]	; (80073d0 <Get_SerialNum+0x54>)
 80073b0:	68b8      	ldr	r0, [r7, #8]
 80073b2:	f000 f80f 	bl	80073d4 <IntToUnicode>
  }
}
 80073b6:	bf00      	nop
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	1ffff7e8 	.word	0x1ffff7e8
 80073c4:	1ffff7ec 	.word	0x1ffff7ec
 80073c8:	1ffff7f0 	.word	0x1ffff7f0
 80073cc:	20000162 	.word	0x20000162
 80073d0:	20000172 	.word	0x20000172

080073d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b087      	sub	sp, #28
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	4613      	mov	r3, r2
 80073e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80073e2:	2300      	movs	r3, #0
 80073e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80073e6:	2300      	movs	r3, #0
 80073e8:	75fb      	strb	r3, [r7, #23]
 80073ea:	e027      	b.n	800743c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	0f1b      	lsrs	r3, r3, #28
 80073f0:	2b09      	cmp	r3, #9
 80073f2:	d80b      	bhi.n	800740c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	0f1b      	lsrs	r3, r3, #28
 80073f8:	b2da      	uxtb	r2, r3
 80073fa:	7dfb      	ldrb	r3, [r7, #23]
 80073fc:	005b      	lsls	r3, r3, #1
 80073fe:	4619      	mov	r1, r3
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	440b      	add	r3, r1
 8007404:	3230      	adds	r2, #48	; 0x30
 8007406:	b2d2      	uxtb	r2, r2
 8007408:	701a      	strb	r2, [r3, #0]
 800740a:	e00a      	b.n	8007422 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	0f1b      	lsrs	r3, r3, #28
 8007410:	b2da      	uxtb	r2, r3
 8007412:	7dfb      	ldrb	r3, [r7, #23]
 8007414:	005b      	lsls	r3, r3, #1
 8007416:	4619      	mov	r1, r3
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	440b      	add	r3, r1
 800741c:	3237      	adds	r2, #55	; 0x37
 800741e:	b2d2      	uxtb	r2, r2
 8007420:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	011b      	lsls	r3, r3, #4
 8007426:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007428:	7dfb      	ldrb	r3, [r7, #23]
 800742a:	005b      	lsls	r3, r3, #1
 800742c:	3301      	adds	r3, #1
 800742e:	68ba      	ldr	r2, [r7, #8]
 8007430:	4413      	add	r3, r2
 8007432:	2200      	movs	r2, #0
 8007434:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007436:	7dfb      	ldrb	r3, [r7, #23]
 8007438:	3301      	adds	r3, #1
 800743a:	75fb      	strb	r3, [r7, #23]
 800743c:	7dfa      	ldrb	r2, [r7, #23]
 800743e:	79fb      	ldrb	r3, [r7, #7]
 8007440:	429a      	cmp	r2, r3
 8007442:	d3d3      	bcc.n	80073ec <IntToUnicode+0x18>
  }
}
 8007444:	bf00      	nop
 8007446:	bf00      	nop
 8007448:	371c      	adds	r7, #28
 800744a:	46bd      	mov	sp, r7
 800744c:	bc80      	pop	{r7}
 800744e:	4770      	bx	lr

08007450 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a0d      	ldr	r2, [pc, #52]	; (8007494 <HAL_PCD_MspInit+0x44>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d113      	bne.n	800748a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007462:	4b0d      	ldr	r3, [pc, #52]	; (8007498 <HAL_PCD_MspInit+0x48>)
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	4a0c      	ldr	r2, [pc, #48]	; (8007498 <HAL_PCD_MspInit+0x48>)
 8007468:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800746c:	61d3      	str	r3, [r2, #28]
 800746e:	4b0a      	ldr	r3, [pc, #40]	; (8007498 <HAL_PCD_MspInit+0x48>)
 8007470:	69db      	ldr	r3, [r3, #28]
 8007472:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007476:	60fb      	str	r3, [r7, #12]
 8007478:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800747a:	2200      	movs	r2, #0
 800747c:	2100      	movs	r1, #0
 800747e:	2014      	movs	r0, #20
 8007480:	f7f9 fdf7 	bl	8001072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007484:	2014      	movs	r0, #20
 8007486:	f7f9 fe10 	bl	80010aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800748a:	bf00      	nop
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	40005c00 	.word	0x40005c00
 8007498:	40021000 	.word	0x40021000

0800749c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80074b0:	4619      	mov	r1, r3
 80074b2:	4610      	mov	r0, r2
 80074b4:	f7fe fdcb 	bl	800604e <USBD_LL_SetupStage>
}
 80074b8:	bf00      	nop
 80074ba:	3708      	adds	r7, #8
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	460b      	mov	r3, r1
 80074ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80074d2:	78fa      	ldrb	r2, [r7, #3]
 80074d4:	6879      	ldr	r1, [r7, #4]
 80074d6:	4613      	mov	r3, r2
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	4413      	add	r3, r2
 80074dc:	00db      	lsls	r3, r3, #3
 80074de:	440b      	add	r3, r1
 80074e0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	78fb      	ldrb	r3, [r7, #3]
 80074e8:	4619      	mov	r1, r3
 80074ea:	f7fe fdfd 	bl	80060e8 <USBD_LL_DataOutStage>
}
 80074ee:	bf00      	nop
 80074f0:	3708      	adds	r7, #8
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074f6:	b580      	push	{r7, lr}
 80074f8:	b082      	sub	sp, #8
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
 80074fe:	460b      	mov	r3, r1
 8007500:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007508:	78fa      	ldrb	r2, [r7, #3]
 800750a:	6879      	ldr	r1, [r7, #4]
 800750c:	4613      	mov	r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	4413      	add	r3, r2
 8007512:	00db      	lsls	r3, r3, #3
 8007514:	440b      	add	r3, r1
 8007516:	333c      	adds	r3, #60	; 0x3c
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	78fb      	ldrb	r3, [r7, #3]
 800751c:	4619      	mov	r1, r3
 800751e:	f7fe fe54 	bl	80061ca <USBD_LL_DataInStage>
}
 8007522:	bf00      	nop
 8007524:	3708      	adds	r7, #8
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}

0800752a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b082      	sub	sp, #8
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007538:	4618      	mov	r0, r3
 800753a:	f7fe ff64 	bl	8006406 <USBD_LL_SOF>
}
 800753e:	bf00      	nop
 8007540:	3708      	adds	r7, #8
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b084      	sub	sp, #16
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800754e:	2301      	movs	r3, #1
 8007550:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	2b02      	cmp	r3, #2
 8007558:	d001      	beq.n	800755e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800755a:	f7f8 ff59 	bl	8000410 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007564:	7bfa      	ldrb	r2, [r7, #15]
 8007566:	4611      	mov	r1, r2
 8007568:	4618      	mov	r0, r3
 800756a:	f7fe ff14 	bl	8006396 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007574:	4618      	mov	r0, r3
 8007576:	f7fe fecd 	bl	8006314 <USBD_LL_Reset>
}
 800757a:	bf00      	nop
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
	...

08007584 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007592:	4618      	mov	r0, r3
 8007594:	f7fe ff0e 	bl	80063b4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	699b      	ldr	r3, [r3, #24]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d005      	beq.n	80075ac <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80075a0:	4b04      	ldr	r3, [pc, #16]	; (80075b4 <HAL_PCD_SuspendCallback+0x30>)
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	4a03      	ldr	r2, [pc, #12]	; (80075b4 <HAL_PCD_SuspendCallback+0x30>)
 80075a6:	f043 0306 	orr.w	r3, r3, #6
 80075aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80075ac:	bf00      	nop
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	e000ed00 	.word	0xe000ed00

080075b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7fe ff08 	bl	80063dc <USBD_LL_Resume>
}
 80075cc:	bf00      	nop
 80075ce:	3708      	adds	r7, #8
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80075dc:	4a28      	ldr	r2, [pc, #160]	; (8007680 <USBD_LL_Init+0xac>)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a26      	ldr	r2, [pc, #152]	; (8007680 <USBD_LL_Init+0xac>)
 80075e8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80075ec:	4b24      	ldr	r3, [pc, #144]	; (8007680 <USBD_LL_Init+0xac>)
 80075ee:	4a25      	ldr	r2, [pc, #148]	; (8007684 <USBD_LL_Init+0xb0>)
 80075f0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80075f2:	4b23      	ldr	r3, [pc, #140]	; (8007680 <USBD_LL_Init+0xac>)
 80075f4:	2208      	movs	r2, #8
 80075f6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80075f8:	4b21      	ldr	r3, [pc, #132]	; (8007680 <USBD_LL_Init+0xac>)
 80075fa:	2202      	movs	r2, #2
 80075fc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80075fe:	4b20      	ldr	r3, [pc, #128]	; (8007680 <USBD_LL_Init+0xac>)
 8007600:	2200      	movs	r2, #0
 8007602:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007604:	4b1e      	ldr	r3, [pc, #120]	; (8007680 <USBD_LL_Init+0xac>)
 8007606:	2200      	movs	r2, #0
 8007608:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800760a:	4b1d      	ldr	r3, [pc, #116]	; (8007680 <USBD_LL_Init+0xac>)
 800760c:	2200      	movs	r2, #0
 800760e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007610:	481b      	ldr	r0, [pc, #108]	; (8007680 <USBD_LL_Init+0xac>)
 8007612:	f7fa f8d7 	bl	80017c4 <HAL_PCD_Init>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d001      	beq.n	8007620 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800761c:	f7f8 fef8 	bl	8000410 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007626:	2318      	movs	r3, #24
 8007628:	2200      	movs	r2, #0
 800762a:	2100      	movs	r1, #0
 800762c:	f7fb fc19 	bl	8002e62 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007636:	2358      	movs	r3, #88	; 0x58
 8007638:	2200      	movs	r2, #0
 800763a:	2180      	movs	r1, #128	; 0x80
 800763c:	f7fb fc11 	bl	8002e62 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007646:	23c0      	movs	r3, #192	; 0xc0
 8007648:	2200      	movs	r2, #0
 800764a:	2181      	movs	r1, #129	; 0x81
 800764c:	f7fb fc09 	bl	8002e62 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007656:	f44f 7388 	mov.w	r3, #272	; 0x110
 800765a:	2200      	movs	r2, #0
 800765c:	2101      	movs	r1, #1
 800765e:	f7fb fc00 	bl	8002e62 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007668:	f44f 7380 	mov.w	r3, #256	; 0x100
 800766c:	2200      	movs	r2, #0
 800766e:	2182      	movs	r1, #130	; 0x82
 8007670:	f7fb fbf7 	bl	8002e62 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3708      	adds	r7, #8
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	200010e0 	.word	0x200010e0
 8007684:	40005c00 	.word	0x40005c00

08007688 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007690:	2300      	movs	r3, #0
 8007692:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007694:	2300      	movs	r3, #0
 8007696:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fa f99b 	bl	80019da <HAL_PCD_Start>
 80076a4:	4603      	mov	r3, r0
 80076a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076a8:	7bfb      	ldrb	r3, [r7, #15]
 80076aa:	4618      	mov	r0, r3
 80076ac:	f000 f94e 	bl	800794c <USBD_Get_USB_Status>
 80076b0:	4603      	mov	r3, r0
 80076b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b084      	sub	sp, #16
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	4608      	mov	r0, r1
 80076c8:	4611      	mov	r1, r2
 80076ca:	461a      	mov	r2, r3
 80076cc:	4603      	mov	r3, r0
 80076ce:	70fb      	strb	r3, [r7, #3]
 80076d0:	460b      	mov	r3, r1
 80076d2:	70bb      	strb	r3, [r7, #2]
 80076d4:	4613      	mov	r3, r2
 80076d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076d8:	2300      	movs	r3, #0
 80076da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076dc:	2300      	movs	r3, #0
 80076de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80076e6:	78bb      	ldrb	r3, [r7, #2]
 80076e8:	883a      	ldrh	r2, [r7, #0]
 80076ea:	78f9      	ldrb	r1, [r7, #3]
 80076ec:	f7fa fb15 	bl	8001d1a <HAL_PCD_EP_Open>
 80076f0:	4603      	mov	r3, r0
 80076f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076f4:	7bfb      	ldrb	r3, [r7, #15]
 80076f6:	4618      	mov	r0, r3
 80076f8:	f000 f928 	bl	800794c <USBD_Get_USB_Status>
 80076fc:	4603      	mov	r3, r0
 80076fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007700:	7bbb      	ldrb	r3, [r7, #14]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b084      	sub	sp, #16
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
 8007712:	460b      	mov	r3, r1
 8007714:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007716:	2300      	movs	r3, #0
 8007718:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800771a:	2300      	movs	r3, #0
 800771c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007724:	78fa      	ldrb	r2, [r7, #3]
 8007726:	4611      	mov	r1, r2
 8007728:	4618      	mov	r0, r3
 800772a:	f7fa fb5c 	bl	8001de6 <HAL_PCD_EP_Close>
 800772e:	4603      	mov	r3, r0
 8007730:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007732:	7bfb      	ldrb	r3, [r7, #15]
 8007734:	4618      	mov	r0, r3
 8007736:	f000 f909 	bl	800794c <USBD_Get_USB_Status>
 800773a:	4603      	mov	r3, r0
 800773c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800773e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007740:	4618      	mov	r0, r3
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	460b      	mov	r3, r1
 8007752:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007754:	2300      	movs	r3, #0
 8007756:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007758:	2300      	movs	r3, #0
 800775a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007762:	78fa      	ldrb	r2, [r7, #3]
 8007764:	4611      	mov	r1, r2
 8007766:	4618      	mov	r0, r3
 8007768:	f7fa fc1c 	bl	8001fa4 <HAL_PCD_EP_SetStall>
 800776c:	4603      	mov	r3, r0
 800776e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007770:	7bfb      	ldrb	r3, [r7, #15]
 8007772:	4618      	mov	r0, r3
 8007774:	f000 f8ea 	bl	800794c <USBD_Get_USB_Status>
 8007778:	4603      	mov	r3, r0
 800777a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800777c:	7bbb      	ldrb	r3, [r7, #14]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b084      	sub	sp, #16
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	460b      	mov	r3, r1
 8007790:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007792:	2300      	movs	r3, #0
 8007794:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007796:	2300      	movs	r3, #0
 8007798:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077a0:	78fa      	ldrb	r2, [r7, #3]
 80077a2:	4611      	mov	r1, r2
 80077a4:	4618      	mov	r0, r3
 80077a6:	f7fa fc5d 	bl	8002064 <HAL_PCD_EP_ClrStall>
 80077aa:	4603      	mov	r3, r0
 80077ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077ae:	7bfb      	ldrb	r3, [r7, #15]
 80077b0:	4618      	mov	r0, r3
 80077b2:	f000 f8cb 	bl	800794c <USBD_Get_USB_Status>
 80077b6:	4603      	mov	r3, r0
 80077b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3710      	adds	r7, #16
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	460b      	mov	r3, r1
 80077ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80077d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	da0c      	bge.n	80077fa <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80077e0:	78fb      	ldrb	r3, [r7, #3]
 80077e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077e6:	68f9      	ldr	r1, [r7, #12]
 80077e8:	1c5a      	adds	r2, r3, #1
 80077ea:	4613      	mov	r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4413      	add	r3, r2
 80077f0:	00db      	lsls	r3, r3, #3
 80077f2:	440b      	add	r3, r1
 80077f4:	3302      	adds	r3, #2
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	e00b      	b.n	8007812 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80077fa:	78fb      	ldrb	r3, [r7, #3]
 80077fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007800:	68f9      	ldr	r1, [r7, #12]
 8007802:	4613      	mov	r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4413      	add	r3, r2
 8007808:	00db      	lsls	r3, r3, #3
 800780a:	440b      	add	r3, r1
 800780c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007810:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007812:	4618      	mov	r0, r3
 8007814:	3714      	adds	r7, #20
 8007816:	46bd      	mov	sp, r7
 8007818:	bc80      	pop	{r7}
 800781a:	4770      	bx	lr

0800781c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	460b      	mov	r3, r1
 8007826:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007828:	2300      	movs	r3, #0
 800782a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800782c:	2300      	movs	r3, #0
 800782e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007836:	78fa      	ldrb	r2, [r7, #3]
 8007838:	4611      	mov	r1, r2
 800783a:	4618      	mov	r0, r3
 800783c:	f7fa fa48 	bl	8001cd0 <HAL_PCD_SetAddress>
 8007840:	4603      	mov	r3, r0
 8007842:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007844:	7bfb      	ldrb	r3, [r7, #15]
 8007846:	4618      	mov	r0, r3
 8007848:	f000 f880 	bl	800794c <USBD_Get_USB_Status>
 800784c:	4603      	mov	r3, r0
 800784e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007850:	7bbb      	ldrb	r3, [r7, #14]
}
 8007852:	4618      	mov	r0, r3
 8007854:	3710      	adds	r7, #16
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b086      	sub	sp, #24
 800785e:	af00      	add	r7, sp, #0
 8007860:	60f8      	str	r0, [r7, #12]
 8007862:	607a      	str	r2, [r7, #4]
 8007864:	461a      	mov	r2, r3
 8007866:	460b      	mov	r3, r1
 8007868:	72fb      	strb	r3, [r7, #11]
 800786a:	4613      	mov	r3, r2
 800786c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007872:	2300      	movs	r3, #0
 8007874:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800787c:	893b      	ldrh	r3, [r7, #8]
 800787e:	7af9      	ldrb	r1, [r7, #11]
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	f7fa fb4c 	bl	8001f1e <HAL_PCD_EP_Transmit>
 8007886:	4603      	mov	r3, r0
 8007888:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800788a:	7dfb      	ldrb	r3, [r7, #23]
 800788c:	4618      	mov	r0, r3
 800788e:	f000 f85d 	bl	800794c <USBD_Get_USB_Status>
 8007892:	4603      	mov	r3, r0
 8007894:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007896:	7dbb      	ldrb	r3, [r7, #22]
}
 8007898:	4618      	mov	r0, r3
 800789a:	3718      	adds	r7, #24
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b086      	sub	sp, #24
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	607a      	str	r2, [r7, #4]
 80078aa:	461a      	mov	r2, r3
 80078ac:	460b      	mov	r3, r1
 80078ae:	72fb      	strb	r3, [r7, #11]
 80078b0:	4613      	mov	r3, r2
 80078b2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078b4:	2300      	movs	r3, #0
 80078b6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078b8:	2300      	movs	r3, #0
 80078ba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80078c2:	893b      	ldrh	r3, [r7, #8]
 80078c4:	7af9      	ldrb	r1, [r7, #11]
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	f7fa fad5 	bl	8001e76 <HAL_PCD_EP_Receive>
 80078cc:	4603      	mov	r3, r0
 80078ce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078d0:	7dfb      	ldrb	r3, [r7, #23]
 80078d2:	4618      	mov	r0, r3
 80078d4:	f000 f83a 	bl	800794c <USBD_Get_USB_Status>
 80078d8:	4603      	mov	r3, r0
 80078da:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80078dc:	7dbb      	ldrb	r3, [r7, #22]
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3718      	adds	r7, #24
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b082      	sub	sp, #8
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
 80078ee:	460b      	mov	r3, r1
 80078f0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078f8:	78fa      	ldrb	r2, [r7, #3]
 80078fa:	4611      	mov	r1, r2
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7fa faf7 	bl	8001ef0 <HAL_PCD_EP_GetRxCount>
 8007902:	4603      	mov	r3, r0
}
 8007904:	4618      	mov	r0, r3
 8007906:	3708      	adds	r7, #8
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007914:	4b02      	ldr	r3, [pc, #8]	; (8007920 <USBD_static_malloc+0x14>)
}
 8007916:	4618      	mov	r0, r3
 8007918:	370c      	adds	r7, #12
 800791a:	46bd      	mov	sp, r7
 800791c:	bc80      	pop	{r7}
 800791e:	4770      	bx	lr
 8007920:	200001a8 	.word	0x200001a8

08007924 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]

}
 800792c:	bf00      	nop
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	bc80      	pop	{r7}
 8007934:	4770      	bx	lr

08007936 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007936:	b480      	push	{r7}
 8007938:	b083      	sub	sp, #12
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
 800793e:	460b      	mov	r3, r1
 8007940:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007942:	bf00      	nop
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	bc80      	pop	{r7}
 800794a:	4770      	bx	lr

0800794c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	4603      	mov	r3, r0
 8007954:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800795a:	79fb      	ldrb	r3, [r7, #7]
 800795c:	2b03      	cmp	r3, #3
 800795e:	d817      	bhi.n	8007990 <USBD_Get_USB_Status+0x44>
 8007960:	a201      	add	r2, pc, #4	; (adr r2, 8007968 <USBD_Get_USB_Status+0x1c>)
 8007962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007966:	bf00      	nop
 8007968:	08007979 	.word	0x08007979
 800796c:	0800797f 	.word	0x0800797f
 8007970:	08007985 	.word	0x08007985
 8007974:	0800798b 	.word	0x0800798b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007978:	2300      	movs	r3, #0
 800797a:	73fb      	strb	r3, [r7, #15]
    break;
 800797c:	e00b      	b.n	8007996 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800797e:	2302      	movs	r3, #2
 8007980:	73fb      	strb	r3, [r7, #15]
    break;
 8007982:	e008      	b.n	8007996 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007984:	2301      	movs	r3, #1
 8007986:	73fb      	strb	r3, [r7, #15]
    break;
 8007988:	e005      	b.n	8007996 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800798a:	2302      	movs	r3, #2
 800798c:	73fb      	strb	r3, [r7, #15]
    break;
 800798e:	e002      	b.n	8007996 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007990:	2302      	movs	r3, #2
 8007992:	73fb      	strb	r3, [r7, #15]
    break;
 8007994:	bf00      	nop
  }
  return usb_status;
 8007996:	7bfb      	ldrb	r3, [r7, #15]
}
 8007998:	4618      	mov	r0, r3
 800799a:	3714      	adds	r7, #20
 800799c:	46bd      	mov	sp, r7
 800799e:	bc80      	pop	{r7}
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop

080079a4 <__libc_init_array>:
 80079a4:	b570      	push	{r4, r5, r6, lr}
 80079a6:	2600      	movs	r6, #0
 80079a8:	4d0c      	ldr	r5, [pc, #48]	; (80079dc <__libc_init_array+0x38>)
 80079aa:	4c0d      	ldr	r4, [pc, #52]	; (80079e0 <__libc_init_array+0x3c>)
 80079ac:	1b64      	subs	r4, r4, r5
 80079ae:	10a4      	asrs	r4, r4, #2
 80079b0:	42a6      	cmp	r6, r4
 80079b2:	d109      	bne.n	80079c8 <__libc_init_array+0x24>
 80079b4:	f000 f822 	bl	80079fc <_init>
 80079b8:	2600      	movs	r6, #0
 80079ba:	4d0a      	ldr	r5, [pc, #40]	; (80079e4 <__libc_init_array+0x40>)
 80079bc:	4c0a      	ldr	r4, [pc, #40]	; (80079e8 <__libc_init_array+0x44>)
 80079be:	1b64      	subs	r4, r4, r5
 80079c0:	10a4      	asrs	r4, r4, #2
 80079c2:	42a6      	cmp	r6, r4
 80079c4:	d105      	bne.n	80079d2 <__libc_init_array+0x2e>
 80079c6:	bd70      	pop	{r4, r5, r6, pc}
 80079c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80079cc:	4798      	blx	r3
 80079ce:	3601      	adds	r6, #1
 80079d0:	e7ee      	b.n	80079b0 <__libc_init_array+0xc>
 80079d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80079d6:	4798      	blx	r3
 80079d8:	3601      	adds	r6, #1
 80079da:	e7f2      	b.n	80079c2 <__libc_init_array+0x1e>
 80079dc:	08007a7c 	.word	0x08007a7c
 80079e0:	08007a7c 	.word	0x08007a7c
 80079e4:	08007a7c 	.word	0x08007a7c
 80079e8:	08007a80 	.word	0x08007a80

080079ec <memset>:
 80079ec:	4603      	mov	r3, r0
 80079ee:	4402      	add	r2, r0
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d100      	bne.n	80079f6 <memset+0xa>
 80079f4:	4770      	bx	lr
 80079f6:	f803 1b01 	strb.w	r1, [r3], #1
 80079fa:	e7f9      	b.n	80079f0 <memset+0x4>

080079fc <_init>:
 80079fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079fe:	bf00      	nop
 8007a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a02:	bc08      	pop	{r3}
 8007a04:	469e      	mov	lr, r3
 8007a06:	4770      	bx	lr

08007a08 <_fini>:
 8007a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a0a:	bf00      	nop
 8007a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a0e:	bc08      	pop	{r3}
 8007a10:	469e      	mov	lr, r3
 8007a12:	4770      	bx	lr
